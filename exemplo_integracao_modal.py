#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üìã EXEMPLO DE INTEGRA√á√ÉO DO MODAL DE MENSALIDADE
===============================================

Demonstra como integrar o modal de mensalidade em uma interface principal
de gest√£o de mensalidades escolares.
"""

import streamlit as st
import pandas as pd
from datetime import datetime, date, timedelta
from typing import Dict, List, Optional

# Importar o modal de mensalidade
from modal_mensalidade import open_modal
from modal_mensalidade_integracoes import (
    gerar_relatorio_mensalidade_docx,
    enviar_email_cobranca,
    gerar_link_whatsapp
)

# Importar depend√™ncias do sistema
from models.base import supabase, formatar_data_br, formatar_valor_br

# ==========================================================
# üîß FUN√á√ïES DE APOIO PARA A INTERFACE PRINCIPAL
# ==========================================================

def buscar_mensalidades_filtradas(filtros: Dict) -> Dict:
    """
    Busca mensalidades aplicando filtros especificados
    
    Args:
        filtros: Dict com filtros (turma, periodo, status, nome_aluno)
        
    Returns:
        Dict: {"success": bool, "mensalidades": List[Dict], "count": int}
    """
    try:
        query = supabase.table("mensalidades").select("""
            id_mensalidade, mes_referencia, valor, data_vencimento, 
            data_pagamento, status, observacoes, inserted_at, updated_at,
            alunos!inner(
                id, nome, turno,
                turmas!inner(nome_turma)
            )
        """)
        
        # Aplicar filtros
        if filtros.get("turma") and filtros["turma"] != "Todas":
            query = query.eq("alunos.turmas.nome_turma", filtros["turma"])
        
        if filtros.get("status") and filtros["status"] != "Todos":
            query = query.eq("status", filtros["status"])
        
        if filtros.get("data_inicio"):
            query = query.gte("data_vencimento", filtros["data_inicio"])
        
        if filtros.get("data_fim"):
            query = query.lte("data_vencimento", filtros["data_fim"])
        
        # Executar query
        response = query.order("data_vencimento", desc=True).execute()
        
        mensalidades = response.data if response.data else []
        
        # Filtrar por nome do aluno se especificado
        if filtros.get("nome_aluno"):
            nome_filtro = filtros["nome_aluno"].lower()
            mensalidades = [
                m for m in mensalidades 
                if nome_filtro in m["alunos"]["nome"].lower()
            ]
        
        return {
            "success": True,
            "mensalidades": mensalidades,
            "count": len(mensalidades)
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "mensalidades": [],
            "count": 0
        }

def aplicar_edicao_em_massa(ids_mensalidades: List[str], dados_alteracao: Dict) -> Dict:
    """
    Aplica altera√ß√µes em massa para mensalidades selecionadas
    
    Args:
        ids_mensalidades: Lista de IDs das mensalidades
        dados_alteracao: Dados para alterar
        
    Returns:
        Dict: {"success": bool, "alteradas": int, "erros": List[str]}
    """
    try:
        alteradas = 0
        erros = []
        
        for id_mensalidade in ids_mensalidades:
            try:
                response = supabase.table("mensalidades").update(dados_alteracao).eq(
                    "id_mensalidade", id_mensalidade
                ).execute()
                
                if response.data:
                    alteradas += 1
                else:
                    erros.append(f"Erro ao alterar {id_mensalidade}")
                    
            except Exception as e:
                erros.append(f"Erro em {id_mensalidade}: {str(e)}")
        
        return {
            "success": True,
            "alteradas": alteradas,
            "erros": erros
        }
        
    except Exception as e:
        return {
            "success": False,
            "alteradas": 0,
            "erros": [str(e)]
        }

# ==========================================================
# üé® INTERFACE PRINCIPAL DE MENSALIDADES
# ==========================================================

def interface_gestao_mensalidades():
    """
    Interface principal para gest√£o de mensalidades com integra√ß√£o do modal
    """
    
    st.title("üí∞ Gest√£o de Mensalidades")
    st.markdown("Interface completa para gerenciar mensalidades escolares")
    
    # Inicializar estado da sess√£o
    if 'filtros_mensalidades' not in st.session_state:
        st.session_state.filtros_mensalidades = {
            "turma": "Todas",
            "status": "Todos",
            "data_inicio": (date.today() - timedelta(days=90)).isoformat(),
            "data_fim": date.today().isoformat(),
            "nome_aluno": ""
        }
    
    if 'mensalidades_selecionadas' not in st.session_state:
        st.session_state.mensalidades_selecionadas = []
    
    if 'modal_aberto' not in st.session_state:
        st.session_state.modal_aberto = False
    
    if 'id_mensalidade_modal' not in st.session_state:
        st.session_state.id_mensalidade_modal = None
    
    # ==========================================================
    # SE√á√ÉO DE FILTROS
    # ==========================================================
    
    with st.expander("üîç Filtros de Busca", expanded=True):
        col_filtro1, col_filtro2, col_filtro3 = st.columns(3)
        
        with col_filtro1:
            # Buscar turmas dispon√≠veis
            try:
                turmas_response = supabase.table("turmas").select("nome_turma").execute()
                turmas_opcoes = ["Todas"] + [t["nome_turma"] for t in turmas_response.data]
            except:
                turmas_opcoes = ["Todas"]
            
            st.session_state.filtros_mensalidades["turma"] = st.selectbox(
                "üéì Turma:",
                options=turmas_opcoes,
                index=turmas_opcoes.index(st.session_state.filtros_mensalidades["turma"]) if st.session_state.filtros_mensalidades["turma"] in turmas_opcoes else 0
            )
            
            st.session_state.filtros_mensalidades["status"] = st.selectbox(
                "üìä Status:",
                options=["Todos", "A vencer", "Atrasado", "Pago", "Pago parcial", "Cancelado"]
            )
        
        with col_filtro2:
            st.session_state.filtros_mensalidades["data_inicio"] = st.date_input(
                "üìÖ Data In√≠cio:",
                value=datetime.fromisoformat(st.session_state.filtros_mensalidades["data_inicio"]).date()
            ).isoformat()
            
            st.session_state.filtros_mensalidades["data_fim"] = st.date_input(
                "üìÖ Data Fim:",
                value=datetime.fromisoformat(st.session_state.filtros_mensalidades["data_fim"]).date()
            ).isoformat()
        
        with col_filtro3:
            st.session_state.filtros_mensalidades["nome_aluno"] = st.text_input(
                "üîç Nome do Aluno:",
                value=st.session_state.filtros_mensalidades["nome_aluno"],
                placeholder="Digite parte do nome..."
            )
            
            # Bot√£o para aplicar filtros
            if st.button("üîÑ Aplicar Filtros", type="primary"):
                st.session_state.dados_atualizados = True
    
    # ==========================================================
    # BUSCAR E EXIBIR MENSALIDADES
    # ==========================================================
    
    # Buscar dados se necess√°rio
    if ('mensalidades_dados' not in st.session_state or 
        st.session_state.get('dados_atualizados', False)):
        
        with st.spinner("Carregando mensalidades..."):
            resultado = buscar_mensalidades_filtradas(st.session_state.filtros_mensalidades)
        
        if resultado.get("success"):
            st.session_state.mensalidades_dados = resultado["mensalidades"]
            st.session_state.dados_atualizados = False
        else:
            st.error(f"Erro ao carregar dados: {resultado.get('error')}")
            st.session_state.mensalidades_dados = []
    
    mensalidades = st.session_state.get('mensalidades_dados', [])
    
    # M√©tricas principais
    if mensalidades:
        col_metric1, col_metric2, col_metric3, col_metric4 = st.columns(4)
        
        total_mensalidades = len(mensalidades)
        valor_total = sum(float(m["valor"]) for m in mensalidades)
        pagas = len([m for m in mensalidades if m["status"] in ["Pago", "Pago parcial"]])
        atrasadas = len([m for m in mensalidades if m["status"] == "Atrasado"])
        
        with col_metric1:
            st.metric("üìã Total", total_mensalidades)
        
        with col_metric2:
            st.metric("üí∞ Valor Total", f"R$ {valor_total:,.2f}")
        
        with col_metric3:
            st.metric("‚úÖ Pagas", pagas, delta=f"{(pagas/total_mensalidades*100):.1f}%")
        
        with col_metric4:
            if atrasadas > 0:
                st.metric("‚ö†Ô∏è Atrasadas", atrasadas, delta="Aten√ß√£o", delta_color="inverse")
            else:
                st.metric("‚ö†Ô∏è Atrasadas", 0)
    
    # ==========================================================
    # A√á√ïES EM MASSA
    # ==========================================================
    
    if mensalidades:
        st.markdown("---")
        st.subheader("‚ö° A√ß√µes em Massa")
        
        col_massa1, col_massa2, col_massa3 = st.columns(3)
        
        with col_massa1:
            # Sele√ß√£o para a√ß√µes em massa
            selecionadas = st.multiselect(
                "Selecionar mensalidades:",
                options=[m["id_mensalidade"] for m in mensalidades],
                format_func=lambda x: next(
                    f"{m['alunos']['nome']} - {m['mes_referencia']}" 
                    for m in mensalidades if m["id_mensalidade"] == x
                ),
                key="multiselect_mensalidades"
            )
            
            st.session_state.mensalidades_selecionadas = selecionadas
        
        with col_massa2:
            if selecionadas:
                st.info(f"üìå {len(selecionadas)} mensalidades selecionadas")
                
                # A√ß√µes dispon√≠veis
                acao_massa = st.selectbox(
                    "A√ß√£o a aplicar:",
                    options=["", "Marcar como Pago", "Marcar como Atrasado", "Adicionar Observa√ß√£o"],
                    key="acao_massa_select"
                )
        
        with col_massa3:
            if selecionadas and acao_massa:
                if st.button("üöÄ Executar A√ß√£o em Massa", type="primary"):
                    
                    dados_alteracao = {}
                    
                    if acao_massa == "Marcar como Pago":
                        dados_alteracao = {
                            "status": "Pago",
                            "data_pagamento": date.today().isoformat()
                        }
                    elif acao_massa == "Marcar como Atrasado":
                        dados_alteracao = {"status": "Atrasado"}
                    elif acao_massa == "Adicionar Observa√ß√£o":
                        observacao = st.text_input("Observa√ß√£o a adicionar:", key="obs_massa")
                        dados_alteracao = {"observacoes": observacao}
                    
                    if dados_alteracao:
                        resultado_massa = aplicar_edicao_em_massa(selecionadas, dados_alteracao)
                        
                        if resultado_massa.get("success"):
                            st.success(f"‚úÖ {resultado_massa['alteradas']} mensalidades alteradas!")
                            if resultado_massa.get("erros"):
                                st.warning(f"‚ö†Ô∏è {len(resultado_massa['erros'])} erros encontrados")
                            st.session_state.dados_atualizados = True
                            st.rerun()
                        else:
                            st.error("‚ùå Erro na execu√ß√£o em massa")
    
    # ==========================================================
    # TABELA DE MENSALIDADES COM BOT√ïES DE A√á√ÉO
    # ==========================================================
    
    if mensalidades:
        st.markdown("---")
        st.subheader("üìã Lista de Mensalidades")
        
        # Preparar dados para exibi√ß√£o
        dados_tabela = []
        for m in mensalidades:
            # Calcular status visual
            status_emoji = "üìÖ"
            if m["status"] == "Pago":
                status_emoji = "‚úÖ"
            elif m["status"] == "Atrasado":
                status_emoji = "‚ö†Ô∏è"
            elif m["status"] == "Cancelado":
                status_emoji = "‚ùå"
            
            dados_tabela.append({
                "ID": m["id_mensalidade"],
                "Aluno": m["alunos"]["nome"],
                "Turma": m["alunos"]["turmas"]["nome_turma"],
                "M√™s": m["mes_referencia"],
                "Valor": f"R$ {float(m['valor']):,.2f}",
                "Vencimento": formatar_data_br(m["data_vencimento"]),
                "Status": f"{status_emoji} {m['status']}",
                "Observa√ß√µes": m.get("observacoes", "")[:50] + "..." if m.get("observacoes", "") and len(m.get("observacoes", "")) > 50 else m.get("observacoes", "")
            })
        
        # Exibir tabela
        df_mensalidades = pd.DataFrame(dados_tabela)
        
        # Tabela edit√°vel (permitir edi√ß√£o de observa√ß√µes)
        df_editado = st.data_editor(
            df_mensalidades,
            column_config={
                "ID": st.column_config.TextColumn("ID", disabled=True, width="small"),
                "Aluno": st.column_config.TextColumn("Aluno", disabled=True),
                "Turma": st.column_config.TextColumn("Turma", disabled=True, width="small"),
                "M√™s": st.column_config.TextColumn("M√™s", disabled=True, width="small"),
                "Valor": st.column_config.TextColumn("Valor", disabled=True, width="small"),
                "Vencimento": st.column_config.TextColumn("Vencimento", disabled=True, width="small"),
                "Status": st.column_config.TextColumn("Status", disabled=True, width="small"),
                "Observa√ß√µes": st.column_config.TextColumn("Observa√ß√µes", width="medium")
            },
            use_container_width=True,
            height=400,
            key="tabela_mensalidades_editavel"
        )
        
        # Detectar mudan√ßas na tabela e aplicar
        if not df_editado.equals(df_mensalidades):
            st.info("‚úèÔ∏è Modifica√ß√µes detectadas. Use o bot√£o abaixo para salvar.")
            
            if st.button("üíæ Salvar Altera√ß√µes da Tabela", type="primary"):
                # Aplicar altera√ß√µes das observa√ß√µes
                for idx, row in df_editado.iterrows():
                    id_mensalidade = row["ID"]
                    nova_observacao = row["Observa√ß√µes"]
                    
                    # Buscar observa√ß√£o original
                    mensalidade_original = next(m for m in mensalidades if m["id_mensalidade"] == id_mensalidade)
                    observacao_original = mensalidade_original.get("observacoes", "")
                    
                    # Se mudou, atualizar
                    if nova_observacao != observacao_original:
                        try:
                            supabase.table("mensalidades").update({
                                "observacoes": nova_observacao
                            }).eq("id_mensalidade", id_mensalidade).execute()
                        except Exception as e:
                            st.error(f"Erro ao atualizar {id_mensalidade}: {str(e)}")
                
                st.success("‚úÖ Altera√ß√µes salvas!")
                st.session_state.dados_atualizados = True
                st.rerun()
        
        # Bot√µes de a√ß√£o para cada linha
        st.markdown("#### üéØ A√ß√µes Individuais")
        st.info("üí° **Dica:** Clique nos bot√µes abaixo para abrir o modal de detalhes de cada mensalidade")
        
        # Criar colunas para os bot√µes (m√°ximo 5 por linha)
        cols_per_row = 5
        num_rows = (len(mensalidades) + cols_per_row - 1) // cols_per_row
        
        for row in range(num_rows):
            cols = st.columns(cols_per_row)
            
            for col_idx in range(cols_per_row):
                mensalidade_idx = row * cols_per_row + col_idx
                
                if mensalidade_idx < len(mensalidades):
                    mensalidade = mensalidades[mensalidade_idx]
                    
                    with cols[col_idx]:
                        # Bot√£o para abrir modal
                        nome_aluno = mensalidade["alunos"]["nome"]
                        mes_ref = mensalidade["mes_referencia"]
                        
                        # Usar nome curto para o bot√£o
                        nome_curto = nome_aluno.split()[0] if nome_aluno else "Aluno"
                        label_botao = f"üëÅÔ∏è {nome_curto}\n{mes_ref}"
                        
                        if st.button(
                            label_botao,
                            key=f"modal_btn_{mensalidade['id_mensalidade']}",
                            help=f"Ver detalhes de {nome_aluno} - {mes_ref}",
                            use_container_width=True
                        ):
                            st.session_state.modal_aberto = True
                            st.session_state.id_mensalidade_modal = mensalidade["id_mensalidade"]
                            st.rerun()
        
    else:
        st.info("‚ÑπÔ∏è Nenhuma mensalidade encontrada com os filtros aplicados")
        st.info("üí° Ajuste os filtros acima para buscar mensalidades")
    
    # ==========================================================
    # MODAL DE DETALHES (SE ATIVO)
    # ==========================================================
    
    if st.session_state.get('modal_aberto', False) and st.session_state.get('id_mensalidade_modal'):
        st.markdown("---")
        st.markdown("## üîç Detalhes da Mensalidade")
        
        # Abrir o modal
        try:
            open_modal(st.session_state.id_mensalidade_modal)
            
        except Exception as e:
            st.error(f"‚ùå Erro ao abrir modal: {str(e)}")
            st.session_state.modal_aberto = False
            st.session_state.id_mensalidade_modal = None
    
    # ==========================================================
    # A√á√ïES GLOBAIS
    # ==========================================================
    
    st.markdown("---")
    st.subheader("üõ†Ô∏è A√ß√µes Globais")
    
    col_global1, col_global2, col_global3 = st.columns(3)
    
    with col_global1:
        if st.button("üîÑ Recarregar Dados", use_container_width=True):
            st.session_state.dados_atualizados = True
            st.rerun()
    
    with col_global2:
        if st.button("üìä Exportar Relat√≥rio", use_container_width=True):
            # TODO: Implementar exporta√ß√£o de relat√≥rio geral
            st.info("üîß Funcionalidade em desenvolvimento")
    
    with col_global3:
        if st.button("üìß Envio em Massa", use_container_width=True):
            # TODO: Implementar envio de emails em massa
            st.info("üîß Funcionalidade em desenvolvimento")

# ==========================================================
# üöÄ EXECUTAR A INTERFACE
# ==========================================================

if __name__ == "__main__":
    st.set_page_config(
        page_title="Gest√£o de Mensalidades",
        page_icon="üí∞",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # CSS personalizado
    st.markdown("""
    <style>
        .stButton > button {
            width: 100%;
        }
        .metric-card {
            background: linear-gradient(90deg, #1f77b4, #2ca02c);
            padding: 1rem;
            border-radius: 0.5rem;
            color: white;
            text-align: center;
        }
    </style>
    """, unsafe_allow_html=True)
    
    # Executar interface principal
    interface_gestao_mensalidades() 