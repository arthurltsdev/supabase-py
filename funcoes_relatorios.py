#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üìä M√ìDULO DE GERA√á√ÉO DE RELAT√ìRIOS
==================================

Funcionalidades para gerar relat√≥rios pedag√≥gicos e financeiros
usando OpenAI para formata√ß√£o inteligente e python-docx para .docx
"""

import os
import io
import base64
from datetime import datetime, date
from typing import Dict, List, Optional, Union
import pandas as pd

# Depend√™ncias necess√°rias
try:
    from docx import Document
    from docx.shared import Inches, Pt
    from docx.enum.text import WD_ALIGN_PARAGRAPH
    DOCX_AVAILABLE = True
except ImportError:
    DOCX_AVAILABLE = False

try:
    from openai import OpenAI
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False

# Importar fun√ß√µes do modelo pedag√≥gico
from models.pedagogico import (
    listar_turmas_disponiveis,
    obter_mapeamento_turmas,
    buscar_alunos_por_turmas,
    supabase
)

# ==========================================================
# üîß CONFIGURA√á√ïES E CONSTANTES
# ==========================================================

# Configura√ß√£o OpenAI
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai_client = None

if OPENAI_AVAILABLE and OPENAI_API_KEY:
    try:
        openai_client = OpenAI(api_key=OPENAI_API_KEY)
    except Exception as e:
        print(f"‚ùå Erro ao inicializar OpenAI: {e}")

# Campos dispon√≠veis para relat√≥rios
CAMPOS_ALUNO = {
    'nome': 'Nome do Aluno',
    'turno': 'Turno',
    'data_nascimento': 'Data de Nascimento',
    'dia_vencimento': 'Dia de Vencimento',
    'data_matricula': 'Data de Matr√≠cula',
    'valor_mensalidade': 'Valor da Mensalidade'
}

CAMPOS_RESPONSAVEL = {
    'nome': 'Nome do Respons√°vel',
    'cpf': 'CPF',
    'telefone': 'Telefone/Contato',
    'email': 'Email',
    'endereco': 'Endere√ßo',
    'tipo_relacao': 'Tipo de Rela√ß√£o',
    'responsavel_financeiro': 'Respons√°vel Financeiro'
}

CAMPOS_MENSALIDADE = {
    'mes_referencia': 'M√™s de Refer√™ncia',
    'data_vencimento': 'Data de Vencimento',
    'valor': 'Valor',
    'status': 'Status',
    'data_pagamento': 'Data de Pagamento',
    'observacoes': 'Observa√ß√µes'
}

CAMPOS_PAGAMENTO = {
    'data_pagamento': 'Data do Pagamento',
    'valor': 'Valor',
    'tipo_pagamento': 'Tipo de Pagamento',
    'forma_pagamento': 'Forma de Pagamento',
    'observacoes': 'Observa√ß√µes'
}

CAMPOS_EXTRATO_PIX = {
    'data_pagamento': 'Data do Pagamento',
    'valor': 'Valor',
    'nome_remetente': 'Nome do Remetente',
    'descricao': 'Descri√ß√£o',
    'status': 'Status'
}

# ==========================================================
# ü§ñ FUN√á√ïES DE INTELIG√äNCIA ARTIFICIAL
# ==========================================================

def formatar_relatorio_com_ia(dados_brutos: Dict, tipo_relatorio: str, campos_selecionados: List[str]) -> str:
    """
    Usa OpenAI para formatar o relat√≥rio de forma inteligente e profissional
    """
    if not openai_client:
        return formatar_relatorio_basico(dados_brutos, tipo_relatorio, campos_selecionados)
    
    try:
        if tipo_relatorio == 'pedagogico':
            exemplo_formato = """
Lista de Alunos

Ber√ß√°rio
1.	Alice Nascimento Rafael
Turno: Integral
Data de Matr√≠cula: 24/01/2025
Dia de Vencimento: 5
Valor Mensalidade: R$ 990,00
Respons√°vel Financeiro:
Nome: Mayra Ferreira Nascimento
CPF: 075.046.734-71
Tipo de rela√ß√£o: M√£e
Contato: (83) 99631-0062
Email: ferreiramayra73@gmail.com
Respons√°vel 2
Nome: Itiel Rafael Figueredo Santos
CPF: AUSENTE
Tipo de rela√ß√£o: Pai
Contato: (83) 99654-6308
Email: AUSENTE
**OBSERVA√á√ÉO:**

2.	Ian Duarte Rolim
Turno: Tarde
Data de Matr√≠cula: 26/12/2024
Dia de Vencimento: 5
Valor Mensalidade: R$ 705,00
Respons√°vel Financeiro:
Nome: Pedro Henrique Rolim de Oliveira
CPF: 084.085.394-77
Tipo de rela√ß√£o: Pai
Contato: AUSENTE
Email: AUSENTE
Respons√°vel 2
Nome: Kamila Duarte de Sousa
CPF: AUSENTE
Tipo de rela√ß√£o: M√£e
Contato: AUSENTE
Email: AUSENTE
**OBSERVA√á√ÉO:**
"""
            
            prompt = f"""
Voc√™ √© um assistente especializado em relat√≥rios pedag√≥gicos para escolas brasileiras.

INSTRU√á√ïES ESPEC√çFICAS:
1. Use EXATAMENTE o formato do exemplo abaixo
2. Organize por turma, depois por aluno numerado
3. Para valores que s√£o realmente NULL, None, vazios ou "N√£o informado", use "AUSENTE"
4. N√ÉO use "AUSENTE" se o valor existe no banco de dados - apenas para campos realmente vazios
5. Formate datas como DD/MM/YYYY
6. Formate valores monet√°rios como R$ X.XXX,XX
7. Liste respons√°veis como "Respons√°vel Financeiro" primeiro, depois "Respons√°vel 2, 3..." 
8. SEMPRE inclua "**OBSERVA√á√ÉO:**" em negrito ap√≥s o √∫ltimo respons√°vel de cada aluno
9. Mantenha formata√ß√£o limpa e profissional
10. Use apenas os campos selecionados: {', '.join(campos_selecionados)}

EXEMPLO DE FORMATO:
{exemplo_formato}

DADOS PARA FORMATA√á√ÉO:
{dados_brutos}

Gere o relat√≥rio seguindo EXATAMENTE o padr√£o do exemplo, incluindo a se√ß√£o OBSERVA√á√ÉO para cada aluno.
"""
        else:  # financeiro
            # Determinar se √© um relat√≥rio focado em mensalidades
            tem_campos_mensalidade = any(campo in CAMPOS_MENSALIDADE for campo in campos_selecionados)
            
            if tem_campos_mensalidade:
                # Verificar se tamb√©m h√° campos de respons√°veis selecionados
                tem_campos_responsavel = any(campo in CAMPOS_RESPONSAVEL for campo in campos_selecionados)
                
                if tem_campos_responsavel:
                    # Relat√≥rio de mensalidades COM dados dos respons√°veis
                    exemplo_mensalidades = """
# Relat√≥rio de Mensalidades em Atraso

**Data de Gera√ß√£o:** 07/07/2025

## Mensalidades por Aluno

### 1. Alice Nascimento Rafael - Ber√ß√°rio
**Respons√°veis:**
üí∞ **Respons√°vel Financeiro:** Mayra Ferreira Nascimento
   **Telefone:** (83) 99631-0062
   **Email:** ferreiramayra73@gmail.com
üë§ **Respons√°vel 2:** Itiel Rafael Figueredo Santos  
   **Telefone:** (83) 99654-6308
   **Email:** AUSENTE
**MENSALIDADES EM ABERTO**
1. **M√™s de Refer√™ncia:** Abril/2025
   **Data de Vencimento:** 30/04/2025
   **Valor:** R$ 990,00
2. **M√™s de Refer√™ncia:** Maio/2025
   **Data de Vencimento:** 30/05/2025
   **Valor:** R$ 990,00

---

### 2. Ian Duarte Rolim - Infantil I
**Respons√°veis:**
üí∞ **Respons√°vel Financeiro:** Pedro Henrique Rolim de Oliveira
   **Telefone:** AUSENTE
   **Email:** AUSENTE
üë§ **Respons√°vel 2:** Kamila Duarte de Sousa
   **Telefone:** AUSENTE
   **Email:** AUSENTE
**MENSALIDADES EM ABERTO**
1. **M√™s de Refer√™ncia:** Mar√ßo/2025
   **Data de Vencimento:** 05/03/2025
   **Valor:** R$ 705,00

---
"""
                    
                    prompt = f"""
Voc√™ √© um assistente especializado em relat√≥rios de mensalidades com dados dos respons√°veis para escolas brasileiras.

DADOS PARA PROCESSAMENTO:
- Total de alunos: {len(dados_brutos.get('alunos', []))} (j√° filtrados para ter mensalidades)
- Total de mensalidades: {len(dados_brutos.get('mensalidades', []))} (apenas status: {dados_brutos.get('filtros_aplicados', {}).get('status_mensalidades', [])})
- Ordem das turmas: {dados_brutos.get('filtros_aplicados', {}).get('turmas_selecionadas', [])}

INSTRU√á√ïES CR√çTICAS DE ORGANIZA√á√ÉO:
1. RESPEITE A ORDEM DOS ALUNOS: Os alunos j√° est√£o organizados na sequ√™ncia correta:
   - Primeiro por ordem das turmas selecionadas
   - Dentro de cada turma, por ordem alfab√©tica
2. CADA ALUNO APARECE APENAS UMA VEZ - elimine qualquer duplica√ß√£o
3. Para cada aluno, estruture assim:
   - Cabe√ßalho: "### N. [Nome do Aluno] - [Turma]" 
   - **TODOS OS RESPONS√ÅVEIS** com suas informa√ß√µes completas:
     * Use üí∞ para respons√°veis financeiros
     * Use üë§ para outros respons√°veis
     * Inclua TODOS os campos selecionados de respons√°vel para CADA respons√°vel
   - Se√ß√£o "MENSALIDADES EM ABERTO" com todas as mensalidades deste aluno
4. Ordene mensalidades de cada aluno por data de vencimento (mais antiga primeiro)
5. Use "AUSENTE" apenas para valores realmente NULL/None/vazios
6. Formate: datas DD/MM/YYYY, valores R$ X.XXX,XX
7. Use ** para textos em negrito
8. Separe alunos com "---"

IMPORTANTE - TODOS OS RESPONS√ÅVEIS:
- N√£o inclua apenas um respons√°vel - inclua TODOS os respons√°veis do aluno
- Para cada respons√°vel, inclua TODOS os campos selecionados
- Respons√°veis financeiros primeiro (üí∞), depois outros (üë§)
- Use apenas os dados fornecidos

CAMPOS SELECIONADOS: {', '.join(campos_selecionados)}

EXEMPLO DE FORMATO:
{exemplo_mensalidades}

ALUNOS ORGANIZADOS (com TODOS os respons√°veis):
{[{
    'nome': aluno.get('nome'),
    'turma': aluno.get('turma_nome'),
    'id': aluno.get('id'),
    'responsaveis': aluno.get('responsaveis', [])
} for aluno in dados_brutos.get('alunos', [])]}

MENSALIDADES (agrupar por id_aluno):
{dados_brutos.get('mensalidades', [])}

CR√çTICO: 
- Use a ordem EXATA dos alunos fornecida
- Inclua TODOS os respons√°veis de cada aluno
- Agrupe todas as mensalidades por aluno
- N√£o duplique informa√ß√µes
"""
                else:
                    # Relat√≥rio espec√≠fico APENAS de mensalidades (sem respons√°veis)
                    exemplo_mensalidades = """
# Relat√≥rio de Mensalidades em Atraso

**Data de Gera√ß√£o:** 07/07/2025

## Mensalidades por Aluno

### 1. Alice Nascimento Rafael - Ber√ß√°rio
**M√™s de Refer√™ncia:** 04/2025
**Valor:** R$ 990,00  
**Data de Vencimento:** 30/04/2025
**Status:** Atrasado

---

### 2. Ian Duarte Rolim - Infantil I
**M√™s de Refer√™ncia:** 03/2025
**Valor:** R$ 705,00
**Data de Vencimento:** 05/03/2025  
**Status:** Atrasado

---
"""
                    
                    prompt = f"""
Voc√™ √© um assistente especializado em relat√≥rios de mensalidades para escolas brasileiras.

INSTRU√á√ïES ESPEC√çFICAS:
1. Este √© um relat√≥rio focado EXCLUSIVAMENTE em MENSALIDADES
2. N√ÉO inclua dados dos alunos ou respons√°veis - APENAS dados das mensalidades
3. Organize por aluno, mostrando as mensalidades de cada um
4. Para cada mensalidade, mostre APENAS os campos selecionados: {', '.join(campos_selecionados)}
5. Para valores NULL, None ou vazios, use "AUSENTE"
6. Formate datas como DD/MM/YYYY
7. Formate valores monet√°rios como R$ X.XXX,XX
8. Use o formato do exemplo abaixo
9. Se n√£o houver mensalidades para um aluno, N√ÉO inclua o aluno no relat√≥rio
10. Inclua o nome da turma ap√≥s o nome do aluno

EXEMPLO DE FORMATO:
{exemplo_mensalidades}

CAMPOS SELECIONADOS (use APENAS estes): {', '.join(campos_selecionados)}

DADOS PARA FORMATA√á√ÉO:
Alunos: {dados_brutos.get('alunos', [])}
Mensalidades: {dados_brutos.get('mensalidades', [])}
Filtros aplicados: {dados_brutos.get('filtros_aplicados', {})}

IMPORTANTE: Foque APENAS nas mensalidades filtradas. Ignore dados irrelevantes dos alunos como telefone, endere√ßo, etc.
"""
            else:
                # Relat√≥rio financeiro geral
                prompt = f"""
Voc√™ √© um assistente especializado em relat√≥rios financeiros para escolas brasileiras.

INSTRU√á√ïES ESPEC√çFICAS:
1. Organize os dados de forma clara e estruturada
2. Para valores NULL, None ou vazios, use "AUSENTE"  
3. Formate datas como DD/MM/YYYY
4. Formate valores monet√°rios como R$ X.XXX,XX
5. Agrupe informa√ß√µes relacionadas logicamente
6. Inclua subtotais quando relevante
7. Use apenas os campos selecionados: {', '.join(campos_selecionados)}

DADOS PARA FORMATA√á√ÉO:
{dados_brutos}

Gere um relat√≥rio financeiro detalhado e bem estruturado.
"""
        
        response = openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "Voc√™ √© um assistente especializado em gera√ß√£o de relat√≥rios educacionais profissionais em portugu√™s brasileiro."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=20000,
            temperature=0.1
        )
        
        return response.choices[0].message.content.strip()
    
    except Exception as e:
        print(f"‚ùå Erro na formata√ß√£o com IA: {e}")
        return formatar_relatorio_basico(dados_brutos, tipo_relatorio, campos_selecionados)

def formatar_relatorio_basico(dados_brutos: Dict, tipo_relatorio: str, campos_selecionados: List[str]) -> str:
    """
    Formata√ß√£o b√°sica sem IA como fallback
    """
    texto = f"RELAT√ìRIO {tipo_relatorio.upper()}\n"
    texto += f"Data de Gera√ß√£o: {datetime.now().strftime('%d/%m/%Y %H:%M')}\n\n"
    
    if tipo_relatorio == 'pedagogico':
        texto += "Lista de Alunos\n\n"
        
        for turma_nome, dados_turma in dados_brutos.get('dados_por_turma', {}).items():
            texto += f"{turma_nome}\n"
            
            for i, aluno in enumerate(dados_turma.get('alunos', []), 1):
                texto += f"{i}.\t{aluno.get('nome', 'AUSENTE')}\n"
                
                # Adicionar campos selecionados do aluno
                for campo in campos_selecionados:
                    if campo in CAMPOS_ALUNO and campo != 'nome':
                        valor = aluno.get(campo)
                        # Verificar se √© realmente NULL/None/vazio
                        if valor is None or valor == "" or valor == "N√£o informado":
                            valor = 'AUSENTE'
                        elif campo == 'valor_mensalidade' and valor != 'AUSENTE':
                            valor = f"R$ {float(valor):,.2f}"
                        elif 'data' in campo and valor != 'AUSENTE':
                            try:
                                data_obj = datetime.strptime(str(valor), '%Y-%m-%d')
                                valor = data_obj.strftime('%d/%m/%Y')
                            except:
                                pass
                        
                        texto += f"{CAMPOS_ALUNO[campo]}: {valor}\n"
                
                # Adicionar respons√°veis se selecionados
                responsaveis = aluno.get('responsaveis', [])
                resp_financeiro = next((r for r in responsaveis if r.get('responsavel_financeiro')), None)
                outros_resp = [r for r in responsaveis if not r.get('responsavel_financeiro')]
                
                # Respons√°vel financeiro primeiro
                if resp_financeiro:
                    texto += "Respons√°vel Financeiro:\n"
                    for campo in campos_selecionados:
                        if campo in CAMPOS_RESPONSAVEL:
                            valor = resp_financeiro.get(campo)
                            # Verificar se √© realmente NULL/None/vazio
                            if valor is None or valor == "" or valor == "N√£o informado":
                                valor = 'AUSENTE'
                            texto += f"{CAMPOS_RESPONSAVEL[campo]}: {valor}\n"
                
                # Outros respons√°veis
                for j, resp in enumerate(outros_resp, 2):
                    texto += f"Respons√°vel {j}:\n"
                    for campo in campos_selecionados:
                        if campo in CAMPOS_RESPONSAVEL:
                            valor = resp.get(campo)
                            # Verificar se √© realmente NULL/None/vazio
                            if valor is None or valor == "" or valor == "N√£o informado":
                                valor = 'AUSENTE'
                            texto += f"{CAMPOS_RESPONSAVEL[campo]}: {valor}\n"
                
                # Adicionar campo OBSERVA√á√ÉO em negrito
                texto += "**OBSERVA√á√ÉO:**\n\n"
                texto += "\n"
            
            texto += "\n"
    
    elif tipo_relatorio == 'financeiro':
        texto += "Relat√≥rio Financeiro Detalhado\n\n"
        
        # Agrupar alunos por turma
        alunos_por_turma = {}
        for aluno in dados_brutos.get('alunos', []):
            turma_nome = aluno.get('turma_nome', 'Sem turma')
            if turma_nome not in alunos_por_turma:
                alunos_por_turma[turma_nome] = []
            alunos_por_turma[turma_nome].append(aluno)
        
        # Mapear mensalidades e pagamentos por aluno
        mensalidades_por_aluno = {}
        for mensalidade in dados_brutos.get('mensalidades', []):
            id_aluno = mensalidade.get('id_aluno')
            if id_aluno not in mensalidades_por_aluno:
                mensalidades_por_aluno[id_aluno] = []
            mensalidades_por_aluno[id_aluno].append(mensalidade)
        
        pagamentos_por_aluno = {}
        for pagamento in dados_brutos.get('pagamentos', []):
            id_aluno = pagamento.get('id_aluno')
            if id_aluno not in pagamentos_por_aluno:
                pagamentos_por_aluno[id_aluno] = []
            pagamentos_por_aluno[id_aluno].append(pagamento)
        
        # Gerar relat√≥rio por turma
        for turma_nome, alunos in alunos_por_turma.items():
            texto += f"TURMA: {turma_nome}\n"
            texto += "=" * 50 + "\n\n"
            
            for i, aluno in enumerate(alunos, 1):
                texto += f"{i}. {aluno.get('nome', 'NOME AUSENTE')}\n"
                
                # Dados do aluno
                for campo in campos_selecionados:
                    if campo in CAMPOS_ALUNO and campo != 'nome':
                        valor = aluno.get(campo)
                        if valor is None or valor == "" or valor == "N√£o informado":
                            valor = 'AUSENTE'
                        elif campo == 'valor_mensalidade' and valor != 'AUSENTE':
                            valor = f"R$ {float(valor):,.2f}"
                        elif 'data' in campo and valor != 'AUSENTE':
                            try:
                                data_obj = datetime.strptime(str(valor), '%Y-%m-%d')
                                valor = data_obj.strftime('%d/%m/%Y')
                            except:
                                pass
                        texto += f"   {CAMPOS_ALUNO[campo]}: {valor}\n"
                
                # Dados dos respons√°veis
                responsaveis = aluno.get('responsaveis', [])
                if responsaveis:
                    texto += "   RESPONS√ÅVEIS:\n"
                    
                    # Separar respons√°veis financeiros dos outros
                    resp_financeiros = [r for r in responsaveis if r.get('responsavel_financeiro')]
                    outros_resp = [r for r in responsaveis if not r.get('responsavel_financeiro')]
                    
                    # Primeiro os respons√°veis financeiros
                    for j, resp in enumerate(resp_financeiros, 1):
                        emoji = "üí∞"
                        texto += f"   {emoji} Respons√°vel Financeiro {j}: {resp.get('nome', 'NOME AUSENTE')}\n"
                        
                        for campo in campos_selecionados:
                            if campo in CAMPOS_RESPONSAVEL and campo not in ['nome']:
                                valor = resp.get(campo)
                                if valor is None or valor == "" or valor == "N√£o informado":
                                    valor = 'AUSENTE'
                                elif campo == 'responsavel_financeiro':
                                    valor = 'SIM' if valor else 'N√ÉO'
                                texto += f"      {CAMPOS_RESPONSAVEL[campo]}: {valor}\n"
                    
                    # Depois os outros respons√°veis
                    for j, resp in enumerate(outros_resp, len(resp_financeiros) + 1):
                        emoji = "üë§"
                        texto += f"   {emoji} Respons√°vel {j}: {resp.get('nome', 'NOME AUSENTE')}\n"
                        
                        for campo in campos_selecionados:
                            if campo in CAMPOS_RESPONSAVEL and campo not in ['nome']:
                                valor = resp.get(campo)
                                if valor is None or valor == "" or valor == "N√£o informado":
                                    valor = 'AUSENTE'
                                elif campo == 'responsavel_financeiro':
                                    valor = 'SIM' if valor else 'N√ÉO'
                                texto += f"      {CAMPOS_RESPONSAVEL[campo]}: {valor}\n"
                
                # Mensalidades do aluno
                id_aluno = aluno.get('id')
                campos_mensalidade_na_selecao = [campo for campo in campos_selecionados if campo in CAMPOS_MENSALIDADE]
                if campos_mensalidade_na_selecao:
                    mensalidades_aluno = mensalidades_por_aluno.get(id_aluno, [])
                    if mensalidades_aluno:
                        texto += "   MENSALIDADES:\n"
                        for mensalidade in sorted(mensalidades_aluno, key=lambda x: x.get('data_vencimento', '')):
                            for campo in campos_selecionados:
                                if campo in CAMPOS_MENSALIDADE:
                                    valor = mensalidade.get(campo)
                                    if valor is None or valor == "" or valor == "N√£o informado":
                                        valor = 'AUSENTE'
                                    elif campo == 'valor' and valor != 'AUSENTE':
                                        valor = f"R$ {float(valor):,.2f}"
                                    elif 'data' in campo and valor != 'AUSENTE':
                                        try:
                                            data_obj = datetime.strptime(str(valor), '%Y-%m-%d')
                                            valor = data_obj.strftime('%d/%m/%Y')
                                        except:
                                            pass
                                    texto += f"      {CAMPOS_MENSALIDADE[campo]}: {valor}\n"
                            texto += "      -----\n"
                    else:
                        texto += "   MENSALIDADES: Nenhuma mensalidade encontrada\n"
                
                # Pagamentos do aluno
                campos_pagamento_na_selecao = [campo for campo in campos_selecionados if campo in CAMPOS_PAGAMENTO]
                if campos_pagamento_na_selecao:
                    pagamentos_aluno = pagamentos_por_aluno.get(id_aluno, [])
                    if pagamentos_aluno:
                        texto += "   PAGAMENTOS:\n"
                        for pagamento in sorted(pagamentos_aluno, key=lambda x: x.get('data_pagamento', ''), reverse=True):
                            for campo in campos_selecionados:
                                if campo in CAMPOS_PAGAMENTO:
                                    valor = pagamento.get(campo)
                                    if valor is None or valor == "" or valor == "N√£o informado":
                                        valor = 'AUSENTE'
                                    elif campo == 'valor' and valor != 'AUSENTE':
                                        valor = f"R$ {float(valor):,.2f}"
                                    elif 'data' in campo and valor != 'AUSENTE':
                                        try:
                                            data_obj = datetime.strptime(str(valor), '%Y-%m-%d')
                                            valor = data_obj.strftime('%d/%m/%Y')
                                        except:
                                            pass
                                    texto += f"      {CAMPOS_PAGAMENTO[campo]}: {valor}\n"
                            texto += "      -----\n"
                    else:
                        texto += "   PAGAMENTOS: Nenhum pagamento encontrado\n"
                
                texto += "\n"
            
            texto += "\n"
        
        # Estat√≠sticas gerais
        texto += "ESTAT√çSTICAS GERAIS\n"
        texto += "=" * 30 + "\n"
        total_alunos = len(dados_brutos.get('alunos', []))
        total_mensalidades = len(dados_brutos.get('mensalidades', []))
        total_pagamentos = len(dados_brutos.get('pagamentos', []))
        
        texto += f"Total de Alunos: {total_alunos}\n"
        texto += f"Total de Mensalidades: {total_mensalidades}\n"
        texto += f"Total de Pagamentos: {total_pagamentos}\n"
        
        if dados_brutos.get('filtros_aplicados'):
            texto += "\nFILTROS APLICADOS:\n"
            filtros = dados_brutos['filtros_aplicados']
            for filtro, valor in filtros.items():
                texto += f"  {filtro}: {valor}\n"
    
    return texto

# ==========================================================
# üìä FUN√á√ïES DE COLETA DE DADOS
# ==========================================================

def coletar_dados_pedagogicos(turmas_selecionadas: List[str], campos_selecionados: List[str]) -> Dict:
    """
    Coleta dados pedag√≥gicos conforme os filtros selecionados
    """
    try:
        # Obter IDs das turmas
        mapeamento_resultado = obter_mapeamento_turmas()
        if not mapeamento_resultado.get("success"):
            return {"success": False, "error": "Erro ao obter mapeamento de turmas"}
        
        ids_turmas = []
        for nome_turma in turmas_selecionadas:
            if nome_turma in mapeamento_resultado["mapeamento"]:
                ids_turmas.append(mapeamento_resultado["mapeamento"][nome_turma])
        
        if not ids_turmas:
            return {"success": False, "error": "Nenhuma turma v√°lida selecionada"}
        
        # Buscar alunos das turmas selecionadas
        resultado_alunos = buscar_alunos_por_turmas(ids_turmas)
        if not resultado_alunos.get("success"):
            return {"success": False, "error": f"Erro ao buscar alunos: {resultado_alunos.get('error')}"}
        
        dados_organizados = {
            "success": True,
            "dados_por_turma": {},
            "total_alunos": resultado_alunos.get("total_alunos", 0),
            "turmas_incluidas": turmas_selecionadas,
            "campos_selecionados": campos_selecionados,
            "data_geracao": datetime.now().isoformat()
        }
        
        # Organizar dados por turma
        for turma_nome, dados_turma in resultado_alunos.get("alunos_por_turma", {}).items():
            dados_organizados["dados_por_turma"][turma_nome] = {
                "alunos": dados_turma.get("alunos", []),
                "total_alunos": len(dados_turma.get("alunos", []))
            }
        
        return dados_organizados
    
    except Exception as e:
        return {"success": False, "error": f"Erro na coleta de dados pedag√≥gicos: {e}"}

def coletar_dados_financeiros(turmas_selecionadas: List[str], campos_selecionados: List[str], 
                             filtros: Dict) -> Dict:
    """
    Coleta dados financeiros conforme os filtros selecionados
    """
    try:
        # PRIMEIRO: Atualizar status das mensalidades automaticamente
        try:
            from funcoes_extrato_otimizadas import atualizar_status_mensalidades_automatico
            resultado_atualizacao = atualizar_status_mensalidades_automatico()
            
            # Log da atualiza√ß√£o (opcional, pode ser removido se causar ru√≠do)
            if resultado_atualizacao.get("atualizadas", 0) > 0:
                print(f"‚úÖ {resultado_atualizacao['atualizadas']} mensalidades atualizadas para 'Atrasado'")
        except Exception as e:
            print(f"‚ö†Ô∏è Aviso: Erro ao atualizar status automaticamente: {e}")
            # Continua mesmo se a atualiza√ß√£o falhar
        
        # ETAPA 1: Buscar alunos das turmas selecionadas COM ORDEM RESPEITADA
        dados_financeiros = {
            "success": True,
            "alunos": [],
            "mensalidades": [],
            "pagamentos": [],
            "extrato_pix": [],
            "filtros_aplicados": filtros,
            "campos_selecionados": campos_selecionados,
            "data_geracao": datetime.now().isoformat()
        }
        
        # ETAPA 2: Para cada turma selecionada, buscar alunos em ordem alfab√©tica
        for turma_nome in turmas_selecionadas:
            alunos_response = supabase.table("alunos").select("""
                *, turmas!inner(nome_turma)
            """).eq("turmas.nome_turma", turma_nome).execute()
            
            if alunos_response.data:
                # Ordenar alunos por nome (ordem alfab√©tica)
                alunos_ordenados = sorted(alunos_response.data, key=lambda x: x.get('nome', ''))
                
                for aluno_data in alunos_ordenados:
                    aluno_data["turma_nome"] = aluno_data["turmas"]["nome_turma"]
                    
                    # Buscar respons√°veis
                    responsaveis_response = supabase.table("alunos_responsaveis").select("""
                        *, responsaveis!inner(*)
                    """).eq("id_aluno", aluno_data["id"]).execute()
                    
                    responsaveis = []
                    for vinculo in responsaveis_response.data:
                        resp_data = vinculo["responsaveis"]
                        resp_data.update({
                            "tipo_relacao": vinculo["tipo_relacao"],
                            "responsavel_financeiro": vinculo["responsavel_financeiro"]
                        })
                        responsaveis.append(resp_data)
                    
                    aluno_data["responsaveis"] = responsaveis
                    dados_financeiros["alunos"].append(aluno_data)
        
        # ETAPA 3: Buscar dados adicionais conforme campos selecionados
        periodo_inicio = filtros.get('periodo_inicio')
        periodo_fim = filtros.get('periodo_fim')
        
        # Coletar IDs de todos os alunos
        ids_alunos = [aluno["id"] for aluno in dados_financeiros["alunos"]]
        
        # Mensalidades - verificar se algum campo de mensalidade foi selecionado
        campos_mensalidade_selecionados = [campo for campo in campos_selecionados if campo in CAMPOS_MENSALIDADE]
        if campos_mensalidade_selecionados and ids_alunos:
            status_mensalidades = filtros.get('status_mensalidades', [])
            
            # CR√çTICO: Filtrar APENAS mensalidades com status especificado
            query = supabase.table("mensalidades").select("*").in_("id_aluno", ids_alunos)
            
            # APLICAR FILTROS OBRIGAT√ìRIOS
            if status_mensalidades:
                # Converter lista para garantir que apenas os status selecionados sejam inclu√≠dos
                query = query.in_("status", status_mensalidades)
            
            # Para relat√≥rios de "Atrasado", adicionar filtro de data de vencimento <= hoje
            if 'Atrasado' in status_mensalidades:
                data_hoje = datetime.now().date().isoformat()
                query = query.lte("data_vencimento", data_hoje)
            
            if periodo_inicio:
                query = query.gte("data_vencimento", periodo_inicio)
            if periodo_fim:
                query = query.lte("data_vencimento", periodo_fim)
            
            mensalidades_response = query.execute()
            
            # ETAPA 4: Filtrar apenas alunos que tenham mensalidades com o status especificado
            mensalidades_encontradas = mensalidades_response.data
            ids_alunos_com_mensalidades = set(m.get('id_aluno') for m in mensalidades_encontradas)
            
            # Remover alunos que n√£o t√™m mensalidades com o status especificado
            dados_financeiros["alunos"] = [
                aluno for aluno in dados_financeiros["alunos"] 
                if aluno["id"] in ids_alunos_com_mensalidades
            ]
            
            # Atualizar lista de IDs
            ids_alunos = [aluno["id"] for aluno in dados_financeiros["alunos"]]
            
            # Filtrar mensalidades apenas dos alunos que restaram
            dados_financeiros["mensalidades"] = [
                m for m in mensalidades_encontradas if m.get('id_aluno') in ids_alunos
            ]
        
        # Pagamentos - verificar se algum campo de pagamento foi selecionado
        campos_pagamento_selecionados = [campo for campo in campos_selecionados if campo in CAMPOS_PAGAMENTO]
        if campos_pagamento_selecionados and ids_alunos:
            query = supabase.table("pagamentos").select("*").in_("id_aluno", ids_alunos)
            
            if periodo_inicio:
                query = query.gte("data_pagamento", periodo_inicio)
            if periodo_fim:
                query = query.lte("data_pagamento", periodo_fim)
            
            pagamentos_response = query.execute()
            dados_financeiros["pagamentos"] = pagamentos_response.data
        
        # Extrato PIX - verificar se algum campo de extrato PIX foi selecionado
        campos_extrato_selecionados = [campo for campo in campos_selecionados if campo in CAMPOS_EXTRATO_PIX]
        if campos_extrato_selecionados and ids_alunos:
            incluir_processados = filtros.get('extrato_pix_processados', False)
            incluir_nao_processados = filtros.get('extrato_pix_nao_processados', False)
            
            # Obter IDs dos respons√°veis
            ids_responsaveis = []
            for aluno_data in dados_financeiros["alunos"]:
                for resp in aluno_data.get("responsaveis", []):
                    if resp["id"] not in ids_responsaveis:
                        ids_responsaveis.append(resp["id"])
            
            if ids_responsaveis:
                query = supabase.table("extrato_pix").select("*").in_("id_responsavel", ids_responsaveis)
                
                if periodo_inicio:
                    query = query.gte("data_pagamento", periodo_inicio)
                if periodo_fim:
                    query = query.lte("data_pagamento", periodo_fim)
                
                status_filtros = []
                if incluir_processados:
                    status_filtros.append("registrado")
                if incluir_nao_processados:
                    status_filtros.append("novo")
                
                if status_filtros:
                    query = query.in_("status", status_filtros)
                
                extrato_response = query.execute()
                dados_financeiros["extrato_pix"] = extrato_response.data
        
        return dados_financeiros
    
    except Exception as e:
        return {"success": False, "error": f"Erro na coleta de dados financeiros: {e}"}

# ==========================================================
# üìÑ FUN√á√ïES DE GERA√á√ÉO DE DOCUMENTOS
# ==========================================================

def criar_documento_docx(titulo: str, conteudo: str) -> Optional[Document]:
    """
    Cria um documento .docx formatado profissionalmente
    """
    if not DOCX_AVAILABLE:
        return None
    
    try:
        doc = Document()
        
        # Configurar margens (A4, orienta√ß√£o vertical)
        sections = doc.sections
        for section in sections:
            section.top_margin = Inches(1)
            section.bottom_margin = Inches(1)
            section.left_margin = Inches(1)
            section.right_margin = Inches(1)
        
        # T√≠tulo principal
        titulo_para = doc.add_heading(titulo, level=1)
        titulo_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # Data de gera√ß√£o
        data_para = doc.add_paragraph(f"Data de Gera√ß√£o: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
        data_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # Separador
        doc.add_paragraph("_" * 60).alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # Adicionar conte√∫do processando formata√ß√£o em negrito
        linhas = conteudo.split('\n')
        for linha in linhas:
            if linha.strip():
                if linha.strip().endswith(':') and len(linha) < 50 and not '**' in linha:
                    # T√≠tulos de se√ß√£o (sem ** no texto)
                    para = doc.add_paragraph()
                    run = para.add_run(linha)
                    run.bold = True
                elif linha.strip().startswith(('1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.')) and not '**' in linha:
                    # Numera√ß√£o de alunos (sem ** no texto)
                    para = doc.add_paragraph()
                    run = para.add_run(linha)
                    run.bold = True
                    run.font.size = Pt(12)
                else:
                    # Processar linha com poss√≠vel formata√ß√£o em negrito
                    para = doc.add_paragraph()
                    processar_linha_com_negrito(para, linha)
            else:
                doc.add_paragraph()
        
        return doc
    
    except Exception as e:
        print(f"‚ùå Erro ao criar documento: {e}")
        return None

def processar_linha_com_negrito(paragrafo, texto: str):
    """
    Processa uma linha de texto, aplicando formata√ß√£o em negrito para texto entre **
    """
    import re
    
    # Padr√£o para encontrar texto entre **
    padrao = r'\*\*(.*?)\*\*'
    
    # Dividir o texto em partes normais e em negrito
    partes = re.split(padrao, texto)
    
    for i, parte in enumerate(partes):
        if parte:  # Ignorar strings vazias
            run = paragrafo.add_run(parte)
            
            # Se √© uma parte √≠mpar, estava entre ** ent√£o deve ficar em negrito
            if i % 2 == 1:
                run.bold = True

def salvar_documento_temporario(doc: Document, nome_arquivo: str) -> Optional[str]:
    """
    Salva documento temporariamente e retorna o caminho
    """
    try:
        pasta_temp = "temp_reports"
        if not os.path.exists(pasta_temp):
            os.makedirs(pasta_temp)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        nome_completo = f"{nome_arquivo}_{timestamp}.docx"
        caminho_arquivo = os.path.join(pasta_temp, nome_completo)
        
        doc.save(caminho_arquivo)
        return caminho_arquivo
    
    except Exception as e:
        print(f"‚ùå Erro ao salvar documento: {e}")
        return None

# ==========================================================
# üéØ FUN√á√ïES PRINCIPAIS DE GERA√á√ÉO
# ==========================================================

def gerar_relatorio_pedagogico(turmas_selecionadas: List[str], campos_selecionados: List[str]) -> Dict:
    """
    Gera relat√≥rio pedag√≥gico completo
    """
    try:
        if not DOCX_AVAILABLE:
            return {
                "success": False, 
                "error": "python-docx n√£o dispon√≠vel. Execute: pip install python-docx"
            }
        
        # Coletar dados
        dados = coletar_dados_pedagogicos(turmas_selecionadas, campos_selecionados)
        if not dados.get("success"):
            return dados
        
        # Formatar com IA
        conteudo_formatado = formatar_relatorio_com_ia(dados, "pedagogico", campos_selecionados)
        
        # Criar documento
        titulo = f"Relat√≥rio Pedag√≥gico - {', '.join(turmas_selecionadas)}"
        doc = criar_documento_docx(titulo, conteudo_formatado)
        
        if not doc:
            return {"success": False, "error": "Erro ao criar documento Word"}
        
        # Salvar temporariamente
        nome_arquivo = f"relatorio_pedagogico_{'_'.join(turmas_selecionadas)}"
        nome_arquivo = nome_arquivo.replace(' ', '_').replace('/', '_')
        
        caminho_arquivo = salvar_documento_temporario(doc, nome_arquivo)
        
        if not caminho_arquivo:
            return {"success": False, "error": "Erro ao salvar documento"}
        
        return {
            "success": True,
            "arquivo": caminho_arquivo,
            "nome_arquivo": os.path.basename(caminho_arquivo),
            "titulo": titulo,
            "total_alunos": dados["total_alunos"],
            "turmas_incluidas": dados["turmas_incluidas"],
            "campos_selecionados": dados["campos_selecionados"],
            "data_geracao": dados["data_geracao"]
        }
    
    except Exception as e:
        return {"success": False, "error": f"Erro na gera√ß√£o do relat√≥rio pedag√≥gico: {e}"}

def gerar_relatorio_financeiro(turmas_selecionadas: List[str], campos_selecionados: List[str], 
                              filtros: Dict) -> Dict:
    """
    Gera relat√≥rio financeiro completo
    """
    try:
        if not DOCX_AVAILABLE:
            return {
                "success": False, 
                "error": "python-docx n√£o dispon√≠vel. Execute: pip install python-docx"
            }
        
        # Coletar dados
        dados = coletar_dados_financeiros(turmas_selecionadas, campos_selecionados, filtros)
        if not dados.get("success"):
            return dados
        
        # Formatar com IA
        conteudo_formatado = formatar_relatorio_com_ia(dados, "financeiro", campos_selecionados)
        
        # Criar documento
        titulo = f"Relat√≥rio Financeiro - {', '.join(turmas_selecionadas)}"
        doc = criar_documento_docx(titulo, conteudo_formatado)
        
        if not doc:
            return {"success": False, "error": "Erro ao criar documento Word"}
        
        # Salvar temporariamente
        nome_arquivo = f"relatorio_financeiro_{'_'.join(turmas_selecionadas)}"
        nome_arquivo = nome_arquivo.replace(' ', '_').replace('/', '_')
        
        caminho_arquivo = salvar_documento_temporario(doc, nome_arquivo)
        
        if not caminho_arquivo:
            return {"success": False, "error": "Erro ao salvar documento"}
        
        return {
            "success": True,
            "arquivo": caminho_arquivo,
            "arquivo_temporario": caminho_arquivo,  # Alias para o teste
            "nome_arquivo": os.path.basename(caminho_arquivo),
            "titulo": titulo,
            "conteudo_formatado": conteudo_formatado,  # Adicionar conte√∫do para an√°lise
            "total_alunos": len(dados.get("alunos", [])),
            "turmas_incluidas": turmas_selecionadas,
            "campos_selecionados": campos_selecionados,
            "filtros_aplicados": filtros,
            "data_geracao": dados["data_geracao"]
        }
    
    except Exception as e:
        return {"success": False, "error": f"Erro na gera√ß√£o do relat√≥rio financeiro: {e}"}

# ==========================================================
# üßπ FUN√á√ïES AUXILIARES
# ==========================================================

def limpar_arquivos_temporarios(max_idade_horas: int = 24):
    """Remove arquivos tempor√°rios antigos"""
    try:
        pasta_temp = "temp_reports"
        if not os.path.exists(pasta_temp):
            return
        
        agora = datetime.now()
        arquivos_removidos = 0
        
        for arquivo in os.listdir(pasta_temp):
            caminho_arquivo = os.path.join(pasta_temp, arquivo)
            tempo_modificacao = datetime.fromtimestamp(os.path.getmtime(caminho_arquivo))
            idade_horas = (agora - tempo_modificacao).total_seconds() / 3600
            
            if idade_horas > max_idade_horas:
                os.remove(caminho_arquivo)
                arquivos_removidos += 1
        
        if arquivos_removidos > 0:
            print(f"üßπ {arquivos_removidos} arquivos tempor√°rios removidos")
    
    except Exception as e:
        print(f"‚ùå Erro ao limpar arquivos tempor√°rios: {e}")

def obter_campos_disponiveis() -> Dict:
    """Retorna todos os campos dispon√≠veis para relat√≥rios"""
    return {
        "aluno": CAMPOS_ALUNO,
        "responsavel": CAMPOS_RESPONSAVEL,
        "mensalidade": CAMPOS_MENSALIDADE,
        "pagamento": CAMPOS_PAGAMENTO,
        "extrato_pix": CAMPOS_EXTRATO_PIX
    }

# ==========================================================
# üéØ FUN√á√ÉO PRINCIPAL PARA INTERFACE
# ==========================================================

def gerar_relatorio_interface(tipo_relatorio: str, configuracao: Dict) -> Dict:
    """
    Fun√ß√£o principal para ser chamada pela interface Streamlit
    """
    try:
        # Validar tipo de relat√≥rio
        if tipo_relatorio not in ['pedagogico', 'financeiro']:
            return {"success": False, "error": "Tipo de relat√≥rio inv√°lido"}
        
        # Extrair configura√ß√µes
        turmas_selecionadas = configuracao.get('turmas_selecionadas', [])
        campos_selecionados = configuracao.get('campos_selecionados', [])
        
        # Validar turmas
        if not turmas_selecionadas:
            return {"success": False, "error": "Nenhuma turma selecionada"}
        
        # Validar campos
        if not campos_selecionados:
            return {"success": False, "error": "Nenhum campo selecionado"}
        
        # Limpar arquivos antigos
        limpar_arquivos_temporarios()
        
        # Gerar relat√≥rio conforme o tipo
        if tipo_relatorio == 'pedagogico':
            return gerar_relatorio_pedagogico(turmas_selecionadas, campos_selecionados)
        else:
            filtros = configuracao.get('filtros', {})
            return gerar_relatorio_financeiro(turmas_selecionadas, campos_selecionados, filtros)
    
    except Exception as e:
        return {"success": False, "error": f"Erro na gera√ß√£o do relat√≥rio: {e}"} 