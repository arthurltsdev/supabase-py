#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üéØ INTERFACE DE PROCESSAMENTO DO EXTRATO PIX - VERS√ÉO OTIMIZADA
==============================================================

Interface eficiente para processar pagamentos do extrato PIX,
cadastrar respons√°veis e vincular com alunos.

Vers√£o focada nos requisitos espec√≠ficos do usu√°rio.
"""

import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta
import json
from typing import Dict, List, Optional

# Importar fun√ß√µes otimizadas
from funcoes_extrato_otimizadas import (
    listar_extrato_com_sem_responsavel,
    buscar_alunos_para_dropdown,
    listar_responsaveis_aluno,
    listar_alunos_vinculados_responsavel,
    buscar_dados_completos_alunos_responsavel,
    listar_turmas_disponiveis,
    cadastrar_responsavel_e_vincular,
    registrar_pagamento_do_extrato,
    registrar_pagamentos_multiplos_do_extrato,
    atualizar_aluno_campos,
    atualizar_vinculo_responsavel,
    obter_estatisticas_extrato,
    verificar_responsavel_existe,
    ignorar_registro_extrato,
    verificar_e_corrigir_extrato_duplicado,
    verificar_consistencia_extrato_pagamentos,
    supabase
)

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Processamento Extrato PIX",
    page_icon="üí∞",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS customizado
st.markdown("""
<style>
    .stDataFrame {font-size: 12px;}
    .metric-card {
        background: linear-gradient(90deg, #1f77b4, #2ca02c);
        padding: 1rem;
        border-radius: 0.5rem;
        color: white;
        text-align: center;
    }
    .success-card {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        padding: 10px;
        margin: 10px 0;
    }
    .error-card {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 5px;
        padding: 10px;
        margin: 10px 0;
    }
    .info-card {
        background-color: #d1ecf1;
        border: 1px solid #bee5eb;
        border-radius: 5px;
        padding: 10px;
        margin: 10px 0;
    }
</style>
""", unsafe_allow_html=True)

# ==========================================================
# üîß FUN√á√ïES AUXILIARES DA INTERFACE
# ==========================================================

def init_session_state():
    """Inicializa o estado da sess√£o"""
    defaults = {
        'acoes_selecionadas': {},
        'historico_acoes': [],
        'filtro_data_inicio': datetime.now() - timedelta(days=30),
        'filtro_data_fim': datetime.now(),
        'filtro_status': 'novo',
        'dados_extrato': None,
        'last_update': None,
        'registros_configurados': []
    }
    
    for key, value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = value

def carregar_dados_extrato():
    """Carrega dados do extrato com filtros aplicados"""
    with st.spinner("Carregando dados do extrato..."):
        filtro_turma = st.session_state.get('filtro_turma_com_resp', None)
        if filtro_turma == "Todas as turmas":
            filtro_turma = None
            
        resultado = listar_extrato_com_sem_responsavel(
            data_inicio=st.session_state.filtro_data_inicio.strftime("%Y-%m-%d"),
            data_fim=st.session_state.filtro_data_fim.strftime("%Y-%m-%d"),
            filtro_turma=filtro_turma
        )
        
        if resultado.get("success"):
            st.session_state.dados_extrato = resultado
            st.session_state.last_update = datetime.now()
            return True
        else:
            st.error(f"Erro ao carregar dados: {resultado.get('error')}")
            return False

def mostrar_modal_pagamento_avancado(registro: Dict, id_responsavel: str) -> Optional[Dict]:
    """
    Modal para configurar pagamento avan√ßado (m√∫ltiplos tipos/alunos)
    
    Args:
        registro: Dados do registro do extrato
        id_responsavel: ID do respons√°vel
        
    Returns:
        Dict com configura√ß√£o dos pagamentos ou None se cancelado
    """
    
    # Buscar alunos vinculados ao respons√°vel
    alunos_vinculados = listar_alunos_vinculados_responsavel(id_responsavel)
    
    if not alunos_vinculados.get("success") or not alunos_vinculados.get("alunos"):
        st.error("‚ùå Nenhum aluno encontrado vinculado a este respons√°vel!")
        return None
    
    alunos = alunos_vinculados["alunos"]
    valor_total = float(registro.get("valor", 0))
    
    # Cabe√ßalho mais destacado
    st.markdown(f"""
    <div class="info-card">
        <h3>‚öôÔ∏è Configura√ß√£o Avan√ßada de Pagamento</h3>
        <p><strong>üí∞ Valor Total:</strong> R$ {valor_total:.2f}</p>
        <p><strong>üë§ Remetente:</strong> {registro.get('nome_remetente')}</p>
        <p><strong>üìÖ Data:</strong> {registro.get('data_pagamento')}</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Container para os pagamentos configurados
    if 'pagamentos_config' not in st.session_state:
        st.session_state.pagamentos_config = [{}]  # Come√ßar com 1 pagamento
    
    # Cabe√ßalho e controles
    col1, col2, col3 = st.columns([2, 1, 1])
    
    with col1:
        st.markdown("### üìã Configure cada pagamento individual:")
    
    with col2:
        if st.button("‚ûï Adicionar Pagamento", type="secondary"):
            st.session_state.pagamentos_config.append({})
            st.rerun()
    
    with col3:
        if st.button("‚ùå Cancelar Configura√ß√£o", type="secondary"):
            if 'pagamentos_config' in st.session_state:
                del st.session_state.pagamentos_config
            return None
    
    # Lista para armazenar as configura√ß√µes
    pagamentos_detalhados = []
    
    # Primeiro, calcular o valor j√° configurado nos pagamentos anteriores
    valor_ja_configurado = 0.0
    for i in range(len(st.session_state.pagamentos_config)):
        config = st.session_state.pagamentos_config[i]
        valor_ja_configurado += config.get("valor", 0.0)
    
    # Criar formul√°rio para cada pagamento
    for i, config in enumerate(st.session_state.pagamentos_config):
        # Usar container com separador visual em vez de expander
        st.markdown(f"### üí∞ Pagamento {i+1}")
        
        # Container para este pagamento
        container = st.container()
        
        with container:
            col1, col2, col3 = st.columns([2, 2, 1])
            
            with col1:
                # Sele√ß√£o do aluno
                opcoes_alunos = {aluno["label"]: aluno for aluno in alunos}
                aluno_selecionado = st.selectbox(
                    "üë®‚Äçüéì Aluno:",
                    options=list(opcoes_alunos.keys()),
                    key=f"aluno_pag_{i}",
                    index=list(opcoes_alunos.keys()).index(config.get("aluno_label")) if config.get("aluno_label") in opcoes_alunos else 0
                )
                
                aluno_data = opcoes_alunos[aluno_selecionado]
                
            with col2:
                # Tipo de pagamento
                tipo_pagamento = st.selectbox(
                    "üí≥ Tipo:",
                    ["matricula", "mensalidade", "material", "fardamento", "evento", "outro"],
                    key=f"tipo_pag_{i}",
                    index=["matricula", "mensalidade", "material", "fardamento", "evento", "outro"].index(config.get("tipo_pagamento")) if config.get("tipo_pagamento") else 0
                )
            
            # NOVA SE√á√ÉO: Sele√ß√£o de mensalidade se o tipo for "mensalidade"
            mensalidade_selecionada = None
            if tipo_pagamento == "mensalidade":
                st.markdown("**üìÖ Selecionar Mensalidade:**")
                
                # Buscar mensalidades dispon√≠veis para o aluno
                from funcoes_extrato_otimizadas import listar_mensalidades_disponiveis_aluno
                mensalidades_resultado = listar_mensalidades_disponiveis_aluno(aluno_data["id"])
                
                if mensalidades_resultado.get("success") and mensalidades_resultado.get("mensalidades"):
                    mensalidades_disponiveis = mensalidades_resultado["mensalidades"]
                    
                    # Criar op√ß√µes para o selectbox
                    opcoes_mensalidades = ["Selecione uma mensalidade..."] + [m["label"] for m in mensalidades_disponiveis]
                    
                    mensalidade_escolhida = st.selectbox(
                        f"Mensalidades dispon√≠veis para {aluno_data['nome']}:",
                        options=opcoes_mensalidades,
                        key=f"mens_pag_{i}",
                        index=opcoes_mensalidades.index(config.get("mensalidade_label")) if config.get("mensalidade_label") in opcoes_mensalidades else 0
                    )
                    
                    if mensalidade_escolhida != "Selecione uma mensalidade...":
                        # Encontrar mensalidade selecionada
                        mensalidade_selecionada = next(
                            (m for m in mensalidades_disponiveis if m["label"] == mensalidade_escolhida), 
                            None
                        )
                        
                        if mensalidade_selecionada:
                            # Mostrar detalhes da mensalidade
                            col_det1, col_det2 = st.columns(2)
                            with col_det1:
                                st.info(f"üìÖ **Vencimento:** {mensalidade_selecionada['data_vencimento_fmt']}")
                            with col_det2:
                                st.info(f"‚ö†Ô∏è **Status:** {mensalidade_selecionada['status_texto']}")
                            
                            # Sugerir valor da mensalidade
                            valor_sugerido_mensalidade = mensalidade_selecionada["valor"]
                    else:
                        st.warning("‚ö†Ô∏è Selecione uma mensalidade para continuar")
                else:
                    st.warning(f"‚ö†Ô∏è Nenhuma mensalidade pendente encontrada para {aluno_data['nome']}")
                    st.info("üí° **Dica:** Verifique se as mensalidades foram geradas para este aluno ou se todas j√° foram pagas.")
            
            with col3:
                # Bot√£o para remover (s√≥ se houver mais de 1)
                if len(st.session_state.pagamentos_config) > 1:
                    if st.button("üóëÔ∏è Remover", key=f"remove_pag_{i}"):
                        st.session_state.pagamentos_config.pop(i)
                        st.rerun()
            
            # Valor do pagamento
            col1, col2 = st.columns(2)
            
            with col1:
                # Calcular valor configurado at√© agora (excluindo este item)
                valor_outros_pagamentos = 0.0
                for j, other_config in enumerate(st.session_state.pagamentos_config):
                    if j != i:
                        valor_outros_pagamentos += other_config.get("valor", 0.0)
                
                # Determinar valor sugerido baseado no contexto
                valor_sugerido = 0.01
                help_text = None
                
                # Se √© mensalidade e tem uma selecionada, usar valor da mensalidade
                if tipo_pagamento == "mensalidade" and mensalidade_selecionada:
                    valor_sugerido = mensalidade_selecionada["valor"]
                    help_text = f"Valor da mensalidade {mensalidade_selecionada['mes_referencia']}"
                # Se √© o √∫ltimo pagamento e h√° m√∫ltiplos, sugerir valor restante
                elif i == len(st.session_state.pagamentos_config) - 1 and len(st.session_state.pagamentos_config) > 1:
                    valor_restante = max(0.01, valor_total - valor_outros_pagamentos)
                    valor_sugerido = valor_restante
                    help_text = f"Valor restante: R$ {valor_restante:.2f}"
                # Para o primeiro pagamento ou √∫nico
                elif len(st.session_state.pagamentos_config) == 1:
                    valor_sugerido = config.get("valor", valor_total)
                else:
                    valor_sugerido = config.get("valor", 0.01)
                
                # Calcular max_valor
                max_valor = valor_total - valor_outros_pagamentos + 0.01
                max_valor = max(max_valor, valor_sugerido + 0.01)
                
                valor_pagamento = st.number_input(
                    "üí∞ Valor:",
                    min_value=0.01,
                    max_value=max_valor,
                    value=valor_sugerido,
                    step=0.01,
                    key=f"valor_pag_{i}",
                    help=help_text
                )
            
            with col2:
                observacoes = st.text_input(
                    "üìù Observa√ß√µes:",
                    value=config.get("observacoes", ""),
                    key=f"obs_pag_{i}"
                )
            
            # Atualizar configura√ß√£o
            config_atualizada = {
                "aluno_label": aluno_selecionado,
                "aluno_data": aluno_data,
                "tipo_pagamento": tipo_pagamento,
                "valor": valor_pagamento,
                "observacoes": observacoes
            }
            
            # Se √© mensalidade, salvar dados da mensalidade selecionada
            if tipo_pagamento == "mensalidade" and mensalidade_selecionada:
                config_atualizada["mensalidade_selecionada"] = mensalidade_selecionada
                config_atualizada["mensalidade_label"] = mensalidade_selecionada["label"]
            
            st.session_state.pagamentos_config[i] = config_atualizada
            
            # Adicionar aos pagamentos detalhados
            pagamento_detalhado = {
                "id_aluno": aluno_data["id"],
                "nome_aluno": aluno_data["nome"],
                "tipo_pagamento": tipo_pagamento,
                "valor": valor_pagamento,
                "observacoes": observacoes
            }
            
            # Se √© mensalidade, incluir dados da mensalidade
            if tipo_pagamento == "mensalidade" and mensalidade_selecionada:
                pagamento_detalhado["id_mensalidade"] = mensalidade_selecionada["id_mensalidade"]
                pagamento_detalhado["mes_referencia"] = mensalidade_selecionada["mes_referencia"]
                pagamento_detalhado["data_vencimento"] = mensalidade_selecionada["data_vencimento"]
            
            pagamentos_detalhados.append(pagamento_detalhado)
        
        # Separador visual entre pagamentos
        if i < len(st.session_state.pagamentos_config) - 1:
            st.markdown("---")
    
    # Calcular valor total configurado
    valor_total_configurado = sum(pag["valor"] for pag in pagamentos_detalhados)
    
    # Resumo e valida√ß√£o
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("üí∞ Valor Total", f"R$ {valor_total:.2f}")
    
    with col2:
        st.metric("üìä Configurado", f"R$ {valor_total_configurado:.2f}")
        
    with col3:
        diferenca = valor_total - valor_total_configurado
        cor = "normal" if abs(diferenca) < 0.01 else "inverse"
        st.metric("‚öñÔ∏è Diferen√ßa", f"R$ {diferenca:.2f}", delta_color=cor)
    
    # Valida√ß√µes
    valores_ok = abs(diferenca) < 0.01
    
    if not valores_ok:
        st.error(f"‚ùå Os valores n√£o conferem! Diferen√ßa: R$ {diferenca:.2f}")
        return None
    
    # Verificar duplicatas de aluno+tipo e mensalidades duplicadas
    combinacoes = set()
    mensalidades_usadas = set()
    
    for pag in pagamentos_detalhados:
        # Verificar duplicata de aluno+tipo (exceto mensalidades que podem ter m√∫ltiplas)
        if pag["tipo_pagamento"] != "mensalidade":
            combinacao = (pag["id_aluno"], pag["tipo_pagamento"])
            if combinacao in combinacoes:
                st.error(f"‚ùå Combina√ß√£o duplicada: {pag['nome_aluno']} + {pag['tipo_pagamento']}")
                return None
            combinacoes.add(combinacao)
        
        # Verificar mensalidades duplicadas
        if pag["tipo_pagamento"] == "mensalidade" and pag.get("id_mensalidade"):
            id_mensalidade = pag["id_mensalidade"]
            if id_mensalidade in mensalidades_usadas:
                st.error(f"‚ùå Mensalidade duplicada: {pag['mes_referencia']} para {pag['nome_aluno']}")
                return None
            mensalidades_usadas.add(id_mensalidade)
    
    # Bot√µes de a√ß√£o
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("‚úÖ CONFIRMAR PAGAMENTOS", type="primary", disabled=not valores_ok):
            # Limpar estado
            del st.session_state.pagamentos_config
            
            return {
                "configuracao_multipla": True,
                "pagamentos_detalhados": pagamentos_detalhados,
                "valor_total": valor_total_configurado,
                "total_pagamentos": len(pagamentos_detalhados)
            }
    
    with col2:
        if st.button("üîÑ RESETAR"):
            st.session_state.pagamentos_config = [{}]
            st.rerun()
    
    with col3:
        if st.button("‚ùå CANCELAR"):
            if 'pagamentos_config' in st.session_state:
                del st.session_state.pagamentos_config
            return None
    
    return None

def mostrar_formulario_responsavel(nome_sugerido: str = ""):
    """Formul√°rio para cadastrar novo respons√°vel"""
    with st.form("form_novo_responsavel", clear_on_submit=True):
        st.subheader("üìù Cadastrar Novo Respons√°vel")
        
        col1, col2 = st.columns(2)
        
        with col1:
            nome = st.text_input("Nome Completo*", value=nome_sugerido, key="resp_nome")
            cpf = st.text_input("CPF", key="resp_cpf")
            telefone = st.text_input("Telefone", key="resp_telefone")
        
        with col2:
            email = st.text_input("Email", key="resp_email")
            endereco = st.text_area("Endere√ßo", key="resp_endereco")
            tipo_relacao = st.selectbox(
                "Tipo de Rela√ß√£o*",
                ["pai", "m√£e", "av√¥", "av√≥", "tio", "tia", "respons√°vel legal", "outro"],
                key="resp_tipo"
            )
        
        responsavel_financeiro = st.checkbox("√â respons√°vel financeiro", value=True, key="resp_financeiro")
        
        # Busca de alunos
        st.subheader("üéì Vincular com Aluno")
        busca_aluno = st.text_input("üîç Digite o nome do aluno", key="busca_aluno")
        
        aluno_selecionado = None
        if busca_aluno and len(busca_aluno) >= 2:
            resultado_busca = buscar_alunos_para_dropdown(busca_aluno)
            if resultado_busca.get("success") and resultado_busca.get("opcoes"):
                opcoes = {op["label"]: op for op in resultado_busca["opcoes"]}
                aluno_escolhido = st.selectbox("Selecione o aluno:", options=list(opcoes.keys()), key="select_aluno")
                aluno_selecionado = opcoes[aluno_escolhido]
        
        submitted = st.form_submit_button("üíæ Cadastrar e Vincular", type="primary")
        
        if submitted:
            if not nome:
                st.error("Nome √© obrigat√≥rio!")
                return None
            
            if not aluno_selecionado:
                st.error("Selecione um aluno para vincular!")
                return None
            
            # Verificar se respons√°vel j√° existe
            check_resp = verificar_responsavel_existe(nome)
            if check_resp.get("existe"):
                st.warning("‚ö†Ô∏è J√° existe respons√°vel com nome similar!")
                for resp in check_resp.get("responsaveis_similares", []):
                    st.write(f"- {resp['nome']} (ID: {resp['id']})")
                
                if st.button("Continuar mesmo assim"):
                    pass
                else:
                    return None
            
            # Cadastrar respons√°vel e vincular
            dados_responsavel = {
                "nome": nome,
                "cpf": cpf if cpf else None,
                "telefone": telefone if telefone else None,
                "email": email if email else None,
                "endereco": endereco if endereco else None
            }
            
            resultado = cadastrar_responsavel_e_vincular(
                dados_responsavel=dados_responsavel,
                id_aluno=aluno_selecionado["id"],
                tipo_relacao=tipo_relacao,
                responsavel_financeiro=responsavel_financeiro
            )
            
            if resultado.get("success"):
                st.success(f"‚úÖ Respons√°vel {nome} cadastrado e vinculado com {aluno_selecionado['nome']}!")
                return resultado
            else:
                st.error(f"‚ùå Erro: {resultado.get('error')}")
                return None

def mostrar_informacoes_editaveis_aluno(aluno_data: Dict):
    """Mostra informa√ß√µes edit√°veis do aluno"""
    st.subheader(f"üìö Informa√ß√µes de {aluno_data['nome']}")
    
    # Buscar dados completos do aluno
    aluno_response = supabase.table("alunos").select("""
        id, nome, turno, data_nascimento, dia_vencimento, 
        data_matricula, valor_mensalidade, mensalidades_geradas,
        turmas!inner(nome_turma)
    """).eq("id", aluno_data['id']).execute()
    
    if not aluno_response.data:
        st.error("‚ùå Dados do aluno n√£o encontrados")
        return
    
    aluno_completo = aluno_response.data[0]
    
    # Layout em colunas para melhor organiza√ß√£o
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üìã Dados B√°sicos:**")
        st.write(f"‚Ä¢ **Nome:** {aluno_completo['nome']}")
        st.write(f"‚Ä¢ **Turma:** {aluno_completo['turmas']['nome_turma']}")
        st.write(f"‚Ä¢ **Data Nascimento:** {aluno_completo.get('data_nascimento', 'N√£o informado')}")
        st.write(f"‚Ä¢ **Data Matr√≠cula:** {aluno_completo.get('data_matricula', 'N√£o informado')}")
    
    with col2:
        st.markdown("**üí∞ Dados Financeiros:**")
        st.write(f"‚Ä¢ **Valor Mensalidade:** R$ {aluno_completo.get('valor_mensalidade', 0):.2f}")
        st.write(f"‚Ä¢ **Dia Vencimento:** {aluno_completo.get('dia_vencimento', 'N√£o definido')}")
        st.write(f"‚Ä¢ **Turno:** {aluno_completo.get('turno', 'N√£o informado')}")
    
    # Formul√°rio de edi√ß√£o
    st.markdown("---")
    st.markdown("### ‚úèÔ∏è Editar Informa√ß√µes")
    
    with st.form(f"edit_aluno_{aluno_data['id']}"):
        col1, col2 = st.columns(2)
        
        with col1:
            novo_valor_mensalidade = st.number_input(
                "üí∞ Valor da Mensalidade",
                min_value=0.0,
                step=10.0,
                value=float(aluno_completo.get('valor_mensalidade', 0)),
                key=f"valor_mens_{aluno_data['id']}"
            )
            
            novo_dia_vencimento = st.selectbox(
                "üìÖ Dia de Vencimento",
                options=list(range(1, 32)),
                index=int(aluno_completo.get('dia_vencimento', 5)) - 1 if aluno_completo.get('dia_vencimento') else 4,
                key=f"dia_venc_{aluno_data['id']}"
            )
        
        with col2:
            novo_turno = st.selectbox(
                "üïê Turno",
                options=["Matutino", "Vespertino", "Integral"],
                index=["Matutino", "Vespertino", "Integral"].index(aluno_completo.get('turno', 'Matutino')) if aluno_completo.get('turno') in ["Matutino", "Vespertino", "Integral"] else 0,
                key=f"turno_{aluno_data['id']}"
            )
            
            nova_data_nascimento = st.date_input(
                "üéÇ Data de Nascimento",
                value=pd.to_datetime(aluno_completo.get('data_nascimento')).date() if aluno_completo.get('data_nascimento') else None,
                key=f"data_nasc_{aluno_data['id']}"
            )
        
        if st.form_submit_button("üíæ Salvar Altera√ß√µes", type="primary"):
            campos_update = {
                "valor_mensalidade": novo_valor_mensalidade,
                "dia_vencimento": str(novo_dia_vencimento),
                "turno": novo_turno,
                "data_nascimento": nova_data_nascimento.isoformat() if nova_data_nascimento else None
            }
            
            resultado = atualizar_aluno_campos(aluno_data["id"], campos_update)
            
            if resultado.get("success"):
                st.success("‚úÖ Informa√ß√µes do aluno atualizadas!")
                st.rerun()
            else:
                st.error(f"‚ùå Erro: {resultado.get('error')}")

def mostrar_gestao_responsaveis_aluno(id_aluno: str, nome_aluno: str):
    """Interface para gerenciar respons√°veis de um aluno"""
    st.subheader(f"üë• Respons√°veis de {nome_aluno}")
    
    # Listar respons√°veis atuais
    responsaveis = listar_responsaveis_aluno(id_aluno)
    
    if responsaveis.get("success") and responsaveis.get("responsaveis"):
        df_resp = pd.DataFrame(responsaveis["responsaveis"])
        
        # Mostrar em formato edit√°vel
        edited_df = st.data_editor(
            df_resp[["nome", "tipo_relacao", "responsavel_financeiro", "telefone", "email"]],
            column_config={
                "tipo_relacao": st.column_config.SelectboxColumn(
                    "Tipo de Rela√ß√£o",
                    options=["pai", "m√£e", "av√¥", "av√≥", "tio", "tia", "respons√°vel legal", "outro"]
                ),
                "responsavel_financeiro": st.column_config.CheckboxColumn("Resp. Financeiro")
            },
            disabled=["nome", "telefone", "email"],
            use_container_width=True,
            key=f"edit_resp_{id_aluno}"
        )
        
        # Bot√µes de a√ß√£o
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üíæ Salvar Altera√ß√µes", key=f"save_{id_aluno}"):
                # Processar altera√ß√µes
                for idx, row in edited_df.iterrows():
                    if idx < len(df_resp):
                        id_vinculo = df_resp.iloc[idx]["id_vinculo"]
                        resultado = atualizar_vinculo_responsavel(
                            id_vinculo=id_vinculo,
                            tipo_relacao=row["tipo_relacao"],
                            responsavel_financeiro=row["responsavel_financeiro"]
                        )
                        if not resultado.get("success"):
                            st.error(f"Erro ao atualizar: {resultado.get('error')}")
                
                st.success("‚úÖ Altera√ß√µes salvas!")
                st.rerun()
        
        with col2:
            if st.button("‚ûï Adicionar Respons√°vel", key=f"add_{id_aluno}"):
                st.session_state[f"show_add_resp_{id_aluno}"] = True
    
    else:
        st.info("Nenhum respons√°vel vinculado a este aluno")
        if st.button("‚ûï Adicionar Primeiro Respons√°vel", key=f"add_first_{id_aluno}"):
            st.session_state[f"show_add_resp_{id_aluno}"] = True
    
    # Formul√°rio para adicionar respons√°vel
    if st.session_state.get(f"show_add_resp_{id_aluno}", False):
        st.markdown("---")
        resultado = mostrar_formulario_responsavel()
        if resultado:
            st.session_state[f"show_add_resp_{id_aluno}"] = False
            st.rerun()

# ==========================================================
# üé® INTERFACE PRINCIPAL
# ==========================================================

def main():
    """Fun√ß√£o principal da interface"""
    
    # Inicializar estado
    init_session_state()
    
    # Header
    st.title("üí∞ Processamento do Extrato PIX")
    st.markdown("Interface otimizada para processar pagamentos e gerenciar respons√°veis")
    
    # Sidebar com filtros e estat√≠sticas
    with st.sidebar:
        st.header("üîç Filtros")
        
        # Filtros de data
        data_inicio = st.date_input(
            "Data In√≠cio",
            value=st.session_state.filtro_data_inicio,
            key="filtro_inicio"
        )
        
        data_fim = st.date_input(
            "Data Fim",
            value=st.session_state.filtro_data_fim,
            key="filtro_fim"
        )
        
        if st.button("üîÑ Atualizar Dados", type="primary"):
            st.session_state.filtro_data_inicio = data_inicio
            st.session_state.filtro_data_fim = data_fim
            if carregar_dados_extrato():
                st.success("‚úÖ Dados atualizados!")
                st.rerun()
        
        # Bot√£o para verifica√ß√£o manual de consist√™ncia
        if st.button("üîç Verificar Consist√™ncia", help="Verifica e corrige registros duplicados manualmente"):
            with st.spinner("Verificando consist√™ncia..."):
                resultado_verificacao = verificar_consistencia_extrato_pagamentos(
                    data_inicio.strftime("%Y-%m-%d"),
                    data_fim.strftime("%Y-%m-%d")
                )
                
                if resultado_verificacao.get("success"):
                    relatorio = resultado_verificacao["relatorio"]
                    
                    if relatorio["inconsistencias"]:
                        st.warning(f"‚ö†Ô∏è {len(relatorio['inconsistencias'])} inconsist√™ncias encontradas!")
                        
                        # Executar corre√ß√£o autom√°tica
                        correcao = verificar_e_corrigir_extrato_duplicado()
                        if correcao.get("success") and correcao.get("corrigidos", 0) > 0:
                            st.success(f"‚úÖ {correcao['corrigidos']} registros corrigidos automaticamente!")
                            # Recarregar dados ap√≥s corre√ß√£o
                            carregar_dados_extrato()
                            st.rerun()
                        else:
                            st.info("‚ÑπÔ∏è Nenhuma corre√ß√£o aplicada")
                    else:
                        st.success("‚úÖ Nenhuma inconsist√™ncia encontrada!")
                else:
                    st.error(f"‚ùå Erro na verifica√ß√£o: {resultado_verificacao.get('error')}")
        
        # Estat√≠sticas
        st.markdown("---")
        st.header("üìä Estat√≠sticas")
        
        stats_resultado = obter_estatisticas_extrato(
            data_inicio.strftime("%Y-%m-%d"),
            data_fim.strftime("%Y-%m-%d")
        )
        
        if stats_resultado.get("success"):
            stats = stats_resultado["estatisticas"]
            
            st.metric("Total de Registros", stats["total_registros"])
            st.metric("Novos (n√£o processados)", stats["novos"], delta=f"R$ {stats['valor_novos']:,.2f}")
            st.metric("Registrados", stats["registrados"], delta=f"R$ {stats['valor_registrados']:,.2f}")
            st.metric("% Processado", f"{stats['percentual_processado']}%")
            
            # Gr√°fico de progresso
            fig = px.pie(
                values=[stats["novos"], stats["registrados"]],
                names=["Novos", "Registrados"],
                title="Status dos Registros",
                color_discrete_map={"Novos": "#ff7f0e", "Registrados": "#2ca02c"}
            )
            fig.update_layout(height=300)
            st.plotly_chart(fig, use_container_width=True)
    
    # Tabs principais
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "‚úÖ Pagamentos COM Respons√°vel",
        "‚ùì Pagamentos SEM Respons√°vel", 
        "üë• Gest√£o de Alunos/Respons√°veis",
        "üìã Hist√≥rico",
        "üîç Consist√™ncia"
    ])
    
    # ==========================================================
    # TAB 1: PAGAMENTOS COM RESPONS√ÅVEL
    # ==========================================================
    with tab1:
        st.header("‚úÖ Pagamentos com Respons√°vel Cadastrado")
        
        # Filtros adicionais para a aba
        col1, col2 = st.columns([3, 1])
        
        with col1:
            # Filtro por turma
            turmas_resultado = listar_turmas_disponiveis()
            if turmas_resultado.get("success"):
                opcoes_turmas = ["Todas as turmas"] + turmas_resultado["turmas"]
                filtro_turma = st.selectbox(
                    "üéì Filtrar por Turma:",
                    options=opcoes_turmas,
                    key="filtro_turma_com_resp"
                )
        
        with col2:
            if st.button("üîÑ Aplicar Filtros", type="secondary"):
                carregar_dados_extrato()
                st.rerun()
        
        if st.session_state.dados_extrato is None:
            st.info("üëÜ Use os filtros na barra lateral para carregar os dados")
        else:
            dados_com = st.session_state.dados_extrato.get("com_responsavel", [])
            
            # Mostrar feedback sobre corre√ß√µes autom√°ticas
            correcoes_aplicadas = st.session_state.dados_extrato.get("correcoes_aplicadas", 0)
            if correcoes_aplicadas > 0:
                st.success(f"‚úÖ {correcoes_aplicadas} registros duplicados foram automaticamente corrigidos!")
                
                # Mostrar detalhes das corre√ß√µes se houver
                detalhes_correcoes = st.session_state.dados_extrato.get("detalhes_correcoes", [])
                if detalhes_correcoes:
                    with st.expander(f"üìã Ver detalhes das {correcoes_aplicadas} corre√ß√µes aplicadas"):
                        for i, correcao in enumerate(detalhes_correcoes):
                            st.write(f"**{i+1}.** {correcao['nome_remetente']} - R$ {correcao['valor']:.2f}")
                            st.write(f"   üìÖ Data: {correcao['data_pagamento']}")
                            st.write(f"   üÜî Extrato: {correcao['id_extrato']}")
                            st.write(f"   üí≥ Pagamento: {correcao['id_pagamento_encontrado']}")
                            st.write(f"   üìù Motivo: {correcao['motivo']}")
                            if i < len(detalhes_correcoes) - 1:
                                st.write("---")
            
            if not dados_com:
                if st.session_state.get('filtro_turma_com_resp') and st.session_state.get('filtro_turma_com_resp') != "Todas as turmas":
                    st.info(f"üéì Nenhum pagamento encontrado para a turma '{st.session_state.get('filtro_turma_com_resp')}'")
                else:
                    st.success("üéâ Todos os pagamentos j√° foram processados!")
            else:
                turma_info = f" (Turma: {st.session_state.get('filtro_turma_com_resp', 'Todas')})" if st.session_state.get('filtro_turma_com_resp') != "Todas as turmas" else ""
                st.info(f"üìä {len(dados_com)} registros encontrados com respons√°veis cadastrados{turma_info}")
                
                # Converter para DataFrame
                df = pd.DataFrame(dados_com)
                
                # Bot√µes de a√ß√£o principal
                col1, col2, col3 = st.columns([2, 2, 1])
                
                with col1:
                    modo_processamento = st.radio(
                        "üéØ Modo de Processamento:",
                        ["üöÄ Processamento R√°pido", "‚öôÔ∏è Configura√ß√£o Avan√ßada"],
                        help="R√°pido: 1 tipo por pagamento | Avan√ßado: m√∫ltiplos tipos/alunos por pagamento"
                    )
                
                with col2:
                    if modo_processamento == "üöÄ Processamento R√°pido":
                        acao_massa = st.selectbox(
                            "Tipo Padr√£o",
                            ["matricula", "mensalidade", "material", "fardamento", "evento", "outro"],
                            key="acao_massa_com"
                        )
                    else:
                        st.write("‚öôÔ∏è Configura√ß√£o individual por registro")
                
                with col3:
                    if st.button("üöÄ PROCESSAR SELECIONADOS", type="primary"):
                        processar_acoes_com_responsavel()
                
                # Bot√£o para limpar configura√ß√µes com contador visual
                configuracoes_salvas = st.session_state.get('registros_configurados', [])
                if configuracoes_salvas:
                    col_botao1, col_botao2 = st.columns(2)
                    
                    with col_botao1:
                        st.info(f"üìã {len(configuracoes_salvas)} configura√ß√µes salvas")
                    
                    with col_botao2:
                        if st.button("üóëÔ∏è Limpar Configura√ß√µes", type="secondary", help="Remove todas as configura√ß√µes salvas"):
                            st.session_state.registros_configurados = []
                            # Limpar tamb√©m qualquer configura√ß√£o de pagamento ativa
                            if 'pagamentos_config' in st.session_state:
                                del st.session_state.pagamentos_config
                            st.success("‚úÖ Todas as configura√ß√µes foram limpas!")
                            st.rerun()
                
                # Mostrar registros
                st.subheader("üìã Registros Dispon√≠veis")
                
                # Processar cada registro individualmente
                registros_configurados = []
                
                for idx, registro in enumerate(dados_com):
                    responsavel_info = registro.get('responsaveis', {})
                    nome_responsavel = responsavel_info.get('nome', 'N/A') if responsavel_info else 'N/A'
                    
                    with st.expander(
                        f"üí∞ R$ {registro['valor']:.2f} - {registro['nome_remetente']} ({nome_responsavel}) - {registro['data_pagamento']}",
                        expanded=False
                    ):
                        # Buscar dados completos dos alunos vinculados
                        id_responsavel = registro.get('id_responsavel')
                        alunos_completos = None
                        tem_multiplos_alunos = False
                        
                        if id_responsavel:
                            resultado_alunos = buscar_dados_completos_alunos_responsavel(id_responsavel)
                            if resultado_alunos.get("success"):
                                alunos_completos = resultado_alunos["alunos"]
                                tem_multiplos_alunos = resultado_alunos.get("tem_multiplos_alunos", False)
                        
                        col1, col2, col3 = st.columns([3, 3, 2])
                        
                        with col1:
                            st.markdown("**üí∞ Dados do Pagamento:**")
                            st.write(f"‚Ä¢ **Respons√°vel:** {nome_responsavel}")
                            st.write(f"‚Ä¢ **Valor:** R$ {registro['valor']:.2f}")
                            st.write(f"‚Ä¢ **Data:** {registro['data_pagamento']}")
                            if registro.get('observacoes'):
                                st.write(f"‚Ä¢ **Observa√ß√µes:** {registro['observacoes']}")
                        
                        with col2:
                            st.markdown("**üë®‚Äçüéì Alunos Vinculados:**")
                            if alunos_completos:
                                for i, aluno in enumerate(alunos_completos):
                                    st.write(f"**{i+1}. {aluno['nome']}**")
                                    st.write(f"   üìö Turma: {aluno['turma_nome']}")
                                    st.write(f"   üí∞ Mensalidade: {aluno['valor_mensalidade_fmt']}")
                                    st.write(f"   üìÖ Vencimento: {aluno['dia_vencimento_fmt']}")
                                    if aluno.get('data_matricula'):
                                        st.write(f"   üéì Matr√≠cula: {aluno['data_matricula']}")
                                    if aluno.get('turno'):
                                        st.write(f"   üïê Turno: {aluno['turno']}")
                                    if i < len(alunos_completos) - 1:
                                        st.write("---")
                            else:
                                st.write("‚ùå Nenhum aluno vinculado")
                            
                            if tem_multiplos_alunos:
                                st.info(f"‚ÑπÔ∏è {len(alunos_completos)} alunos vinculados")
                        
                        with col3:
                            # Checkbox para selecionar
                            selecionado = st.checkbox(
                                "Processar este registro",
                                key=f"select_{registro['id']}"
                            )
                            
                            if selecionado:
                                if modo_processamento == "üöÄ Processamento R√°pido":
                                    # Modo r√°pido: apenas selecionar o tipo
                                    tipo_pagamento = st.selectbox(
                                        "Tipo de Pagamento:",
                                        ["matricula", "mensalidade", "material", "fardamento", "evento", "outro"],
                                        index=["matricula", "mensalidade", "material", "fardamento", "evento", "outro"].index(acao_massa),
                                        key=f"tipo_{registro['id']}"
                                    )
                                    
                                    # Se tem m√∫ltiplos alunos, permitir sele√ß√£o
                                    if tem_multiplos_alunos and alunos_completos:
                                        opcoes_alunos = {f"{aluno['nome']} - {aluno['turma_nome']}": aluno for aluno in alunos_completos}
                                        aluno_selecionado = st.selectbox(
                                            "Aluno:",
                                            list(opcoes_alunos.keys()),
                                            key=f"aluno_{registro['id']}"
                                        )
                                        aluno_data = opcoes_alunos[aluno_selecionado]
                                        id_aluno = aluno_data["id"]
                                    else:
                                        # Usar primeiro aluno vinculado
                                        if alunos_completos and len(alunos_completos) > 0:
                                            id_aluno = alunos_completos[0]["id"]
                                            aluno_data = alunos_completos[0]
                                        else:
                                            id_aluno = None
                                            aluno_data = None
                                            st.error("‚ùå Nenhum aluno vinculado!")
                                    
                                    # Se √© mensalidade, permitir sele√ß√£o de mensalidade espec√≠fica
                                    mensalidade_selecionada = None
                                    if tipo_pagamento == "mensalidade" and id_aluno:
                                        from funcoes_extrato_otimizadas import listar_mensalidades_disponiveis_aluno
                                        mensalidades_resultado = listar_mensalidades_disponiveis_aluno(id_aluno)
                                        
                                        if mensalidades_resultado.get("success") and mensalidades_resultado.get("mensalidades"):
                                            mensalidades_disponiveis = mensalidades_resultado["mensalidades"]
                                            opcoes_mensalidades = ["Selecione uma mensalidade..."] + [m["label"] for m in mensalidades_disponiveis]
                                            
                                            mensalidade_escolhida = st.selectbox(
                                                f"Mensalidade para {aluno_data['nome'] if aluno_data else 'aluno'}:",
                                                options=opcoes_mensalidades,
                                                key=f"mens_rapido_{registro['id']}"
                                            )
                                            
                                            if mensalidade_escolhida != "Selecione uma mensalidade...":
                                                mensalidade_selecionada = next(
                                                    (m for m in mensalidades_disponiveis if m["label"] == mensalidade_escolhida), 
                                                    None
                                                )
                                                
                                                if mensalidade_selecionada:
                                                    st.info(f"üìÖ {mensalidade_selecionada['mes_referencia']} - {mensalidade_selecionada['status_texto']}")
                                            else:
                                                st.warning("‚ö†Ô∏è Selecione uma mensalidade")
                                        else:
                                            st.warning(f"‚ö†Ô∏è Nenhuma mensalidade pendente para {aluno_data['nome'] if aluno_data else 'este aluno'}")
                                    
                                    if id_aluno and (tipo_pagamento != "mensalidade" or mensalidade_selecionada):
                                        config_rapida = {
                                            'id_extrato': registro['id'],
                                            'id_responsavel': id_responsavel,
                                            'configuracao_simples': True,
                                            'id_aluno': id_aluno,
                                            'tipo_pagamento': tipo_pagamento,
                                            'valor': registro['valor'],
                                            'registro': registro
                                        }
                                        
                                        # Se √© mensalidade, adicionar dados da mensalidade
                                        if tipo_pagamento == "mensalidade" and mensalidade_selecionada:
                                            config_rapida['id_mensalidade'] = mensalidade_selecionada["id_mensalidade"]
                                            config_rapida['mes_referencia'] = mensalidade_selecionada["mes_referencia"]
                                            config_rapida['data_vencimento'] = mensalidade_selecionada["data_vencimento"]
                                        
                                        registros_configurados.append(config_rapida)
                        
                        with col3:
                            if selecionado and modo_processamento == "‚öôÔ∏è Configura√ß√£o Avan√ßada":
                                if st.button("‚öôÔ∏è Configurar", key=f"config_{registro['id']}"):
                                    st.session_state[f"show_config_{registro['id']}"] = True
                        
                # Salvar configura√ß√µes do processamento r√°pido no estado da sess√£o
                # IMPORTANTE: Mesclar com configura√ß√µes avan√ßadas existentes, n√£o sobrescrever
                configuracoes_existentes = st.session_state.get('registros_configurados', [])
                
                # Remover configura√ß√µes simples do mesmo registro se houver
                configuracoes_existentes = [
                    config for config in configuracoes_existentes 
                    if not (config.get('configuracao_simples') and 
                           config.get('id_extrato') in [r.get('id_extrato') for r in registros_configurados])
                ]
                
                # Adicionar novas configura√ß√µes simples
                configuracoes_existentes.extend(registros_configurados)
                
                # Atualizar session state
                st.session_state.registros_configurados = configuracoes_existentes
                
                # Modal de configura√ß√£o avan√ßada (fora dos expanders)
                registro_para_configurar = None
                for registro in dados_com:
                    if st.session_state.get(f"show_config_{registro['id']}", False):
                        registro_para_configurar = registro
                        break
                
                if registro_para_configurar:
                    st.markdown("---")
                    st.markdown("## ‚öôÔ∏è Configura√ß√£o Avan√ßada de Pagamento")
                    
                    # Buscar respons√°vel
                    id_responsavel_config = registro_para_configurar.get('id_responsavel')
                    
                    config_resultado = mostrar_modal_pagamento_avancado(registro_para_configurar, id_responsavel_config)
                    
                    if config_resultado:
                        # Buscar configura√ß√µes existentes
                        configuracoes_existentes = st.session_state.get('registros_configurados', [])
                        
                        # Remover configura√ß√£o existente do mesmo registro se houver
                        configuracoes_existentes = [
                            config for config in configuracoes_existentes 
                            if config.get('id_extrato') != registro_para_configurar['id']
                        ]
                        
                        # Adicionar nova configura√ß√£o avan√ßada
                        configuracoes_existentes.append({
                            'id_extrato': registro_para_configurar['id'],
                            'id_responsavel': id_responsavel_config,
                            'configuracao_multipla': True,
                            'pagamentos_detalhados': config_resultado['pagamentos_detalhados'],
                            'valor_total': config_resultado['valor_total'],
                            'registro': registro_para_configurar
                        })
                        
                        # Salvar no session state
                        st.session_state.registros_configurados = configuracoes_existentes
                        st.session_state[f"show_config_{registro_para_configurar['id']}"] = False
                        
                        st.success(f"‚úÖ Configura√ß√£o salva: {config_resultado['total_pagamentos']} pagamentos")
                        st.rerun()
                
                # Resumo dos registros configurados (incluindo avan√ßados j√° salvos)
                todas_configuracoes = st.session_state.get('registros_configurados', [])
                
                if todas_configuracoes:
                    st.markdown("---")
                    st.subheader("üìä Resumo dos Registros Configurados")
                    
                    total_simples = len([r for r in todas_configuracoes if r.get('configuracao_simples')])
                    total_multiplos = len([r for r in todas_configuracoes if r.get('configuracao_multipla')])
                    
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("üöÄ Processamento R√°pido", total_simples)
                    with col2:
                        st.metric("‚öôÔ∏è Configura√ß√£o Avan√ßada", total_multiplos)
                    with col3:
                        st.metric("üìã Total", len(todas_configuracoes))
                    
                    # Detalhes melhorados
                    st.markdown("### üìã Detalhes dos Registros Configurados")
                    
                    for i, config in enumerate(todas_configuracoes, 1):
                        registro = config.get('registro', {})
                        
                        if config.get('configuracao_simples'):
                            # Buscar dados do aluno
                            aluno_id = config.get('id_aluno')
                            aluno_nome = "N/A"
                            
                            # Tentar buscar nome do aluno a partir dos dados j√° carregados
                            if registro and registro.get('responsaveis'):
                                # Se h√° dados de respons√°veis no registro, pode haver dados de alunos
                                pass  # Aqui poderia buscar se necess√°rio
                            
                            responsavel_nome = registro.get('nome_remetente', 'N/A')
                            data_pagamento = registro.get('data_pagamento', 'N/A')
                            
                            # Informa√ß√µes sobre mensalidade se aplic√°vel
                            info_mensalidade = ""
                            if config.get('tipo_pagamento') == 'mensalidade' and config.get('mes_referencia'):
                                info_mensalidade = f" ({config.get('mes_referencia')})"
                            
                            with st.container():
                                st.markdown(f"""
                                **üöÄ {i}. Processamento R√°pido** - R$ {config['valor']:.2f}
                                - üìÖ **Data:** {data_pagamento}
                                - üë§ **Respons√°vel:** {responsavel_nome}
                                - üí≥ **Tipo:** {config['tipo_pagamento']}{info_mensalidade}
                                - üÜî **Extrato:** {config.get('id_extrato', 'N/A')[:8]}...
                                """)
                                
                        elif config.get('configuracao_multipla'):
                            detalhes = config['pagamentos_detalhados']
                            responsavel_nome = registro.get('nome_remetente', 'N/A')
                            data_pagamento = registro.get('data_pagamento', 'N/A')
                            
                            with st.container():
                                st.markdown(f"""
                                **‚öôÔ∏è {i}. Configura√ß√£o Avan√ßada** - R$ {config['valor_total']:.2f}
                                - üìÖ **Data:** {data_pagamento}
                                - üë§ **Respons√°vel:** {responsavel_nome}
                                - üÜî **Extrato:** {config.get('id_extrato', 'N/A')[:8]}...
                                """)
                                
                                # Listar cada pagamento detalhado
                                for j, det in enumerate(detalhes, 1):
                                    info_mensalidade = ""
                                    if det.get('tipo_pagamento') == 'mensalidade' and det.get('mes_referencia'):
                                        info_mensalidade = f" ({det.get('mes_referencia')})"
                                    
                                    st.markdown(f"  **{j}.** {det.get('nome_aluno', 'N/A')} - {det.get('tipo_pagamento')}{info_mensalidade} - R$ {det.get('valor', 0):.2f}")
                        
                        if i < len(todas_configuracoes):
                            st.markdown("---")
                
                elif registros_configurados:
                    # Fallback para mostrar apenas os configurados no loop atual
                    st.markdown("---")
                    st.subheader("üìä Registros Selecionados para Processamento")
                    
                    total_simples = len([r for r in registros_configurados if r.get('configuracao_simples')])
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.metric("üöÄ Processamento R√°pido", total_simples)
                    with col2:
                        st.metric("üìã Total", len(registros_configurados))
                    
                    # Detalhes
                    for config in registros_configurados:
                        if config.get('configuracao_simples'):
                            st.write(f"‚Ä¢ **Simples:** R$ {config['valor']:.2f} - {config['tipo_pagamento']}")
    
    # ==========================================================
    # TAB 2: PAGAMENTOS SEM RESPONS√ÅVEL
    # ==========================================================
    with tab2:
        st.header("‚ùì Pagamentos sem Respons√°vel Cadastrado")
        
        if st.session_state.dados_extrato is None:
            st.info("üëÜ Use os filtros na barra lateral para carregar os dados")
        else:
            dados_sem = st.session_state.dados_extrato.get("sem_responsavel", [])
            
            if not dados_sem:
                st.success("üéâ Todos os pagamentos t√™m respons√°veis identificados!")
            else:
                st.info(f"üìä {len(dados_sem)} registros sem respons√°vel cadastrado")
                
                # Filtro de busca
                busca_nome = st.text_input("üîç Filtrar por nome do remetente", key="busca_sem_resp")
                
                # Filtrar dados
                if busca_nome:
                    dados_filtrados = [
                        r for r in dados_sem 
                        if busca_nome.lower() in r.get('nome_remetente', '').lower()
                    ]
                else:
                    dados_filtrados = dados_sem
                
                # Mostrar registros em expansores
                for idx, registro in enumerate(dados_filtrados[:20]):  # Limitar a 20 para performance
                    with st.expander(
                        f"üí∞ {registro['nome_remetente']} - R$ {registro['valor']:.2f} - {registro['data_pagamento']}"
                    ):
                        col1, col2 = st.columns([2, 1])
                        
                        with col1:
                            st.write(f"**ID:** {registro['id']}")
                            st.write(f"**Valor:** R$ {registro['valor']:.2f}")
                            st.write(f"**Data:** {registro['data_pagamento']}")
                            if registro.get('observacoes'):
                                st.write(f"**Observa√ß√µes:** {registro['observacoes']}")
                        
                        with col2:
                            st.markdown("**üéØ A√ß√µes:**")
                            
                            # Bot√£o para cadastrar respons√°vel
                            if st.button(
                                "üìù Cadastrar Respons√°vel", 
                                key=f"cad_resp_{registro['id']}",
                                use_container_width=True
                            ):
                                st.session_state[f"show_form_{registro['id']}"] = True
                            
                            # Bot√£o para ignorar registro
                            if st.button(
                                "üö´ Ignorar Registro", 
                                key=f"ignore_{registro['id']}",
                                help="Marca como ignorado e remove da lista",
                                use_container_width=True
                            ):
                                resultado_ignore = ignorar_registro_extrato(registro['id'])
                                if resultado_ignore.get("success"):
                                    st.success("‚úÖ Registro marcado como ignorado!")
                                    # Recarregar dados
                                    carregar_dados_extrato()
                                    st.rerun()
                                else:
                                    st.error(f"‚ùå Erro: {resultado_ignore.get('error')}")
                        
                        # Mostrar formul√°rio se solicitado
                        if st.session_state.get(f"show_form_{registro['id']}", False):
                            st.markdown("---")
                            resultado = mostrar_formulario_responsavel(registro['nome_remetente'])
                            
                            if resultado and resultado.get("success"):
                                # Atualizar o registro do extrato com o novo respons√°vel
                                from funcoes_extrato_otimizadas import supabase
                                supabase.table("extrato_pix").update({
                                    "id_responsavel": resultado["id_responsavel"],
                                    "atualizado_em": datetime.now().isoformat()
                                }).eq("id", registro["id"]).execute()
                                
                                st.success("‚úÖ Respons√°vel cadastrado e extrato atualizado!")
                                st.session_state[f"show_form_{registro['id']}"] = False
                                
                                # Recarregar dados
                                carregar_dados_extrato()
                                st.rerun()
                
                if len(dados_sem) > 20:
                    st.info(f"Mostrando 20 de {len(dados_sem)} registros. Use o filtro para encontrar registros espec√≠ficos.")
    
    # ==========================================================
    # TAB 3: GEST√ÉO DE ALUNOS/RESPONS√ÅVEIS
    # ==========================================================
    with tab3:
        st.header("üë• Gest√£o de Alunos e Respons√°veis")
        
        # Busca de aluno melhorada
        busca_aluno = st.text_input("üîç Buscar aluno por nome", key="busca_gestao_aluno", placeholder="Digite pelo menos 2 caracteres...")
        
        # Inicializar lista de alunos
        if 'lista_alunos_gestao' not in st.session_state:
            st.session_state.lista_alunos_gestao = []
        
        # Buscar alunos automaticamente conforme digita
        if len(busca_aluno) >= 2:
            resultado_busca = buscar_alunos_para_dropdown(busca_aluno)
            if resultado_busca.get("success"):
                st.session_state.lista_alunos_gestao = resultado_busca.get("opcoes", [])
        elif len(busca_aluno) == 0:
            # Se campo vazio, buscar todos os alunos (limitado)
            resultado_busca = buscar_alunos_para_dropdown("")
            if resultado_busca.get("success"):
                st.session_state.lista_alunos_gestao = resultado_busca.get("opcoes", [])
        
        # Exibir lista de alunos encontrados
        if st.session_state.lista_alunos_gestao:
            # Selectbox com os alunos encontrados
            opcoes_formatadas = ["Selecione um aluno..."] + [aluno["label"] for aluno in st.session_state.lista_alunos_gestao]
            
            aluno_escolhido = st.selectbox(
                f"üéì Alunos encontrados ({len(st.session_state.lista_alunos_gestao)}):",
                options=opcoes_formatadas,
                key="select_gestao_aluno"
            )
            
            # Encontrar o aluno selecionado
            aluno_selecionado = None
            if aluno_escolhido != "Selecione um aluno...":
                for aluno in st.session_state.lista_alunos_gestao:
                    if aluno["label"] == aluno_escolhido:
                        aluno_selecionado = aluno
                        break
            
            if aluno_selecionado:
                st.markdown("---")
                
                # Usar a nova fun√ß√£o para mostrar informa√ß√µes edit√°veis
                mostrar_informacoes_editaveis_aluno(aluno_selecionado)
                
                # Gest√£o de respons√°veis
                st.markdown("---")
                mostrar_gestao_responsaveis_aluno(
                    aluno_selecionado["id"], 
                    aluno_selecionado["nome"]
                )
        elif len(busca_aluno) >= 2:
            st.info("Nenhum aluno encontrado com esse nome")
    
    # ==========================================================
    # TAB 4: HIST√ìRICO
    # ==========================================================
    with tab4:
        st.header("üìã Hist√≥rico de A√ß√µes")
        
        if st.session_state.historico_acoes:
            df_historico = pd.DataFrame(st.session_state.historico_acoes)
            
            # Estat√≠sticas
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("Total de A√ß√µes", len(df_historico))
            with col2:
                sucessos = len(df_historico[df_historico['status'] == 'Sucesso'])
                st.metric("Sucessos", sucessos)
            with col3:
                erros = len(df_historico[df_historico['status'].isin(['Erro', 'Exce√ß√£o'])])
                st.metric("Erros", erros)
            with col4:
                if len(df_historico) > 0:
                    taxa_sucesso = (sucessos / len(df_historico)) * 100
                    st.metric("Taxa de Sucesso", f"{taxa_sucesso:.1f}%")
            
            # Filtros
            col1, col2 = st.columns(2)
            with col1:
                filtro_status = st.selectbox(
                    "Filtrar por Status:",
                    ["Todos", "Sucesso", "Erro", "Exce√ß√£o"],
                    key="filtro_status_historico"
                )
            with col2:
                if st.button("üîÑ Atualizar Visualiza√ß√£o"):
                    st.rerun()
            
            # Aplicar filtro
            if filtro_status != "Todos":
                df_filtrado = df_historico[df_historico['status'] == filtro_status]
            else:
                df_filtrado = df_historico
            
            # Tabela principal com colunas essenciais
            colunas_mostrar = ['timestamp', 'status', 'acao', 'nome_remetente', 'valor', 'mensagem']
            if 'nome_aluno' in df_filtrado.columns:
                colunas_mostrar.insert(-2, 'nome_aluno')
                
            st.subheader("üìä Resumo das A√ß√µes")
            st.dataframe(
                df_filtrado[colunas_mostrar] if len(df_filtrado) > 0 else df_filtrado,
                column_config={
                    "timestamp": st.column_config.DatetimeColumn("Data/Hora", format="DD/MM/YYYY HH:mm:ss"),
                    "valor": st.column_config.NumberColumn("Valor", format="R$ %.2f"),
                    "status": st.column_config.TextColumn("Status"),
                    "acao": st.column_config.TextColumn("A√ß√£o"),
                    "nome_remetente": st.column_config.TextColumn("Remetente"),
                    "nome_aluno": st.column_config.TextColumn("Aluno"),
                    "mensagem": st.column_config.TextColumn("Resultado")
                },
                use_container_width=True,
                height=300
            )
            
            # Detalhes expandidos para cada a√ß√£o
            st.subheader("üîç Detalhes das A√ß√µes")
            
            for idx, acao in df_filtrado.iterrows():
                status_icon = "‚úÖ" if acao['status'] == 'Sucesso' else "‚ùå"
                
                with st.expander(
                    f"{status_icon} [{acao['timestamp'].strftime('%H:%M:%S')}] {acao['acao']} - {acao['nome_remetente']} - R$ {acao['valor']:.2f}",
                    expanded=False
                ):
                    # Informa√ß√µes b√°sicas
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write("**üìã Informa√ß√µes B√°sicas:**")
                        st.write(f"‚Ä¢ **Status:** {acao['status']}")
                        st.write(f"‚Ä¢ **ID Extrato:** {acao.get('id_extrato', 'N/A')}")
                        st.write(f"‚Ä¢ **A√ß√£o:** {acao['acao']}")
                        st.write(f"‚Ä¢ **Resultado:** {acao['mensagem']}")
                    
                    with col2:
                        st.write("**üí∞ Dados do Pagamento:**")
                        st.write(f"‚Ä¢ **Remetente:** {acao['nome_remetente']}")
                        if 'nome_aluno' in acao and pd.notna(acao['nome_aluno']):
                            st.write(f"‚Ä¢ **Aluno:** {acao['nome_aluno']}")
                        st.write(f"‚Ä¢ **Valor:** R$ {acao['valor']:.2f}")
                        st.write(f"‚Ä¢ **Timestamp:** {acao['timestamp']}")
                    
                    # Detalhes t√©cnicos se dispon√≠veis
                    if 'detalhes' in acao and acao['detalhes']:
                        st.write("**üîß Detalhes T√©cnicos:**")
                        
                        detalhes = acao['detalhes']
                        if isinstance(detalhes, dict):
                            for key, value in detalhes.items():
                                if key == 'erro_completo' and isinstance(value, dict):
                                    st.write(f"‚Ä¢ **Erro Completo:**")
                                    st.json(value)
                                elif key == 'debug_info' and isinstance(value, list):
                                    st.write(f"‚Ä¢ **Logs de Debug:**")
                                    st.code("\n".join(value), language="text")
                                else:
                                    st.write(f"‚Ä¢ **{key}:** {value}")
                        else:
                            st.write(detalhes)
            
            # Bot√µes de a√ß√£o
            st.markdown("---")
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if st.button("üóëÔ∏è Limpar Hist√≥rico"):
                    st.session_state.historico_acoes = []
                    st.success("Hist√≥rico limpo!")
                    st.rerun()
            
            with col2:
                if st.button("üìä Exportar Hist√≥rico"):
                    import json
                    historico_json = json.dumps(st.session_state.historico_acoes, default=str, indent=2)
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    
                    st.download_button(
                        label="üíæ Download JSON",
                        data=historico_json,
                        file_name=f"historico_extrato_{timestamp}.json",
                        mime="application/json"
                    )
            
            with col3:
                if st.button("üîÑ Recarregar Dados"):
                    carregar_dados_extrato()
                    st.rerun()
                    
        else:
            st.info("Nenhuma a√ß√£o realizada ainda")
            st.markdown("""
            **‚ÑπÔ∏è Como usar o hist√≥rico:**
            
            1. Execute algumas a√ß√µes nas abas anteriores
            2. O hist√≥rico registrar√° todos os detalhes
            3. Use os filtros para encontrar a√ß√µes espec√≠ficas
            4. Expanda os detalhes para ver logs completos
            5. Exporte o hist√≥rico para an√°lise posterior
            """)

def processar_acoes_com_responsavel():
    """Processa a√ß√µes selecionadas para registros com respons√°vel com debugging completo"""
    registros = st.session_state.get('registros_configurados', [])
    
    # Debug inicial mais detalhado
    st.write(f"üîç **DEBUG:** Encontrados {len(registros)} registros no session_state")
    if registros:
        for i, reg in enumerate(registros):
            tipo = 'M√∫ltiplo' if reg.get('configuracao_multipla') else 'Simples'
            st.write(f"   Registro {i+1}: ID={reg.get('id_extrato')}, Tipo={tipo}")
            
            # Detalhes adicionais
            if reg.get('configuracao_multipla'):
                detalhes = reg.get('pagamentos_detalhados', [])
                st.write(f"      - {len(detalhes)} pagamentos detalhados")
                for j, det in enumerate(detalhes):
                    st.write(f"        {j+1}. Aluno: {det.get('id_aluno')}, Tipo: {det.get('tipo_pagamento')}, Valor: R$ {det.get('valor', 0):.2f}")
            elif reg.get('configuracao_simples'):
                st.write(f"      - Aluno: {reg.get('id_aluno')}, Tipo: {reg.get('tipo_pagamento')}, Valor: R$ {reg.get('valor', 0):.2f}")
    else:
        st.write("   ‚ùå Nenhuma configura√ß√£o encontrada no session_state")
        
        # Debug adicional: mostrar tudo que est√° no session state
        st.write("üîç **DEBUG SESSION STATE:**")
        for key, value in st.session_state.items():
            if 'registros' in key or 'config' in key:
                st.write(f"   - {key}: {type(value)} = {value}")
    
    if not registros:
        st.warning("‚ùå Nenhum registro configurado encontrado!")
        st.info("üìã **Instru√ß√µes:**")
        st.info("1. **Processamento R√°pido:** Marque os checkboxes 'Processar este registro' nos expanders")
        st.info("2. **Configura√ß√£o Avan√ßada:** Clique em 'Configurar' e finalize a configura√ß√£o")
        return
    
    # Container para logs em tempo real
    log_container = st.container()
    progress_bar = st.progress(0)
    status_container = st.empty()
    
    # Inicializar logs
    logs = []
    sucessos = 0
    erros = 0
    
    def log_debug(mensagem: str, tipo: str = "INFO"):
        """Adiciona log e exibe em tempo real"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] [{tipo}] {mensagem}"
        logs.append(log_entry)
        print(log_entry)  # Tamb√©m exibe no terminal
        
        # Atualizar interface
        with log_container:
            st.text_area("üìã Logs de Processamento:", 
                        value="\n".join(logs[-10:]),  # √öltimas 10 linhas
                        height=200, 
                        key=f"logs_{len(logs)}")
    
    log_debug(f"üöÄ INICIANDO PROCESSAMENTO DE {len(registros)} REGISTROS")
    
    for i, item in enumerate(registros):
        progress = (i + 1) / len(registros)
        progress_bar.progress(progress)
        
        # Log detalhado de cada item
        registro = item.get('registro', {})
        log_debug(f"üìÑ PROCESSANDO ITEM {i+1}/{len(registros)}")
        log_debug(f"   - ID Extrato: {item.get('id_extrato')}")
        log_debug(f"   - ID Respons√°vel: {item.get('id_responsavel')}")
        
        # Verificar tipo de configura√ß√£o
        if item.get('configuracao_simples'):
            log_debug(f"   - Modo: Configura√ß√£o Simples")
            log_debug(f"   - ID Aluno: {item.get('id_aluno')}")
            log_debug(f"   - Tipo Pagamento: {item.get('tipo_pagamento')}")
            log_debug(f"   - Valor: R$ {item.get('valor', 0):.2f}")
        elif item.get('configuracao_multipla'):
            log_debug(f"   - Modo: Configura√ß√£o M√∫ltipla")
            log_debug(f"   - Total Pagamentos: {len(item.get('pagamentos_detalhados', []))}")
            log_debug(f"   - Valor Total: R$ {item.get('valor_total', 0):.2f}")
        
        log_debug(f"   - Nome Remetente: {registro.get('nome_remetente')}")
        
        status_container.write(f"üîÑ Processando {i+1}/{len(registros)}: {registro.get('nome_remetente', 'N/A')}")
        
        try:
            if item.get('configuracao_simples'):
                # PROCESSAMENTO SIMPLES (1 pagamento)
                log_debug(f"üîç ETAPA 1: Processamento simples")
                
                # Verificar se tem mensalidade associada
                id_mensalidade = item.get('id_mensalidade') if item.get('tipo_pagamento') == 'mensalidade' else None
                
                resultado = registrar_pagamento_do_extrato(
                    id_extrato=item['id_extrato'],
                    id_responsavel=item['id_responsavel'],
                    id_aluno=item['id_aluno'],
                    tipo_pagamento=item['tipo_pagamento'],
                    id_mensalidade=id_mensalidade
                )
                
                log_debug(f"   - Resultado da fun√ß√£o: {resultado}")
                
                if resultado.get('success'):
                    log_debug(f"‚úÖ SUCESSO: {resultado.get('message', 'Pagamento registrado')}", "SUCCESS")
                    sucessos += 1
                    
                    # Registrar no hist√≥rico
                    historico_entry = {
                        'timestamp': datetime.now(),
                        'id_extrato': item['id_extrato'],
                        'acao': f"Registrar como {item['tipo_pagamento']} (Simples)",
                        'nome_remetente': registro.get('nome_remetente'),
                        'valor': item.get('valor'),
                        'status': 'Sucesso',
                        'mensagem': resultado.get('message', 'Registrado com sucesso'),
                        'detalhes': {
                            'id_pagamento': resultado.get('id_pagamento'),
                            'id_aluno': item['id_aluno'],
                            'tipo_pagamento': item['tipo_pagamento'],
                            'debug_info': resultado.get('debug_info', [])
                        }
                    }
                else:
                    erro_msg = resultado.get('error', 'Erro desconhecido')
                    log_debug(f"‚ùå ERRO: {erro_msg}", "ERROR")
                    erros += 1
                    
                    historico_entry = {
                        'timestamp': datetime.now(),
                        'id_extrato': item['id_extrato'],
                        'acao': f"Registrar como {item['tipo_pagamento']} (Simples)",
                        'nome_remetente': registro.get('nome_remetente'),
                        'valor': item.get('valor'),
                        'status': 'Erro',
                        'mensagem': erro_msg,
                        'detalhes': {
                            'erro_completo': resultado,
                            'debug_info': resultado.get('debug_info', [])
                        }
                    }
            
            elif item.get('configuracao_multipla'):
                # PROCESSAMENTO M√öLTIPLO (v√°rios pagamentos)
                log_debug(f"üîç ETAPA 1: Processamento m√∫ltiplo")
                
                resultado = registrar_pagamentos_multiplos_do_extrato(
                    id_extrato=item['id_extrato'],
                    id_responsavel=item['id_responsavel'],
                    pagamentos_detalhados=item['pagamentos_detalhados']
                )
                
                log_debug(f"   - Resultado da fun√ß√£o: {resultado}")
                
                if resultado.get('success'):
                    total_criados = resultado.get('total_pagamentos_criados', 0)
                    tipos = ', '.join(resultado.get('tipos_pagamento', []))
                    log_debug(f"‚úÖ SUCESSO: {total_criados} pagamentos criados ({tipos})", "SUCCESS")
                    sucessos += 1
                    
                    # Registrar no hist√≥rico
                    historico_entry = {
                        'timestamp': datetime.now(),
                        'id_extrato': item['id_extrato'],
                        'acao': f"Registrar m√∫ltiplos pagamentos ({total_criados})",
                        'nome_remetente': registro.get('nome_remetente'),
                        'valor': item.get('valor_total'),
                        'status': 'Sucesso',
                        'mensagem': resultado.get('message', f'{total_criados} pagamentos registrados'),
                        'detalhes': {
                            'pagamentos_criados': resultado.get('pagamentos_criados', []),
                            'tipos_pagamento': resultado.get('tipos_pagamento', []),
                            'alunos_beneficiarios': resultado.get('alunos_beneficiarios', []),
                            'total_pagamentos': total_criados,
                            'valor_total': resultado.get('valor_total_processado'),
                            'debug_info': resultado.get('debug_info', [])
                        }
                    }
                else:
                    erro_msg = resultado.get('error', 'Erro desconhecido')
                    log_debug(f"‚ùå ERRO: {erro_msg}", "ERROR")
                    erros += 1
                    
                    historico_entry = {
                        'timestamp': datetime.now(),
                        'id_extrato': item['id_extrato'],
                        'acao': f"Registrar m√∫ltiplos pagamentos",
                        'nome_remetente': registro.get('nome_remetente'),
                        'valor': item.get('valor_total'),
                        'status': 'Erro',
                        'mensagem': erro_msg,
                        'detalhes': {
                            'erro_completo': resultado,
                            'pagamentos_tentados': item.get('pagamentos_detalhados', []),
                            'debug_info': resultado.get('debug_info', [])
                        }
                    }
            else:
                log_debug(f"‚ùå ERRO: Configura√ß√£o inv√°lida - nem simples nem m√∫ltipla", "ERROR")
                erros += 1
                continue
            
            st.session_state.historico_acoes.append(historico_entry)
            log_debug(f"üìù Entrada adicionada ao hist√≥rico")
            
        except Exception as e:
            erro_msg = f"Exce√ß√£o durante processamento: {str(e)}"
            log_debug(f"‚ùå EXCE√á√ÉO: {erro_msg}", "EXCEPTION")
            erros += 1
            
            # Registrar exce√ß√£o no hist√≥rico
            historico_entry = {
                'timestamp': datetime.now(),
                'id_extrato': item.get('id_extrato', 'N/A'),
                'acao': f"Processamento (exce√ß√£o)",
                'nome_remetente': registro.get('nome_remetente', 'N/A'),
                'valor': item.get('valor', item.get('valor_total', 0)),
                'status': 'Exce√ß√£o',
                'mensagem': erro_msg,
                'detalhes': {
                    'item_completo': item,
                    'exception': str(e)
                }
            }
            st.session_state.historico_acoes.append(historico_entry)
        
        log_debug(f"üîÑ Item {i+1} processado. Status atual: {sucessos} sucessos, {erros} erros")
        log_debug("‚îÄ" * 80)
    
    # FINALIZA√á√ÉO
    log_debug(f"üèÅ PROCESSAMENTO FINALIZADO")
    log_debug(f"üìä ESTAT√çSTICAS FINAIS:")
    log_debug(f"   - Total processados: {len(registros)}")
    log_debug(f"   - Sucessos: {sucessos}")
    log_debug(f"   - Erros: {erros}")
    log_debug(f"   - Taxa de sucesso: {(sucessos/len(registros)*100):.1f}%")
    
    # Limpar configura√ß√µes
    st.session_state.registros_configurados = []
    log_debug(f"üßπ Configura√ß√µes limpas")
    
    # Mostrar resultado final
    progress_bar.empty()
    status_container.empty()
    
    if sucessos > 0:
        st.success(f"‚úÖ {sucessos} pagamentos registrados com sucesso!")
        print(f"‚úÖ SUCESSO: {sucessos} pagamentos processados")
    if erros > 0:
        st.error(f"‚ùå {erros} erros durante o processamento. Verifique os logs acima para detalhes.")
        print(f"‚ùå ERRO: {erros} falhas no processamento")
    
    # Mostrar logs finais expandidos
    with st.expander("üìã Ver Logs Completos do Processamento", expanded=False):
        st.code("\n".join(logs), language="text")
    
    # Recarregar dados
    log_debug(f"üîÑ Recarregando dados do extrato...")
    carregar_dados_extrato()
    st.rerun()

    # ==========================================================
    # TAB 5: CONSIST√äNCIA
    # ==========================================================
    with tab5:
        st.header("üîç Verifica√ß√£o de Consist√™ncia")
        st.markdown("Ferramentas para verificar e corrigir inconsist√™ncias entre extrato PIX e pagamentos registrados.")
        
        # Controles de per√≠odo
        col1, col2, col3 = st.columns([2, 2, 1])
        
        with col1:
            data_inicio_consist = st.date_input(
                "üìÖ Data In√≠cio",
                value=st.session_state.filtro_data_inicio,
                key="consist_inicio"
            )
        
        with col2:
            data_fim_consist = st.date_input(
                "üìÖ Data Fim", 
                value=st.session_state.filtro_data_fim,
                key="consist_fim"
            )
        
        with col3:
            st.write(" ")  # Espa√ßo
            if st.button("üîç Executar Verifica√ß√£o", type="primary"):
                st.session_state.executar_verificacao = True
        
        # Executar verifica√ß√£o se solicitado
        if st.session_state.get('executar_verificacao', False):
            st.session_state.executar_verificacao = False  # Reset flag
            
            with st.spinner("üîç Analisando consist√™ncia..."):
                # 1. Relat√≥rio de consist√™ncia
                resultado_consistencia = verificar_consistencia_extrato_pagamentos(
                    data_inicio_consist.strftime("%Y-%m-%d"),
                    data_fim_consist.strftime("%Y-%m-%d")
                )
                
                if resultado_consistencia.get("success"):
                    relatorio = resultado_consistencia["relatorio"]
                    
                    # M√©tricas principais
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        st.metric("üìä Total Extrato", relatorio["total_extrato"])
                    
                    with col2:
                        st.metric("üí≥ Pagamentos (Origem Extrato)", relatorio["total_pagamentos_origem_extrato"])
                    
                    with col3:
                        inconsistencias = len(relatorio["inconsistencias"])
                        st.metric("‚ö†Ô∏è Inconsist√™ncias", inconsistencias, delta="Problema" if inconsistencias > 0 else "OK")
                    
                    with col4:
                        novos = relatorio["status_extrato"].get("novo", 0)
                        st.metric("üÜï Status 'Novo'", novos)
                    
                    # Status breakdown
                    st.subheader("üìä Distribui√ß√£o por Status")
                    
                    if relatorio["status_extrato"]:
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            for status, count in relatorio["status_extrato"].items():
                                emoji = "üÜï" if status == "novo" else "‚úÖ" if status == "registrado" else "üö´" if status == "ignorado" else "‚ùì"
                                st.write(f"{emoji} **{status.title()}:** {count} registros")
                        
                        with col2:
                            # Gr√°fico de pizza para status
                            if len(relatorio["status_extrato"]) > 1:
                                df_status = pd.DataFrame(
                                    list(relatorio["status_extrato"].items()),
                                    columns=["Status", "Quantidade"]
                                )
                                
                                fig = px.pie(
                                    df_status, 
                                    values="Quantidade", 
                                    names="Status",
                                    title="Distribui√ß√£o de Status",
                                    color_discrete_map={
                                        "novo": "#ff7f0e",
                                        "registrado": "#2ca02c", 
                                        "ignorado": "#d62728"
                                    }
                                )
                                fig.update_layout(height=300)
                                st.plotly_chart(fig, use_container_width=True)
                    
                    # Inconsist√™ncias encontradas
                    if relatorio["inconsistencias"]:
                        st.subheader("‚ö†Ô∏è Inconsist√™ncias Encontradas")
                        st.error(f"Foram encontradas {len(relatorio['inconsistencias'])} inconsist√™ncias que precisam ser corrigidas.")
                        
                        # Mostrar detalhes das inconsist√™ncias
                        for i, inconsistencia in enumerate(relatorio["inconsistencias"]):
                            with st.expander(f"‚ùå Inconsist√™ncia {i+1}: {inconsistencia['nome_remetente']} - R$ {inconsistencia['valor']:.2f}"):
                                st.write(f"**üÜî ID Extrato:** {inconsistencia['id_extrato']}")
                                st.write(f"**üìÖ Data:** {inconsistencia['data']}")
                                st.write(f"**üí∞ Valor:** R$ {inconsistencia['valor']:.2f}")
                                st.write(f"**üîÑ Status no Extrato:** novo (deveria ser 'registrado')")
                                st.write(f"**üí≥ Pagamentos Encontrados:** {', '.join(inconsistencia['pagamentos_encontrados'])}")
                        
                        # Bot√£o para corrigir automaticamente
                        st.markdown("---")
                        if st.button("üîß CORRIGIR AUTOMATICAMENTE", type="primary"):
                            with st.spinner("Aplicando corre√ß√µes..."):
                                resultado_correcao = verificar_e_corrigir_extrato_duplicado()
                                
                                if resultado_correcao.get("success"):
                                    corrigidos = resultado_correcao.get("corrigidos", 0)
                                    if corrigidos > 0:
                                        st.success(f"‚úÖ {corrigidos} registros corrigidos com sucesso!")
                                        
                                        # Mostrar detalhes das corre√ß√µes
                                        detalhes = resultado_correcao.get("detalhes", [])
                                        if detalhes:
                                            st.subheader("‚úÖ Corre√ß√µes Aplicadas")
                                            for correcao in detalhes:
                                                st.write(f"‚Ä¢ **{correcao['nome_remetente']}** - R$ {correcao['valor']:.2f}")
                                                st.write(f"  üìÖ {correcao['data_pagamento']} | üÜî Extrato: {correcao['id_extrato']} | üí≥ Pagamento: {correcao['id_pagamento_encontrado']}")
                                        
                                        st.info("üîÑ Execute a verifica√ß√£o novamente para confirmar que as inconsist√™ncias foram resolvidas.")
                                    else:
                                        st.warning("‚ö†Ô∏è Nenhuma corre√ß√£o foi aplicada.")
                                else:
                                    st.error(f"‚ùå Erro na corre√ß√£o: {resultado_correcao.get('error')}")
                    
                    else:
                        st.success("‚úÖ Nenhuma inconsist√™ncia encontrada! O banco de dados est√° consistente.")
                        
                        if relatorio["total_extrato"] > 0:
                            st.info(f"üìä Todos os {relatorio['total_extrato']} registros do extrato est√£o com status correto.")
                
                else:
                    st.error(f"‚ùå Erro na verifica√ß√£o: {resultado_consistencia.get('error')}")
        
        # Informa√ß√µes sobre a funcionalidade
        if not st.session_state.get('executar_verificacao', False):
            st.markdown("---")
            st.subheader("‚ÑπÔ∏è Sobre a Verifica√ß√£o de Consist√™ncia")
            
            st.markdown("""
            **üéØ O que esta ferramenta faz:**
            
            1. **Analisa** registros do extrato PIX com status 'novo'
            2. **Verifica** se j√° existem pagamentos correspondentes na tabela de pagamentos
            3. **Identifica** registros duplicados ou inconsistentes
            4. **Corrige** automaticamente o status para 'registrado' quando apropriado
            
            **üîç Crit√©rios de Identifica√ß√£o:**
            
            - Mesmo **respons√°vel**, **valor** e **data de pagamento**
            - Pagamento com flag `origem_extrato = true`
            - Refer√™ncia ao ID do extrato original (`id_extrato_origem`)
            
            **‚ö†Ô∏è Quando usar:**
            
            - Ap√≥s importar novos dados do extrato PIX
            - Quando notar registros duplicados na interface
            - Como manuten√ß√£o peri√≥dica do banco de dados
            - Antes de processar pagamentos em lote
            """)
            
            # Bot√£o de verifica√ß√£o r√°pida
            if st.button("üöÄ Verifica√ß√£o R√°pida (√öltimos 30 dias)", type="secondary"):
                st.session_state.executar_verificacao = True
                st.rerun()

# ==========================================================
# üöÄ EXECUTAR APLICA√á√ÉO
# ==========================================================

if __name__ == "__main__":
    main() 