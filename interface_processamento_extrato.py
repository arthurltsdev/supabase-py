#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üéØ INTERFACE DE PROCESSAMENTO DO EXTRATO PIX - VERS√ÉO OTIMIZADA
==============================================================

Interface eficiente para processar pagamentos do extrato PIX,
cadastrar respons√°veis e vincular com alunos.

Vers√£o focada nos requisitos espec√≠ficos do usu√°rio.
"""

import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta
import json
from typing import Dict, List, Optional

# Importar fun√ß√µes otimizadas
from funcoes_extrato_otimizadas import (
    listar_extrato_com_sem_responsavel,
    buscar_alunos_para_dropdown,
    listar_responsaveis_aluno,
    listar_alunos_vinculados_responsavel,
    cadastrar_responsavel_e_vincular,
    registrar_pagamento_do_extrato,
    registrar_pagamentos_multiplos_do_extrato,
    atualizar_aluno_campos,
    atualizar_vinculo_responsavel,
    obter_estatisticas_extrato,
    verificar_responsavel_existe
)

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Processamento Extrato PIX",
    page_icon="üí∞",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS customizado
st.markdown("""
<style>
    .stDataFrame {font-size: 12px;}
    .metric-card {
        background: linear-gradient(90deg, #1f77b4, #2ca02c);
        padding: 1rem;
        border-radius: 0.5rem;
        color: white;
        text-align: center;
    }
    .success-card {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        padding: 10px;
        margin: 10px 0;
    }
    .error-card {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 5px;
        padding: 10px;
        margin: 10px 0;
    }
    .info-card {
        background-color: #d1ecf1;
        border: 1px solid #bee5eb;
        border-radius: 5px;
        padding: 10px;
        margin: 10px 0;
    }
</style>
""", unsafe_allow_html=True)

# ==========================================================
# üîß FUN√á√ïES AUXILIARES DA INTERFACE
# ==========================================================

def init_session_state():
    """Inicializa o estado da sess√£o"""
    defaults = {
        'acoes_selecionadas': {},
        'historico_acoes': [],
        'filtro_data_inicio': datetime.now() - timedelta(days=30),
        'filtro_data_fim': datetime.now(),
        'filtro_status': 'novo',
        'dados_extrato': None,
        'last_update': None
    }
    
    for key, value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = value

def carregar_dados_extrato():
    """Carrega dados do extrato com filtros aplicados"""
    with st.spinner("Carregando dados do extrato..."):
        resultado = listar_extrato_com_sem_responsavel(
            data_inicio=st.session_state.filtro_data_inicio.strftime("%Y-%m-%d"),
            data_fim=st.session_state.filtro_data_fim.strftime("%Y-%m-%d")
        )
        
        if resultado.get("success"):
            st.session_state.dados_extrato = resultado
            st.session_state.last_update = datetime.now()
            return True
        else:
            st.error(f"Erro ao carregar dados: {resultado.get('error')}")
            return False

def mostrar_modal_pagamento_avancado(registro: Dict, id_responsavel: str) -> Optional[Dict]:
    """
    Modal para configurar pagamento avan√ßado (m√∫ltiplos tipos/alunos)
    
    Args:
        registro: Dados do registro do extrato
        id_responsavel: ID do respons√°vel
        
    Returns:
        Dict com configura√ß√£o dos pagamentos ou None se cancelado
    """
    
    # Buscar alunos vinculados ao respons√°vel
    alunos_vinculados = listar_alunos_vinculados_responsavel(id_responsavel)
    
    if not alunos_vinculados.get("success") or not alunos_vinculados.get("alunos"):
        st.error("‚ùå Nenhum aluno encontrado vinculado a este respons√°vel!")
        return None
    
    alunos = alunos_vinculados["alunos"]
    valor_total = float(registro.get("valor", 0))
    
    # Cabe√ßalho mais destacado
    st.markdown(f"""
    <div class="info-card">
        <h3>‚öôÔ∏è Configura√ß√£o Avan√ßada de Pagamento</h3>
        <p><strong>üí∞ Valor Total:</strong> R$ {valor_total:.2f}</p>
        <p><strong>üë§ Remetente:</strong> {registro.get('nome_remetente')}</p>
        <p><strong>üìÖ Data:</strong> {registro.get('data_pagamento')}</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Container para os pagamentos configurados
    if 'pagamentos_config' not in st.session_state:
        st.session_state.pagamentos_config = [{}]  # Come√ßar com 1 pagamento
    
    # Cabe√ßalho e controles
    col1, col2, col3 = st.columns([2, 1, 1])
    
    with col1:
        st.markdown("### üìã Configure cada pagamento individual:")
    
    with col2:
        if st.button("‚ûï Adicionar Pagamento", type="secondary"):
            st.session_state.pagamentos_config.append({})
            st.rerun()
    
    with col3:
        if st.button("‚ùå Cancelar Configura√ß√£o", type="secondary"):
            if 'pagamentos_config' in st.session_state:
                del st.session_state.pagamentos_config
            return None
    
    # Lista para armazenar as configura√ß√µes
    pagamentos_detalhados = []
    valor_total_configurado = 0.0
    
    # Criar formul√°rio para cada pagamento
    for i, config in enumerate(st.session_state.pagamentos_config):
        # Usar container com separador visual em vez de expander
        st.markdown(f"### üí∞ Pagamento {i+1}")
        
        # Container para este pagamento
        container = st.container()
        
        with container:
            col1, col2, col3 = st.columns([2, 2, 1])
            
            with col1:
                # Sele√ß√£o do aluno
                opcoes_alunos = {aluno["label"]: aluno for aluno in alunos}
                aluno_selecionado = st.selectbox(
                    "üë®‚Äçüéì Aluno:",
                    options=list(opcoes_alunos.keys()),
                    key=f"aluno_pag_{i}",
                    index=list(opcoes_alunos.keys()).index(config.get("aluno_label")) if config.get("aluno_label") in opcoes_alunos else 0
                )
                
                aluno_data = opcoes_alunos[aluno_selecionado]
                
            with col2:
                # Tipo de pagamento
                tipo_pagamento = st.selectbox(
                    "üí≥ Tipo:",
                    ["matricula", "mensalidade", "material", "fardamento", "evento", "outro"],
                    key=f"tipo_pag_{i}",
                    index=["matricula", "mensalidade", "material", "fardamento", "evento", "outro"].index(config.get("tipo_pagamento")) if config.get("tipo_pagamento") else 0
                )
            
            with col3:
                # Bot√£o para remover (s√≥ se houver mais de 1)
                if len(st.session_state.pagamentos_config) > 1:
                    if st.button("üóëÔ∏è Remover", key=f"remove_pag_{i}"):
                        st.session_state.pagamentos_config.pop(i)
                        st.rerun()
            
            # Valor do pagamento
            col1, col2 = st.columns(2)
            
            with col1:
                # Se √© o √∫ltimo pagamento, calcular valor restante automaticamente
                if i == len(st.session_state.pagamentos_config) - 1 and len(st.session_state.pagamentos_config) > 1:
                    valor_restante = valor_total - valor_total_configurado
                    valor_pagamento = st.number_input(
                        "üí∞ Valor:",
                        min_value=0.01,
                        max_value=valor_restante,
                        value=max(0.01, valor_restante),
                        step=0.01,
                        key=f"valor_pag_{i}",
                        help=f"Valor restante: R$ {valor_restante:.2f}"
                    )
                else:
                    valor_pagamento = st.number_input(
                        "üí∞ Valor:",
                        min_value=0.01,
                        max_value=valor_total,
                        value=config.get("valor", valor_total if len(st.session_state.pagamentos_config) == 1 else 0.01),
                        step=0.01,
                        key=f"valor_pag_{i}"
                    )
            
            with col2:
                observacoes = st.text_input(
                    "üìù Observa√ß√µes:",
                    value=config.get("observacoes", ""),
                    key=f"obs_pag_{i}"
                )
            
            # Atualizar configura√ß√£o
            st.session_state.pagamentos_config[i] = {
                "aluno_label": aluno_selecionado,
                "aluno_data": aluno_data,
                "tipo_pagamento": tipo_pagamento,
                "valor": valor_pagamento,
                "observacoes": observacoes
            }
            
            # Adicionar aos pagamentos detalhados
            pagamentos_detalhados.append({
                "id_aluno": aluno_data["id"],
                "nome_aluno": aluno_data["nome"],
                "tipo_pagamento": tipo_pagamento,
                "valor": valor_pagamento,
                "observacoes": observacoes
            })
            
            valor_total_configurado += valor_pagamento
        
        # Separador visual entre pagamentos
        if i < len(st.session_state.pagamentos_config) - 1:
            st.markdown("---")
    
    # Resumo e valida√ß√£o
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("üí∞ Valor Total", f"R$ {valor_total:.2f}")
    
    with col2:
        st.metric("üìä Configurado", f"R$ {valor_total_configurado:.2f}")
        
    with col3:
        diferenca = valor_total - valor_total_configurado
        cor = "normal" if abs(diferenca) < 0.01 else "inverse"
        st.metric("‚öñÔ∏è Diferen√ßa", f"R$ {diferenca:.2f}", delta_color=cor)
    
    # Valida√ß√µes
    valores_ok = abs(diferenca) < 0.01
    
    if not valores_ok:
        st.error(f"‚ùå Os valores n√£o conferem! Diferen√ßa: R$ {diferenca:.2f}")
        return None
    
    # Verificar duplicatas de aluno+tipo
    combinacoes = set()
    for pag in pagamentos_detalhados:
        combinacao = (pag["id_aluno"], pag["tipo_pagamento"])
        if combinacao in combinacoes:
            st.error(f"‚ùå Combina√ß√£o duplicada: {pag['nome_aluno']} + {pag['tipo_pagamento']}")
            return None
        combinacoes.add(combinacao)
    
    # Bot√µes de a√ß√£o
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("‚úÖ CONFIRMAR PAGAMENTOS", type="primary", disabled=not valores_ok):
            # Limpar estado
            del st.session_state.pagamentos_config
            
            return {
                "configuracao_multipla": True,
                "pagamentos_detalhados": pagamentos_detalhados,
                "valor_total": valor_total_configurado,
                "total_pagamentos": len(pagamentos_detalhados)
            }
    
    with col2:
        if st.button("üîÑ RESETAR"):
            st.session_state.pagamentos_config = [{}]
            st.rerun()
    
    with col3:
        if st.button("‚ùå CANCELAR"):
            if 'pagamentos_config' in st.session_state:
                del st.session_state.pagamentos_config
            return None
    
    return None

def mostrar_formulario_responsavel(nome_sugerido: str = ""):
    """Formul√°rio para cadastrar novo respons√°vel"""
    with st.form("form_novo_responsavel", clear_on_submit=True):
        st.subheader("üìù Cadastrar Novo Respons√°vel")
        
        col1, col2 = st.columns(2)
        
        with col1:
            nome = st.text_input("Nome Completo*", value=nome_sugerido, key="resp_nome")
            cpf = st.text_input("CPF", key="resp_cpf")
            telefone = st.text_input("Telefone", key="resp_telefone")
        
        with col2:
            email = st.text_input("Email", key="resp_email")
            endereco = st.text_area("Endere√ßo", key="resp_endereco")
            tipo_relacao = st.selectbox(
                "Tipo de Rela√ß√£o*",
                ["pai", "m√£e", "av√¥", "av√≥", "tio", "tia", "respons√°vel legal", "outro"],
                key="resp_tipo"
            )
        
        responsavel_financeiro = st.checkbox("√â respons√°vel financeiro", value=True, key="resp_financeiro")
        
        # Busca de alunos
        st.subheader("üéì Vincular com Aluno")
        busca_aluno = st.text_input("üîç Digite o nome do aluno", key="busca_aluno")
        
        aluno_selecionado = None
        if busca_aluno and len(busca_aluno) >= 2:
            resultado_busca = buscar_alunos_para_dropdown(busca_aluno)
            if resultado_busca.get("success") and resultado_busca.get("opcoes"):
                opcoes = {op["label"]: op for op in resultado_busca["opcoes"]}
                aluno_escolhido = st.selectbox("Selecione o aluno:", options=list(opcoes.keys()), key="select_aluno")
                aluno_selecionado = opcoes[aluno_escolhido]
        
        submitted = st.form_submit_button("üíæ Cadastrar e Vincular", type="primary")
        
        if submitted:
            if not nome:
                st.error("Nome √© obrigat√≥rio!")
                return None
            
            if not aluno_selecionado:
                st.error("Selecione um aluno para vincular!")
                return None
            
            # Verificar se respons√°vel j√° existe
            check_resp = verificar_responsavel_existe(nome)
            if check_resp.get("existe"):
                st.warning("‚ö†Ô∏è J√° existe respons√°vel com nome similar!")
                for resp in check_resp.get("responsaveis_similares", []):
                    st.write(f"- {resp['nome']} (ID: {resp['id']})")
                
                if st.button("Continuar mesmo assim"):
                    pass
                else:
                    return None
            
            # Cadastrar respons√°vel e vincular
            dados_responsavel = {
                "nome": nome,
                "cpf": cpf if cpf else None,
                "telefone": telefone if telefone else None,
                "email": email if email else None,
                "endereco": endereco if endereco else None
            }
            
            resultado = cadastrar_responsavel_e_vincular(
                dados_responsavel=dados_responsavel,
                id_aluno=aluno_selecionado["id"],
                tipo_relacao=tipo_relacao,
                responsavel_financeiro=responsavel_financeiro
            )
            
            if resultado.get("success"):
                st.success(f"‚úÖ Respons√°vel {nome} cadastrado e vinculado com {aluno_selecionado['nome']}!")
                return resultado
            else:
                st.error(f"‚ùå Erro: {resultado.get('error')}")
                return None

def mostrar_informacoes_editaveis_aluno(aluno_data: Dict):
    """Mostra informa√ß√µes edit√°veis do aluno"""
    st.subheader(f"üìö Informa√ß√µes de {aluno_data['nome']}")
    
    # Buscar dados completos do aluno
    aluno_response = supabase.table("alunos").select("""
        id, nome, turno, data_nascimento, dia_vencimento, 
        data_matricula, valor_mensalidade, mensalidades_geradas,
        turmas!inner(nome_turma)
    """).eq("id", aluno_data['id']).execute()
    
    if not aluno_response.data:
        st.error("‚ùå Dados do aluno n√£o encontrados")
        return
    
    aluno_completo = aluno_response.data[0]
    
    # Layout em colunas para melhor organiza√ß√£o
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üìã Dados B√°sicos:**")
        st.write(f"‚Ä¢ **Nome:** {aluno_completo['nome']}")
        st.write(f"‚Ä¢ **Turma:** {aluno_completo['turmas']['nome_turma']}")
        st.write(f"‚Ä¢ **Data Nascimento:** {aluno_completo.get('data_nascimento', 'N√£o informado')}")
        st.write(f"‚Ä¢ **Data Matr√≠cula:** {aluno_completo.get('data_matricula', 'N√£o informado')}")
    
    with col2:
        st.markdown("**üí∞ Dados Financeiros:**")
        st.write(f"‚Ä¢ **Valor Mensalidade:** R$ {aluno_completo.get('valor_mensalidade', 0):.2f}")
        st.write(f"‚Ä¢ **Dia Vencimento:** {aluno_completo.get('dia_vencimento', 'N√£o definido')}")
        st.write(f"‚Ä¢ **Turno:** {aluno_completo.get('turno', 'N√£o informado')}")
    
    # Formul√°rio de edi√ß√£o
    st.markdown("---")
    st.markdown("### ‚úèÔ∏è Editar Informa√ß√µes")
    
    with st.form(f"edit_aluno_{aluno_data['id']}"):
        col1, col2 = st.columns(2)
        
        with col1:
            novo_valor_mensalidade = st.number_input(
                "üí∞ Valor da Mensalidade",
                min_value=0.0,
                step=10.0,
                value=float(aluno_completo.get('valor_mensalidade', 0)),
                key=f"valor_mens_{aluno_data['id']}"
            )
            
            novo_dia_vencimento = st.selectbox(
                "üìÖ Dia de Vencimento",
                options=list(range(1, 32)),
                index=int(aluno_completo.get('dia_vencimento', 5)) - 1 if aluno_completo.get('dia_vencimento') else 4,
                key=f"dia_venc_{aluno_data['id']}"
            )
        
        with col2:
            novo_turno = st.selectbox(
                "üïê Turno",
                options=["Matutino", "Vespertino", "Integral"],
                index=["Matutino", "Vespertino", "Integral"].index(aluno_completo.get('turno', 'Matutino')) if aluno_completo.get('turno') in ["Matutino", "Vespertino", "Integral"] else 0,
                key=f"turno_{aluno_data['id']}"
            )
            
            nova_data_nascimento = st.date_input(
                "üéÇ Data de Nascimento",
                value=pd.to_datetime(aluno_completo.get('data_nascimento')).date() if aluno_completo.get('data_nascimento') else None,
                key=f"data_nasc_{aluno_data['id']}"
            )
        
        if st.form_submit_button("üíæ Salvar Altera√ß√µes", type="primary"):
            campos_update = {
                "valor_mensalidade": novo_valor_mensalidade,
                "dia_vencimento": str(novo_dia_vencimento),
                "turno": novo_turno,
                "data_nascimento": nova_data_nascimento.isoformat() if nova_data_nascimento else None
            }
            
            resultado = atualizar_aluno_campos(aluno_data["id"], campos_update)
            
            if resultado.get("success"):
                st.success("‚úÖ Informa√ß√µes do aluno atualizadas!")
                st.rerun()
            else:
                st.error(f"‚ùå Erro: {resultado.get('error')}")

def mostrar_gestao_responsaveis_aluno(id_aluno: str, nome_aluno: str):
    """Interface para gerenciar respons√°veis de um aluno"""
    st.subheader(f"üë• Respons√°veis de {nome_aluno}")
    
    # Listar respons√°veis atuais
    responsaveis = listar_responsaveis_aluno(id_aluno)
    
    if responsaveis.get("success") and responsaveis.get("responsaveis"):
        df_resp = pd.DataFrame(responsaveis["responsaveis"])
        
        # Mostrar em formato edit√°vel
        edited_df = st.data_editor(
            df_resp[["nome", "tipo_relacao", "responsavel_financeiro", "telefone", "email"]],
            column_config={
                "tipo_relacao": st.column_config.SelectboxColumn(
                    "Tipo de Rela√ß√£o",
                    options=["pai", "m√£e", "av√¥", "av√≥", "tio", "tia", "respons√°vel legal", "outro"]
                ),
                "responsavel_financeiro": st.column_config.CheckboxColumn("Resp. Financeiro")
            },
            disabled=["nome", "telefone", "email"],
            use_container_width=True,
            key=f"edit_resp_{id_aluno}"
        )
        
        # Bot√µes de a√ß√£o
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üíæ Salvar Altera√ß√µes", key=f"save_{id_aluno}"):
                # Processar altera√ß√µes
                for idx, row in edited_df.iterrows():
                    if idx < len(df_resp):
                        id_vinculo = df_resp.iloc[idx]["id_vinculo"]
                        resultado = atualizar_vinculo_responsavel(
                            id_vinculo=id_vinculo,
                            tipo_relacao=row["tipo_relacao"],
                            responsavel_financeiro=row["responsavel_financeiro"]
                        )
                        if not resultado.get("success"):
                            st.error(f"Erro ao atualizar: {resultado.get('error')}")
                
                st.success("‚úÖ Altera√ß√µes salvas!")
                st.rerun()
        
        with col2:
            if st.button("‚ûï Adicionar Respons√°vel", key=f"add_{id_aluno}"):
                st.session_state[f"show_add_resp_{id_aluno}"] = True
    
    else:
        st.info("Nenhum respons√°vel vinculado a este aluno")
        if st.button("‚ûï Adicionar Primeiro Respons√°vel", key=f"add_first_{id_aluno}"):
            st.session_state[f"show_add_resp_{id_aluno}"] = True
    
    # Formul√°rio para adicionar respons√°vel
    if st.session_state.get(f"show_add_resp_{id_aluno}", False):
        st.markdown("---")
        resultado = mostrar_formulario_responsavel()
        if resultado:
            st.session_state[f"show_add_resp_{id_aluno}"] = False
            st.rerun()

# ==========================================================
# üé® INTERFACE PRINCIPAL
# ==========================================================

def main():
    """Fun√ß√£o principal da interface"""
    
    # Inicializar estado
    init_session_state()
    
    # Header
    st.title("üí∞ Processamento do Extrato PIX")
    st.markdown("Interface otimizada para processar pagamentos e gerenciar respons√°veis")
    
    # Sidebar com filtros e estat√≠sticas
    with st.sidebar:
        st.header("üîç Filtros")
        
        # Filtros de data
        data_inicio = st.date_input(
            "Data In√≠cio",
            value=st.session_state.filtro_data_inicio,
            key="filtro_inicio"
        )
        
        data_fim = st.date_input(
            "Data Fim",
            value=st.session_state.filtro_data_fim,
            key="filtro_fim"
        )
        
        if st.button("üîÑ Atualizar Dados", type="primary"):
            st.session_state.filtro_data_inicio = data_inicio
            st.session_state.filtro_data_fim = data_fim
            if carregar_dados_extrato():
                st.success("‚úÖ Dados atualizados!")
                st.rerun()
        
        # Estat√≠sticas
        st.markdown("---")
        st.header("üìä Estat√≠sticas")
        
        stats_resultado = obter_estatisticas_extrato(
            data_inicio.strftime("%Y-%m-%d"),
            data_fim.strftime("%Y-%m-%d")
        )
        
        if stats_resultado.get("success"):
            stats = stats_resultado["estatisticas"]
            
            st.metric("Total de Registros", stats["total_registros"])
            st.metric("Novos (n√£o processados)", stats["novos"], delta=f"R$ {stats['valor_novos']:,.2f}")
            st.metric("Registrados", stats["registrados"], delta=f"R$ {stats['valor_registrados']:,.2f}")
            st.metric("% Processado", f"{stats['percentual_processado']}%")
            
            # Gr√°fico de progresso
            fig = px.pie(
                values=[stats["novos"], stats["registrados"]],
                names=["Novos", "Registrados"],
                title="Status dos Registros",
                color_discrete_map={"Novos": "#ff7f0e", "Registrados": "#2ca02c"}
            )
            fig.update_layout(height=300)
            st.plotly_chart(fig, use_container_width=True)
    
    # Tabs principais
    tab1, tab2, tab3, tab4 = st.tabs([
        "‚úÖ Pagamentos COM Respons√°vel",
        "‚ùì Pagamentos SEM Respons√°vel", 
        "üë• Gest√£o de Alunos/Respons√°veis",
        "üìã Hist√≥rico"
    ])
    
    # ==========================================================
    # TAB 1: PAGAMENTOS COM RESPONS√ÅVEL
    # ==========================================================
    with tab1:
        st.header("‚úÖ Pagamentos com Respons√°vel Cadastrado")
        
        if st.session_state.dados_extrato is None:
            st.info("üëÜ Use os filtros na barra lateral para carregar os dados")
        else:
            dados_com = st.session_state.dados_extrato.get("com_responsavel", [])
            
            if not dados_com:
                st.success("üéâ Todos os pagamentos j√° foram processados!")
            else:
                st.info(f"üìä {len(dados_com)} registros encontrados com respons√°veis cadastrados")
                
                # Converter para DataFrame
                df = pd.DataFrame(dados_com)
                
                # Bot√µes de a√ß√£o principal
                col1, col2, col3 = st.columns([2, 2, 1])
                
                with col1:
                    modo_processamento = st.radio(
                        "üéØ Modo de Processamento:",
                        ["üöÄ Processamento R√°pido", "‚öôÔ∏è Configura√ß√£o Avan√ßada"],
                        help="R√°pido: 1 tipo por pagamento | Avan√ßado: m√∫ltiplos tipos/alunos por pagamento"
                    )
                
                with col2:
                    if modo_processamento == "üöÄ Processamento R√°pido":
                        acao_massa = st.selectbox(
                            "Tipo Padr√£o",
                            ["matricula", "mensalidade", "material", "fardamento", "evento", "outro"],
                            key="acao_massa_com"
                        )
                    else:
                        st.write("‚öôÔ∏è Configura√ß√£o individual por registro")
                
                with col3:
                    if st.button("üöÄ PROCESSAR SELECIONADOS", type="primary"):
                        processar_acoes_com_responsavel()
                
                # Mostrar registros
                st.subheader("üìã Registros Dispon√≠veis")
                
                # Processar cada registro individualmente
                registros_configurados = []
                
                for idx, registro in enumerate(dados_com):
                    responsavel_info = registro.get('responsaveis', {})
                    nome_responsavel = responsavel_info.get('nome', 'N/A') if responsavel_info else 'N/A'
                    
                    with st.expander(
                        f"üí∞ R$ {registro['valor']:.2f} - {registro['nome_remetente']} ({nome_responsavel}) - {registro['data_pagamento']}",
                        expanded=False
                    ):
                        # Verificar se respons√°vel tem m√∫ltiplos alunos
                        id_responsavel = registro.get('id_responsavel')
                        if id_responsavel:
                            alunos_vinculados = listar_alunos_vinculados_responsavel(id_responsavel)
                            tem_multiplos_alunos = alunos_vinculados.get("tem_multiplos_alunos", False)
                        else:
                            tem_multiplos_alunos = False
                        
                        col1, col2, col3 = st.columns([2, 2, 1])
                        
                        with col1:
                            st.write(f"**üë§ Respons√°vel:** {nome_responsavel}")
                            st.write(f"**üí∞ Valor:** R$ {registro['valor']:.2f}")
                            st.write(f"**üìÖ Data:** {registro['data_pagamento']}")
                            if tem_multiplos_alunos:
                                st.info(f"‚ÑπÔ∏è Este respons√°vel tem m√∫ltiplos alunos vinculados")
                        
                        with col2:
                            # Checkbox para selecionar
                            selecionado = st.checkbox(
                                "Processar este registro",
                                key=f"select_{registro['id']}"
                            )
                            
                            if selecionado:
                                if modo_processamento == "üöÄ Processamento R√°pido":
                                    # Modo r√°pido: apenas selecionar o tipo
                                    tipo_pagamento = st.selectbox(
                                        "Tipo de Pagamento:",
                                        ["matricula", "mensalidade", "material", "fardamento", "evento", "outro"],
                                        index=["matricula", "mensalidade", "material", "fardamento", "evento", "outro"].index(acao_massa),
                                        key=f"tipo_{registro['id']}"
                                    )
                                    
                                    # Se tem m√∫ltiplos alunos, permitir sele√ß√£o
                                    if tem_multiplos_alunos and alunos_vinculados.get("success"):
                                        alunos = alunos_vinculados["alunos"]
                                        opcoes_alunos = {aluno["label"]: aluno for aluno in alunos}
                                        aluno_selecionado = st.selectbox(
                                            "Aluno:",
                                            list(opcoes_alunos.keys()),
                                            key=f"aluno_{registro['id']}"
                                        )
                                        aluno_data = opcoes_alunos[aluno_selecionado]
                                        id_aluno = aluno_data["id"]
                                    else:
                                        # Usar primeiro aluno vinculado
                                        if alunos_vinculados.get("success") and alunos_vinculados.get("alunos"):
                                            id_aluno = alunos_vinculados["alunos"][0]["id"]
                                        else:
                                            id_aluno = None
                                            st.error("‚ùå Nenhum aluno vinculado!")
                                    
                                    if id_aluno:
                                        registros_configurados.append({
                                            'id_extrato': registro['id'],
                                            'id_responsavel': id_responsavel,
                                            'configuracao_simples': True,
                                            'id_aluno': id_aluno,
                                            'tipo_pagamento': tipo_pagamento,
                                            'valor': registro['valor'],
                                            'registro': registro
                                        })
                        
                        with col3:
                            if selecionado and modo_processamento == "‚öôÔ∏è Configura√ß√£o Avan√ßada":
                                if st.button("‚öôÔ∏è Configurar", key=f"config_{registro['id']}"):
                                    st.session_state[f"show_config_{registro['id']}"] = True
                        
                # Modal de configura√ß√£o avan√ßada (fora dos expanders)
                registro_para_configurar = None
                for registro in dados_com:
                    if st.session_state.get(f"show_config_{registro['id']}", False):
                        registro_para_configurar = registro
                        break
                
                if registro_para_configurar:
                    st.markdown("---")
                    st.markdown("## ‚öôÔ∏è Configura√ß√£o Avan√ßada de Pagamento")
                    
                    # Buscar respons√°vel
                    id_responsavel_config = registro_para_configurar.get('id_responsavel')
                    
                    config_resultado = mostrar_modal_pagamento_avancado(registro_para_configurar, id_responsavel_config)
                    
                    if config_resultado:
                        # Adicionar configura√ß√£o avan√ßada
                        registros_configurados.append({
                            'id_extrato': registro_para_configurar['id'],
                            'id_responsavel': id_responsavel_config,
                            'configuracao_multipla': True,
                            'pagamentos_detalhados': config_resultado['pagamentos_detalhados'],
                            'valor_total': config_resultado['valor_total'],
                            'registro': registro_para_configurar
                        })
                        
                        st.session_state[f"show_config_{registro_para_configurar['id']}"] = False
                        st.success(f"‚úÖ Configura√ß√£o salva: {config_resultado['total_pagamentos']} pagamentos")
                        st.rerun()
                
                # Salvar configura√ß√µes no estado da sess√£o
                st.session_state.registros_configurados = registros_configurados
                
                # Resumo dos registros configurados
                if registros_configurados:
                    st.markdown("---")
                    st.subheader("üìä Resumo dos Registros Configurados")
                    
                    total_simples = len([r for r in registros_configurados if r.get('configuracao_simples')])
                    total_multiplos = len([r for r in registros_configurados if r.get('configuracao_multipla')])
                    
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("üöÄ Processamento R√°pido", total_simples)
                    with col2:
                        st.metric("‚öôÔ∏è Configura√ß√£o Avan√ßada", total_multiplos)
                    with col3:
                        st.metric("üìã Total", len(registros_configurados))
                    
                    # Detalhes
                    for config in registros_configurados:
                        if config.get('configuracao_simples'):
                            st.write(f"‚Ä¢ **Simples:** R$ {config['valor']:.2f} - {config['tipo_pagamento']}")
                        elif config.get('configuracao_multipla'):
                            detalhes = config['pagamentos_detalhados']
                            tipos = ", ".join([d['tipo_pagamento'] for d in detalhes])
                            st.write(f"‚Ä¢ **M√∫ltiplo:** R$ {config['valor_total']:.2f} - {tipos} ({len(detalhes)} pagamentos)")
    
    # ==========================================================
    # TAB 2: PAGAMENTOS SEM RESPONS√ÅVEL
    # ==========================================================
    with tab2:
        st.header("‚ùì Pagamentos sem Respons√°vel Cadastrado")
        
        if st.session_state.dados_extrato is None:
            st.info("üëÜ Use os filtros na barra lateral para carregar os dados")
        else:
            dados_sem = st.session_state.dados_extrato.get("sem_responsavel", [])
            
            if not dados_sem:
                st.success("üéâ Todos os pagamentos t√™m respons√°veis identificados!")
            else:
                st.info(f"üìä {len(dados_sem)} registros sem respons√°vel cadastrado")
                
                # Filtro de busca
                busca_nome = st.text_input("üîç Filtrar por nome do remetente", key="busca_sem_resp")
                
                # Filtrar dados
                if busca_nome:
                    dados_filtrados = [
                        r for r in dados_sem 
                        if busca_nome.lower() in r.get('nome_remetente', '').lower()
                    ]
                else:
                    dados_filtrados = dados_sem
                
                # Mostrar registros em expansores
                for idx, registro in enumerate(dados_filtrados[:20]):  # Limitar a 20 para performance
                    with st.expander(
                        f"üí∞ {registro['nome_remetente']} - R$ {registro['valor']:.2f} - {registro['data_pagamento']}"
                    ):
                        col1, col2 = st.columns([2, 1])
                        
                        with col1:
                            st.write(f"**ID:** {registro['id']}")
                            st.write(f"**Valor:** R$ {registro['valor']:.2f}")
                            st.write(f"**Data:** {registro['data_pagamento']}")
                            if registro.get('observacoes'):
                                st.write(f"**Observa√ß√µes:** {registro['observacoes']}")
                        
                        with col2:
                            if st.button(
                                "üìù Cadastrar Respons√°vel", 
                                key=f"cad_resp_{registro['id']}"
                            ):
                                st.session_state[f"show_form_{registro['id']}"] = True
                        
                        # Mostrar formul√°rio se solicitado
                        if st.session_state.get(f"show_form_{registro['id']}", False):
                            st.markdown("---")
                            resultado = mostrar_formulario_responsavel(registro['nome_remetente'])
                            
                            if resultado and resultado.get("success"):
                                # Atualizar o registro do extrato com o novo respons√°vel
                                from funcoes_extrato_otimizadas import supabase
                                supabase.table("extrato_pix").update({
                                    "id_responsavel": resultado["id_responsavel"],
                                    "atualizado_em": datetime.now().isoformat()
                                }).eq("id", registro["id"]).execute()
                                
                                st.success("‚úÖ Respons√°vel cadastrado e extrato atualizado!")
                                st.session_state[f"show_form_{registro['id']}"] = False
                                
                                # Recarregar dados
                                carregar_dados_extrato()
                                st.rerun()
                
                if len(dados_sem) > 20:
                    st.info(f"Mostrando 20 de {len(dados_sem)} registros. Use o filtro para encontrar registros espec√≠ficos.")
    
    # ==========================================================
    # TAB 3: GEST√ÉO DE ALUNOS/RESPONS√ÅVEIS
    # ==========================================================
    with tab3:
        st.header("üë• Gest√£o de Alunos e Respons√°veis")
        
        # Busca de aluno melhorada
        busca_aluno = st.text_input("üîç Buscar aluno por nome", key="busca_gestao_aluno", placeholder="Digite pelo menos 2 caracteres...")
        
        # Inicializar lista de alunos
        if 'lista_alunos_gestao' not in st.session_state:
            st.session_state.lista_alunos_gestao = []
        
        # Buscar alunos automaticamente conforme digita
        if len(busca_aluno) >= 2:
            resultado_busca = buscar_alunos_para_dropdown(busca_aluno)
            if resultado_busca.get("success"):
                st.session_state.lista_alunos_gestao = resultado_busca.get("opcoes", [])
        elif len(busca_aluno) == 0:
            # Se campo vazio, buscar todos os alunos (limitado)
            resultado_busca = buscar_alunos_para_dropdown("")
            if resultado_busca.get("success"):
                st.session_state.lista_alunos_gestao = resultado_busca.get("opcoes", [])
        
        # Exibir lista de alunos encontrados
        if st.session_state.lista_alunos_gestao:
            # Selectbox com os alunos encontrados
            opcoes_formatadas = ["Selecione um aluno..."] + [aluno["label"] for aluno in st.session_state.lista_alunos_gestao]
            
            aluno_escolhido = st.selectbox(
                f"üéì Alunos encontrados ({len(st.session_state.lista_alunos_gestao)}):",
                options=opcoes_formatadas,
                key="select_gestao_aluno"
            )
            
            # Encontrar o aluno selecionado
            aluno_selecionado = None
            if aluno_escolhido != "Selecione um aluno...":
                for aluno in st.session_state.lista_alunos_gestao:
                    if aluno["label"] == aluno_escolhido:
                        aluno_selecionado = aluno
                        break
            
            if aluno_selecionado:
                st.markdown("---")
                
                # Usar a nova fun√ß√£o para mostrar informa√ß√µes edit√°veis
                mostrar_informacoes_editaveis_aluno(aluno_selecionado)
                
                # Gest√£o de respons√°veis
                st.markdown("---")
                mostrar_gestao_responsaveis_aluno(
                    aluno_selecionado["id"], 
                    aluno_selecionado["nome"]
                )
        elif len(busca_aluno) >= 2:
            st.info("Nenhum aluno encontrado com esse nome")
    
    # ==========================================================
    # TAB 4: HIST√ìRICO
    # ==========================================================
    with tab4:
        st.header("üìã Hist√≥rico de A√ß√µes")
        
        if st.session_state.historico_acoes:
            df_historico = pd.DataFrame(st.session_state.historico_acoes)
            
            # Estat√≠sticas
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("Total de A√ß√µes", len(df_historico))
            with col2:
                sucessos = len(df_historico[df_historico['status'] == 'Sucesso'])
                st.metric("Sucessos", sucessos)
            with col3:
                erros = len(df_historico[df_historico['status'].isin(['Erro', 'Exce√ß√£o'])])
                st.metric("Erros", erros)
            with col4:
                if len(df_historico) > 0:
                    taxa_sucesso = (sucessos / len(df_historico)) * 100
                    st.metric("Taxa de Sucesso", f"{taxa_sucesso:.1f}%")
            
            # Filtros
            col1, col2 = st.columns(2)
            with col1:
                filtro_status = st.selectbox(
                    "Filtrar por Status:",
                    ["Todos", "Sucesso", "Erro", "Exce√ß√£o"],
                    key="filtro_status_historico"
                )
            with col2:
                if st.button("üîÑ Atualizar Visualiza√ß√£o"):
                    st.rerun()
            
            # Aplicar filtro
            if filtro_status != "Todos":
                df_filtrado = df_historico[df_historico['status'] == filtro_status]
            else:
                df_filtrado = df_historico
            
            # Tabela principal com colunas essenciais
            colunas_mostrar = ['timestamp', 'status', 'acao', 'nome_remetente', 'valor', 'mensagem']
            if 'nome_aluno' in df_filtrado.columns:
                colunas_mostrar.insert(-2, 'nome_aluno')
                
            st.subheader("üìä Resumo das A√ß√µes")
            st.dataframe(
                df_filtrado[colunas_mostrar] if len(df_filtrado) > 0 else df_filtrado,
                column_config={
                    "timestamp": st.column_config.DatetimeColumn("Data/Hora", format="DD/MM/YYYY HH:mm:ss"),
                    "valor": st.column_config.NumberColumn("Valor", format="R$ %.2f"),
                    "status": st.column_config.TextColumn("Status"),
                    "acao": st.column_config.TextColumn("A√ß√£o"),
                    "nome_remetente": st.column_config.TextColumn("Remetente"),
                    "nome_aluno": st.column_config.TextColumn("Aluno"),
                    "mensagem": st.column_config.TextColumn("Resultado")
                },
                use_container_width=True,
                height=300
            )
            
            # Detalhes expandidos para cada a√ß√£o
            st.subheader("üîç Detalhes das A√ß√µes")
            
            for idx, acao in df_filtrado.iterrows():
                status_icon = "‚úÖ" if acao['status'] == 'Sucesso' else "‚ùå"
                
                with st.expander(
                    f"{status_icon} [{acao['timestamp'].strftime('%H:%M:%S')}] {acao['acao']} - {acao['nome_remetente']} - R$ {acao['valor']:.2f}",
                    expanded=False
                ):
                    # Informa√ß√µes b√°sicas
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write("**üìã Informa√ß√µes B√°sicas:**")
                        st.write(f"‚Ä¢ **Status:** {acao['status']}")
                        st.write(f"‚Ä¢ **ID Extrato:** {acao.get('id_extrato', 'N/A')}")
                        st.write(f"‚Ä¢ **A√ß√£o:** {acao['acao']}")
                        st.write(f"‚Ä¢ **Resultado:** {acao['mensagem']}")
                    
                    with col2:
                        st.write("**üí∞ Dados do Pagamento:**")
                        st.write(f"‚Ä¢ **Remetente:** {acao['nome_remetente']}")
                        if 'nome_aluno' in acao and pd.notna(acao['nome_aluno']):
                            st.write(f"‚Ä¢ **Aluno:** {acao['nome_aluno']}")
                        st.write(f"‚Ä¢ **Valor:** R$ {acao['valor']:.2f}")
                        st.write(f"‚Ä¢ **Timestamp:** {acao['timestamp']}")
                    
                    # Detalhes t√©cnicos se dispon√≠veis
                    if 'detalhes' in acao and acao['detalhes']:
                        st.write("**üîß Detalhes T√©cnicos:**")
                        
                        detalhes = acao['detalhes']
                        if isinstance(detalhes, dict):
                            for key, value in detalhes.items():
                                if key == 'erro_completo' and isinstance(value, dict):
                                    st.write(f"‚Ä¢ **Erro Completo:**")
                                    st.json(value)
                                elif key == 'debug_info' and isinstance(value, list):
                                    st.write(f"‚Ä¢ **Logs de Debug:**")
                                    st.code("\n".join(value), language="text")
                                else:
                                    st.write(f"‚Ä¢ **{key}:** {value}")
                        else:
                            st.write(detalhes)
            
            # Bot√µes de a√ß√£o
            st.markdown("---")
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if st.button("üóëÔ∏è Limpar Hist√≥rico"):
                    st.session_state.historico_acoes = []
                    st.success("Hist√≥rico limpo!")
                    st.rerun()
            
            with col2:
                if st.button("üìä Exportar Hist√≥rico"):
                    import json
                    historico_json = json.dumps(st.session_state.historico_acoes, default=str, indent=2)
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    
                    st.download_button(
                        label="üíæ Download JSON",
                        data=historico_json,
                        file_name=f"historico_extrato_{timestamp}.json",
                        mime="application/json"
                    )
            
            with col3:
                if st.button("üîÑ Recarregar Dados"):
                    carregar_dados_extrato()
                    st.rerun()
                    
        else:
            st.info("Nenhuma a√ß√£o realizada ainda")
            st.markdown("""
            **‚ÑπÔ∏è Como usar o hist√≥rico:**
            
            1. Execute algumas a√ß√µes nas abas anteriores
            2. O hist√≥rico registrar√° todos os detalhes
            3. Use os filtros para encontrar a√ß√µes espec√≠ficas
            4. Expanda os detalhes para ver logs completos
            5. Exporte o hist√≥rico para an√°lise posterior
            """)

def processar_acoes_com_responsavel():
    """Processa a√ß√µes selecionadas para registros com respons√°vel com debugging completo"""
    registros = st.session_state.get('registros_configurados', [])
    
    if not registros:
        st.warning("Nenhum registro selecionado!")
        return
    
    # Container para logs em tempo real
    log_container = st.container()
    progress_bar = st.progress(0)
    status_container = st.empty()
    
    # Inicializar logs
    logs = []
    sucessos = 0
    erros = 0
    
    def log_debug(mensagem: str, tipo: str = "INFO"):
        """Adiciona log e exibe em tempo real"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] [{tipo}] {mensagem}"
        logs.append(log_entry)
        print(log_entry)  # Tamb√©m exibe no terminal
        
        # Atualizar interface
        with log_container:
            st.text_area("üìã Logs de Processamento:", 
                        value="\n".join(logs[-10:]),  # √öltimas 10 linhas
                        height=200, 
                        key=f"logs_{len(logs)}")
    
    log_debug(f"üöÄ INICIANDO PROCESSAMENTO DE {len(registros)} REGISTROS")
    
    for i, item in enumerate(registros):
        progress = (i + 1) / len(registros)
        progress_bar.progress(progress)
        
        # Log detalhado de cada item
        registro = item.get('registro', {})
        log_debug(f"üìÑ PROCESSANDO ITEM {i+1}/{len(registros)}")
        log_debug(f"   - ID Extrato: {item.get('id_extrato')}")
        log_debug(f"   - ID Respons√°vel: {item.get('id_responsavel')}")
        
        # Verificar tipo de configura√ß√£o
        if item.get('configuracao_simples'):
            log_debug(f"   - Modo: Configura√ß√£o Simples")
            log_debug(f"   - ID Aluno: {item.get('id_aluno')}")
            log_debug(f"   - Tipo Pagamento: {item.get('tipo_pagamento')}")
            log_debug(f"   - Valor: R$ {item.get('valor', 0):.2f}")
        elif item.get('configuracao_multipla'):
            log_debug(f"   - Modo: Configura√ß√£o M√∫ltipla")
            log_debug(f"   - Total Pagamentos: {len(item.get('pagamentos_detalhados', []))}")
            log_debug(f"   - Valor Total: R$ {item.get('valor_total', 0):.2f}")
        
        log_debug(f"   - Nome Remetente: {registro.get('nome_remetente')}")
        
        status_container.write(f"üîÑ Processando {i+1}/{len(registros)}: {registro.get('nome_remetente', 'N/A')}")
        
        try:
            if item.get('configuracao_simples'):
                # PROCESSAMENTO SIMPLES (1 pagamento)
                log_debug(f"üîç ETAPA 1: Processamento simples")
                
                resultado = registrar_pagamento_do_extrato(
                    id_extrato=item['id_extrato'],
                    id_responsavel=item['id_responsavel'],
                    id_aluno=item['id_aluno'],
                    tipo_pagamento=item['tipo_pagamento']
                )
                
                log_debug(f"   - Resultado da fun√ß√£o: {resultado}")
                
                if resultado.get('success'):
                    log_debug(f"‚úÖ SUCESSO: {resultado.get('message', 'Pagamento registrado')}", "SUCCESS")
                    sucessos += 1
                    
                    # Registrar no hist√≥rico
                    historico_entry = {
                        'timestamp': datetime.now(),
                        'id_extrato': item['id_extrato'],
                        'acao': f"Registrar como {item['tipo_pagamento']} (Simples)",
                        'nome_remetente': registro.get('nome_remetente'),
                        'valor': item.get('valor'),
                        'status': 'Sucesso',
                        'mensagem': resultado.get('message', 'Registrado com sucesso'),
                        'detalhes': {
                            'id_pagamento': resultado.get('id_pagamento'),
                            'id_aluno': item['id_aluno'],
                            'tipo_pagamento': item['tipo_pagamento'],
                            'debug_info': resultado.get('debug_info', [])
                        }
                    }
                else:
                    erro_msg = resultado.get('error', 'Erro desconhecido')
                    log_debug(f"‚ùå ERRO: {erro_msg}", "ERROR")
                    erros += 1
                    
                    historico_entry = {
                        'timestamp': datetime.now(),
                        'id_extrato': item['id_extrato'],
                        'acao': f"Registrar como {item['tipo_pagamento']} (Simples)",
                        'nome_remetente': registro.get('nome_remetente'),
                        'valor': item.get('valor'),
                        'status': 'Erro',
                        'mensagem': erro_msg,
                        'detalhes': {
                            'erro_completo': resultado,
                            'debug_info': resultado.get('debug_info', [])
                        }
                    }
            
            elif item.get('configuracao_multipla'):
                # PROCESSAMENTO M√öLTIPLO (v√°rios pagamentos)
                log_debug(f"üîç ETAPA 1: Processamento m√∫ltiplo")
                
                resultado = registrar_pagamentos_multiplos_do_extrato(
                    id_extrato=item['id_extrato'],
                    id_responsavel=item['id_responsavel'],
                    pagamentos_detalhados=item['pagamentos_detalhados']
                )
                
                log_debug(f"   - Resultado da fun√ß√£o: {resultado}")
                
                if resultado.get('success'):
                    total_criados = resultado.get('total_pagamentos_criados', 0)
                    tipos = ', '.join(resultado.get('tipos_pagamento', []))
                    log_debug(f"‚úÖ SUCESSO: {total_criados} pagamentos criados ({tipos})", "SUCCESS")
                    sucessos += 1
                    
                    # Registrar no hist√≥rico
                    historico_entry = {
                        'timestamp': datetime.now(),
                        'id_extrato': item['id_extrato'],
                        'acao': f"Registrar m√∫ltiplos pagamentos ({total_criados})",
                        'nome_remetente': registro.get('nome_remetente'),
                        'valor': item.get('valor_total'),
                        'status': 'Sucesso',
                        'mensagem': resultado.get('message', f'{total_criados} pagamentos registrados'),
                        'detalhes': {
                            'pagamentos_criados': resultado.get('pagamentos_criados', []),
                            'tipos_pagamento': resultado.get('tipos_pagamento', []),
                            'alunos_beneficiarios': resultado.get('alunos_beneficiarios', []),
                            'total_pagamentos': total_criados,
                            'valor_total': resultado.get('valor_total_processado'),
                            'debug_info': resultado.get('debug_info', [])
                        }
                    }
                else:
                    erro_msg = resultado.get('error', 'Erro desconhecido')
                    log_debug(f"‚ùå ERRO: {erro_msg}", "ERROR")
                    erros += 1
                    
                    historico_entry = {
                        'timestamp': datetime.now(),
                        'id_extrato': item['id_extrato'],
                        'acao': f"Registrar m√∫ltiplos pagamentos",
                        'nome_remetente': registro.get('nome_remetente'),
                        'valor': item.get('valor_total'),
                        'status': 'Erro',
                        'mensagem': erro_msg,
                        'detalhes': {
                            'erro_completo': resultado,
                            'pagamentos_tentados': item.get('pagamentos_detalhados', []),
                            'debug_info': resultado.get('debug_info', [])
                        }
                    }
            else:
                log_debug(f"‚ùå ERRO: Configura√ß√£o inv√°lida - nem simples nem m√∫ltipla", "ERROR")
                erros += 1
                continue
            
            st.session_state.historico_acoes.append(historico_entry)
            log_debug(f"üìù Entrada adicionada ao hist√≥rico")
            
        except Exception as e:
            erro_msg = f"Exce√ß√£o durante processamento: {str(e)}"
            log_debug(f"‚ùå EXCE√á√ÉO: {erro_msg}", "EXCEPTION")
            erros += 1
            
            # Registrar exce√ß√£o no hist√≥rico
            historico_entry = {
                'timestamp': datetime.now(),
                'id_extrato': item.get('id_extrato', 'N/A'),
                'acao': f"Processamento (exce√ß√£o)",
                'nome_remetente': registro.get('nome_remetente', 'N/A'),
                'valor': item.get('valor', item.get('valor_total', 0)),
                'status': 'Exce√ß√£o',
                'mensagem': erro_msg,
                'detalhes': {
                    'item_completo': item,
                    'exception': str(e)
                }
            }
            st.session_state.historico_acoes.append(historico_entry)
        
        log_debug(f"üîÑ Item {i+1} processado. Status atual: {sucessos} sucessos, {erros} erros")
        log_debug("‚îÄ" * 80)
    
    # FINALIZA√á√ÉO
    log_debug(f"üèÅ PROCESSAMENTO FINALIZADO")
    log_debug(f"üìä ESTAT√çSTICAS FINAIS:")
    log_debug(f"   - Total processados: {len(registros)}")
    log_debug(f"   - Sucessos: {sucessos}")
    log_debug(f"   - Erros: {erros}")
    log_debug(f"   - Taxa de sucesso: {(sucessos/len(registros)*100):.1f}%")
    
    # Limpar configura√ß√µes
    st.session_state.registros_configurados = []
    log_debug(f"üßπ Configura√ß√µes limpas")
    
    # Mostrar resultado final
    progress_bar.empty()
    status_container.empty()
    
    if sucessos > 0:
        st.success(f"‚úÖ {sucessos} pagamentos registrados com sucesso!")
        print(f"‚úÖ SUCESSO: {sucessos} pagamentos processados")
    if erros > 0:
        st.error(f"‚ùå {erros} erros durante o processamento. Verifique os logs acima para detalhes.")
        print(f"‚ùå ERRO: {erros} falhas no processamento")
    
    # Mostrar logs finais expandidos
    with st.expander("üìã Ver Logs Completos do Processamento", expanded=False):
        st.code("\n".join(logs), language="text")
    
    # Recarregar dados
    log_debug(f"üîÑ Recarregando dados do extrato...")
    carregar_dados_extrato()
    st.rerun()

# ==========================================================
# üöÄ EXECUTAR APLICA√á√ÉO
# ==========================================================

if __name__ == "__main__":
    main() 