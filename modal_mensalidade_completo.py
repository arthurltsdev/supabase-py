#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üí∞ MODAL DE DETALHAMENTO E A√á√ïES DE MENSALIDADE - VERS√ÉO COMPLETA
================================================================

Modal completo para visualizar, editar e executar a√ß√µes em mensalidades individuais.
Implementa√ß√£o moderna com 5 abas: Detalhes, Edi√ß√£o, A√ß√µes, Hist√≥rico e Relat√≥rios.

Especifica√ß√µes:
- Header: T√≠tulo "Mensalidade: {mes_referencia} ‚Äì {nome_aluno}" + ID + √≠cone turma
- Footer: Bot√£o "Fechar", atalho ESC, timestamp de atualiza√ß√£o
- 5 Abas funcionais e responsivas
"""

import streamlit as st
import pandas as pd
from datetime import datetime, date, timedelta
from typing import Dict, List, Optional
import json
import time # Importado para usar time.sleep

# Importar depend√™ncias do sistema
from models.base import (
    supabase, formatar_data_br, formatar_valor_br, obter_timestamp
)

# Importar o m√≥dulo de processamento automatizado simplificado
try:
    from processamento_automatizado_simplificado import (
        iniciar_processamento_simplificado, identificar_alunos_elegiveis,
        SessaoProcessamentoSimplificada, AlunoElegivel, executar_acoes_modo_teste
    )
except ImportError:
    st.error("‚ùå M√≥dulo de processamento n√£o encontrado")
    # Create dummy class for type hints
    class SessaoProcessamentoSimplificada:
        pass

# ==========================================================
# üé® CSS PERSONALIZADO PARA O MODAL
# ==========================================================

def aplicar_css_modal():
    """Aplica CSS personalizado para o modal"""
    st.markdown("""
    <style>
        /* Estilo do Header */
        .modal-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 1.5rem;
            border-radius: 10px 10px 0 0;
            color: white;
            margin-bottom: 1rem;
        }
        
        .modal-header h2 {
            margin: 0;
            font-size: 1.5rem;
            font-weight: 600;
        }
        
        .modal-header .subtitle {
            opacity: 0.9;
            font-size: 0.9rem;
            margin-top: 0.5rem;
        }
        
        /* Badges de Status */
        .status-badge {
            display: inline-block;
            padding: 0.3rem 0.8rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
            margin: 0.2rem;
        }
        
        .status-pago { background: #d4edda; color: #155724; }
        .status-pendente { background: #fff3cd; color: #856404; }
        .status-atrasado { background: #f8d7da; color: #721c24; }
        .status-cancelado { background: #e2e3e5; color: #383d41; }
        
        /* Cards informativos */
        .info-card {
            background: #f8f9fa;
            border-left: 4px solid #007bff;
            padding: 1rem;
            margin: 0.5rem 0;
            border-radius: 0 8px 8px 0;
        }
        
        .success-card {
            background: #d4edda;
            border-left: 4px solid #28a745;
            padding: 1rem;
            margin: 0.5rem 0;
            border-radius: 0 8px 8px 0;
        }
        
        .warning-card {
            background: #fff3cd;
            border-left: 4px solid #ffc107;
            padding: 1rem;
            margin: 0.5rem 0;
            border-radius: 0 8px 8px 0;
        }
        
        .error-card {
            background: #f8d7da;
            border-left: 4px solid #dc3545;
            padding: 1rem;
            margin: 0.5rem 0;
            border-radius: 0 8px 8px 0;
        }
        
        /* Footer */
        .modal-footer {
            border-top: 1px solid #dee2e6;
            padding: 1rem;
            margin-top: 2rem;
            background: #f8f9fa;
            border-radius: 0 0 10px 10px;
        }
        
        /* Tabs customizadas */
        .stTabs [data-baseweb="tab-list"] {
            gap: 8px;
        }
        
        .stTabs [data-baseweb="tab"] {
            height: 50px;
            white-space: pre-wrap;
            background-color: #f1f3f4;
            border-radius: 8px 8px 0 0;
            color: #5f6368;
            font-weight: 500;
        }
        
        .stTabs [aria-selected="true"] {
            background-color: #1976d2;
            color: white;
        }
        
        /* Bot√µes de a√ß√£o */
        .action-button {
            margin: 0.2rem;
            border-radius: 8px;
        }
        
        /* M√©tricas customizadas */
        .metric-container {
            background: white;
            padding: 1rem;
            border-radius: 8px;
            border: 1px solid #e0e0e0;
            text-align: center;
            margin: 0.5rem 0;
        }
        
        .metric-value {
            font-size: 2rem;
            font-weight: bold;
            color: #1976d2;
        }
        
        .metric-label {
            font-size: 0.9rem;
            color: #666;
            margin-top: 0.5rem;
        }
    </style>
    """, unsafe_allow_html=True)

# ==========================================================
# üîß FUN√á√ïES AUXILIARES PRINCIPAIS
# ==========================================================

def buscar_dados_completos_mensalidade(id_mensalidade: str) -> Dict:
    """
    Busca dados completos da mensalidade incluindo todas as informa√ß√µes relacionadas
    
    Args:
        id_mensalidade: ID da mensalidade
        
    Returns:
        Dict: {"success": bool, "dados": Dict, "error": str}
    """
    try:
        # Buscar mensalidade com dados do aluno e turma
        response = supabase.table("mensalidades").select("""
            *,
            alunos!inner(
                id, nome, turno, valor_mensalidade, data_nascimento, 
                data_matricula, dia_vencimento,
                turmas!inner(nome_turma)
            )
        """).eq("id_mensalidade", id_mensalidade).execute()
        
        if not response.data:
            return {"success": False, "error": "Mensalidade n√£o encontrada"}
        
        mensalidade = response.data[0]
        id_aluno = mensalidade["alunos"]["id"]
        
        # Buscar respons√°veis do aluno
        resp_response = supabase.table("alunos_responsaveis").select("""
            responsavel_financeiro, parentesco,
            responsaveis!inner(id, nome, telefone, email, cpf, endereco)
        """).eq("id_aluno", id_aluno).execute()
        
        responsaveis = resp_response.data if resp_response.data else []
        
        # Buscar pagamentos relacionados √† mensalidade
        pag_response = supabase.table("pagamentos").select("""
            id_pagamento, data_pagamento, valor, forma_pagamento, 
            descricao, created_at
        """).eq("id_aluno", id_aluno).eq("tipo_pagamento", "mensalidade").execute()
        
        pagamentos = pag_response.data if pag_response.data else []
        
        # Buscar hist√≥rico de altera√ß√µes (simulado - implementar auditoria real se necess√°rio)
        historico = [
            {
                "data": mensalidade.get("inserted_at", ""),
                "acao": "Cria√ß√£o",
                "usuario": "Sistema",
                "detalhes": "Mensalidade criada automaticamente"
            }
        ]
        
        if mensalidade.get("updated_at") != mensalidade.get("inserted_at"):
            historico.append({
                "data": mensalidade.get("updated_at", ""),
                "acao": "Atualiza√ß√£o", 
                "usuario": "Sistema",
                "detalhes": "Dados da mensalidade atualizados"
            })
        
        return {
            "success": True,
            "dados": {
                "mensalidade": mensalidade,
                "responsaveis": responsaveis,
                "pagamentos": pagamentos,
                "historico": historico
            }
        }
        
    except Exception as e:
        return {"success": False, "error": str(e)}

def calcular_status_visual(mensalidade: Dict) -> Dict:
    """
    Calcula status visual da mensalidade com emoji e cor
    
    Args:
        mensalidade: Dados da mensalidade
        
    Returns:
        Dict: {"emoji": str, "cor": str, "texto": str, "classe_css": str}
    """
    try:
        status = mensalidade.get("status", "")
        data_vencimento = mensalidade.get("data_vencimento", "")
        data_pagamento = mensalidade.get("data_pagamento")
        
        if status in ["Pago", "Pago parcial"]:
            return {
                "emoji": "‚úÖ",
                "cor": "success", 
                "texto": status,
                "classe_css": "status-pago"
            }
        elif status == "Cancelado":
            return {
                "emoji": "‚ùå",
                "cor": "secondary",
                "texto": "Cancelado",
                "classe_css": "status-cancelado"
            }
        else:
            # Verificar se est√° atrasado
            if data_vencimento:
                data_hoje = date.today()
                vencimento = datetime.strptime(data_vencimento, "%Y-%m-%d").date()
                
                if vencimento < data_hoje:
                    dias_atraso = (data_hoje - vencimento).days
                    return {
                        "emoji": "‚ö†Ô∏è",
                        "cor": "error",
                        "texto": f"Atrasado ({dias_atraso} dias)",
                        "classe_css": "status-atrasado"
                    }
                else:
                    dias_restantes = (vencimento - data_hoje).days
                    return {
                        "emoji": "üìÖ",
                        "cor": "warning",
                        "texto": f"A vencer ({dias_restantes} dias)",
                        "classe_css": "status-pendente"
                    }
            
            return {
                "emoji": "üìÖ",
                "cor": "info",
                "texto": status,
                "classe_css": "status-pendente"
            }
            
    except Exception:
        return {
            "emoji": "‚ùì",
            "cor": "secondary",
            "texto": "Status indefinido",
            "classe_css": "status-cancelado"
        }

def obter_icone_turma(nome_turma: str) -> str:
    """Retorna √≠cone baseado na turma"""
    nome_lower = nome_turma.lower()
    
    if "ber√ß√°rio" in nome_lower or "ber√ß" in nome_lower:
        return "üë∂"
    elif "infantil" in nome_lower:
        return "üßí"
    elif any(ano in nome_lower for ano in ["1¬∫", "2¬∫", "3¬∫", "4¬∫", "5¬∫"]):
        return "üìö"
    elif "maternal" in nome_lower:
        return "üçº"
    else:
        return "üéì"

# ==========================================================
# üé® COMPONENTES DO HEADER E FOOTER
# ==========================================================

def renderizar_header_modal(dados: Dict):
    """Renderiza o cabe√ßalho do modal com design moderno"""
    mensalidade = dados["mensalidade"]
    aluno = mensalidade["alunos"]
    turma = aluno["turmas"]
    
    # Aplicar CSS
    aplicar_css_modal()
    
    # Status visual
    status_info = calcular_status_visual(mensalidade)
    icone_turma = obter_icone_turma(turma["nome_turma"])
    
    # Header com gradiente
    st.markdown(f"""
    <div class="modal-header">
        <h2>üí∞ Mensalidade: {mensalidade['mes_referencia']} ‚Äì {aluno['nome']}</h2>
        <div class="subtitle">
            <strong>ID:</strong> <code>{mensalidade['id_mensalidade']}</code> 
            &nbsp;&nbsp;{icone_turma} <strong>Turma:</strong> {turma['nome_turma']}
            &nbsp;&nbsp;<span class="status-badge {status_info['classe_css']}">{status_info['emoji']} {status_info['texto']}</span>
        </div>
    </div>
    """, unsafe_allow_html=True)

def renderizar_footer_modal(dados: Dict):
    """Renderiza o rodap√© do modal com timestamp e a√ß√µes"""
    mensalidade = dados["mensalidade"]
    
    # Calcular √∫ltima atualiza√ß√£o
    ultima_atualizacao = mensalidade.get("updated_at", mensalidade.get("inserted_at", ""))
    
    try:
        if ultima_atualizacao:
            dt = datetime.fromisoformat(ultima_atualizacao.replace('Z', '+00:00'))
            timestamp_texto = dt.strftime("%d/%m/%Y √†s %H:%M")
        else:
            timestamp_texto = "N√£o dispon√≠vel"
    except:
        timestamp_texto = "N√£o dispon√≠vel"
    
    st.markdown(f"""
    <div class="modal-footer">
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <span style="color: #666; font-size: 0.9rem;">
                üìÖ √öltima atualiza√ß√£o: {timestamp_texto}
            </span>
            <span style="color: #999; font-size: 0.8rem;">
                üí° <strong>Dica:</strong> Use ESC para fechar o modal
            </span>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Bot√£o de fechar
    col1, col2, col3 = st.columns([2, 1, 2])
    with col2:
        if st.button("‚ùå Fechar Modal", use_container_width=True, type="secondary", key="fechar_modal_footer"):
            st.session_state.modal_aberto = False
            st.session_state.id_mensalidade_modal = None
            st.rerun()

# ==========================================================
# üè† ABA 1: DETALHES
# ==========================================================

def renderizar_aba_detalhes(dados: Dict):
    """Renderiza a aba de detalhes com informa√ß√µes completas"""
    mensalidade = dados["mensalidade"]
    aluno = mensalidade["alunos"]
    turma = aluno["turmas"]
    responsaveis = dados["responsaveis"]
    
    # Status visual
    status_info = calcular_status_visual(mensalidade)
    
    # Layout em duas colunas principais
    col1, col2 = st.columns([1, 1])
    
    with col1:
        # Informa√ß√µes do Aluno
        st.markdown("### üë®‚Äçüéì Informa√ß√µes do Aluno")
        
        aluno_info = f"""
        <div class="info-card">
            <strong>üìõ Nome:</strong> {aluno['nome']}<br>
            <strong>üéì Turma:</strong> {turma['nome_turma']}<br>
            <strong>üïê Turno:</strong> {aluno.get('turno', 'N√£o informado')}<br>
            <strong>üéÇ Data Nascimento:</strong> {formatar_data_br(aluno.get('data_nascimento', '')) if aluno.get('data_nascimento') else 'N√£o informado'}<br>
            <strong>üìÖ Data Matr√≠cula:</strong> {formatar_data_br(aluno.get('data_matricula', '')) if aluno.get('data_matricula') else 'N√£o informado'}<br>
            <strong>üí∞ Valor Mensalidade:</strong> {formatar_valor_br(aluno.get('valor_mensalidade', 0))}<br>
            <strong>üìÜ Dia Vencimento:</strong> {aluno.get('dia_vencimento', 'N√£o definido')}
        </div>
        """
        st.markdown(aluno_info, unsafe_allow_html=True)
        
        # Respons√°veis
        st.markdown("### üë• Respons√°veis")
        
        if responsaveis:
            for resp in responsaveis:
                responsavel_data = resp["responsaveis"]
                is_financeiro = resp.get("responsavel_financeiro", False)
                parentesco = resp.get("parentesco", "N√£o informado")
                
                badge_financeiro = "üí∞ FINANCEIRO" if is_financeiro else ""
                
                resp_info = f"""
                <div class="{'success-card' if is_financeiro else 'info-card'}">
                    <strong>üë§ Nome:</strong> {responsavel_data['nome']} {badge_financeiro}<br>
                    <strong>üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Parentesco:</strong> {parentesco}<br>
                    <strong>üì± Telefone:</strong> {responsavel_data.get('telefone', 'N√£o informado')}<br>
                    <strong>üìß Email:</strong> {responsavel_data.get('email', 'N√£o informado')}<br>
                    <strong>üÜî CPF:</strong> {responsavel_data.get('cpf', 'N√£o informado')}
                </div>
                """
                st.markdown(resp_info, unsafe_allow_html=True)
        else:
            st.markdown('<div class="warning-card">‚ö†Ô∏è Nenhum respons√°vel cadastrado</div>', unsafe_allow_html=True)
    
    with col2:
        # Detalhes da Mensalidade
        st.markdown("### üí∞ Detalhes da Mensalidade")
        
        # Card principal com status
        card_class = "success-card" if status_info["cor"] == "success" else "warning-card" if status_info["cor"] == "warning" else "error-card" if status_info["cor"] == "error" else "info-card"
        
        mensalidade_info = f"""
        <div class="{card_class}">
            <strong>{status_info['emoji']} Status:</strong> {status_info['texto']}<br>
            <strong>üìÖ M√™s de Refer√™ncia:</strong> {mensalidade['mes_referencia']}<br>
            <strong>üí∞ Valor:</strong> {formatar_valor_br(mensalidade['valor'])}<br>
            <strong>üìÜ Data de Vencimento:</strong> {formatar_data_br(mensalidade['data_vencimento'])}<br>
            <strong>üí≥ Data de Pagamento:</strong> {formatar_data_br(mensalidade.get('data_pagamento', '')) if mensalidade.get('data_pagamento') else '‚Äî'}<br>
            <strong>üÜî ID Mensalidade:</strong> <code>{mensalidade['id_mensalidade']}</code>
        </div>
        """
        st.markdown(mensalidade_info, unsafe_allow_html=True)
        
        # Observa√ß√µes
        if mensalidade.get('observacoes'):
            st.markdown("### üìù Observa√ß√µes")
            st.markdown(f"""
            <div class="info-card">
                {mensalidade['observacoes']}
            </div>
            """, unsafe_allow_html=True)
        
        # M√©tricas visuais
        st.markdown("### üìä M√©tricas")
        
        # Calcular m√©tricas
        valor_mensalidade = float(mensalidade['valor'])
        valor_pago = float(mensalidade.get('valor_pago', 0)) if mensalidade.get('valor_pago') else 0
        
        if mensalidade.get('data_vencimento'):
            try:
                vencimento = datetime.strptime(mensalidade['data_vencimento'], '%Y-%m-%d').date()
                hoje = date.today()
                dias_diferenca = (hoje - vencimento).days
            except:
                dias_diferenca = 0
        else:
            dias_diferenca = 0
        
        # Layout de m√©tricas
        metric_col1, metric_col2 = st.columns(2)
        
        with metric_col1:
            st.metric(
                label="üí∞ Valor da Mensalidade",
                value=f"R$ {valor_mensalidade:,.2f}",
                delta=f"R$ {valor_pago:,.2f} pago" if valor_pago > 0 else None
            )
        
        with metric_col2:
            if dias_diferenca > 0:
                st.metric(
                    label="‚è∞ Situa√ß√£o",
                    value=f"{dias_diferenca} dias",
                    delta="Em atraso",
                    delta_color="inverse"
                )
            elif dias_diferenca == 0:
                st.metric(
                    label="‚è∞ Situa√ß√£o", 
                    value="Hoje",
                    delta="Vence hoje",
                    delta_color="normal"
                )
            else:
                st.metric(
                    label="‚è∞ Situa√ß√£o",
                    value=f"{abs(dias_diferenca)} dias",
                    delta="Para vencer",
                    delta_color="normal"
                )
    
    # A√ß√µes r√°pidas na parte inferior
    st.markdown("---")
    st.markdown("### ‚ö° A√ß√µes R√°pidas")
    
    col_acao1, col_acao2, col_acao3, col_acao4 = st.columns(4)
    
    with col_acao1:
        if st.button("‚úèÔ∏è Editar", use_container_width=True, type="secondary"):
            st.session_state.aba_ativa_modal = "Edi√ß√£o"
            st.rerun()
    
    with col_acao2:
        if mensalidade["status"] not in ["Pago", "Cancelado"]:
            if st.button("‚úÖ Marcar Pago", use_container_width=True, type="primary"):
                st.session_state.aba_ativa_modal = "A√ß√µes"
                st.session_state.acao_selecionada = "marcar_pago"
                st.rerun()
    
    with col_acao3:
        if st.button("üìä Relat√≥rios", use_container_width=True):
            st.session_state.aba_ativa_modal = "Relat√≥rios"
            st.rerun()
    
    with col_acao4:
        if st.button("üìö Hist√≥rico", use_container_width=True):
            st.session_state.aba_ativa_modal = "Hist√≥rico"
            st.rerun() 

# ==========================================================
# ‚úèÔ∏è ABA 2: EDI√á√ÉO
# ==========================================================

def renderizar_aba_edicao(dados: Dict):
    """Renderiza a aba de edi√ß√£o com formul√°rio completo"""
    mensalidade = dados["mensalidade"]
    
    st.markdown("### ‚úèÔ∏è Editar Mensalidade")
    
    # Aviso importante
    st.markdown("""
    <div class="warning-card">
        ‚ö†Ô∏è <strong>Aten√ß√£o:</strong> As altera√ß√µes ser√£o aplicadas imediatamente ap√≥s salvar.
        Certifique-se de que os dados est√£o corretos antes de confirmar.
    </div>
    """, unsafe_allow_html=True)
    
    with st.form("form_edicao_mensalidade_completo"):
        # Layout em duas colunas
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üí∞ Dados Financeiros")
            
            novo_valor = st.number_input(
                "üí∞ Valor (R$):",
                min_value=0.01,
                max_value=10000.0,
                value=float(mensalidade["valor"]),
                step=0.01,
                format="%.2f",
                help="Valor da mensalidade em reais"
            )
            
            nova_data_vencimento = st.date_input(
                "üìÖ Data de Vencimento:",
                value=datetime.strptime(mensalidade["data_vencimento"], "%Y-%m-%d").date(),
                help="Data de vencimento da mensalidade"
            )
            
            # Desconto/Acr√©scimo
            desconto_acrescimo = st.number_input(
                "üí∏ Desconto/Acr√©scimo (R$):",
                min_value=-1000.0,
                max_value=1000.0,
                value=0.0,
                step=0.01,
                format="%.2f",
                help="Valor negativo = desconto, valor positivo = acr√©scimo"
            )
        
        with col2:
            st.markdown("#### üìä Status e Pagamento")
            
            novo_status = st.selectbox(
                "üìä Status:",
                options=["A vencer", "Atrasado", "Pago", "Pago parcial", "Cancelado"],
                index=["A vencer", "Atrasado", "Pago", "Pago parcial", "Cancelado"].index(
                    mensalidade["status"]
                ) if mensalidade["status"] in ["A vencer", "Atrasado", "Pago", "Pago parcial", "Cancelado"] else 0,
                help="Status atual da mensalidade"
            )
            
            # Data de pagamento (s√≥ aparece se status for "Pago" ou "Pago parcial")
            nova_data_pagamento = None
            if novo_status in ["Pago", "Pago parcial"]:
                data_atual = None
                if mensalidade.get("data_pagamento"):
                    try:
                        data_atual = datetime.strptime(mensalidade["data_pagamento"], "%Y-%m-%d").date()
                    except:
                        data_atual = date.today()
                
                nova_data_pagamento = st.date_input(
                    "üí≥ Data de Pagamento:",
                    value=data_atual or date.today(),
                    help="Data em que o pagamento foi realizado"
                )
                
                # Valor pago (para pagamento parcial)
                if novo_status == "Pago parcial":
                    valor_pago = st.number_input(
                        "üíµ Valor Pago (R$):",
                        min_value=0.01,
                        max_value=float(novo_valor),
                        value=float(mensalidade.get("valor_pago", novo_valor/2)),
                        step=0.01,
                        format="%.2f",
                        help="Valor efetivamente pago (menor que o valor total)"
                    )
            
            # Forma de pagamento
            if novo_status in ["Pago", "Pago parcial"]:
                forma_pagamento = st.selectbox(
                    "üí≥ Forma de Pagamento:",
                    options=["PIX", "Dinheiro", "Cart√£o de Cr√©dito", "Cart√£o de D√©bito", "Boleto", "Transfer√™ncia", "Outro"],
                    help="Como foi realizado o pagamento"
                )
        
        # Observa√ß√µes (campo expandido)
        st.markdown("#### üìù Observa√ß√µes")
        novas_observacoes = st.text_area(
            "",
            value=mensalidade.get("observacoes", ""),
            height=100,
            placeholder="Digite observa√ß√µes sobre esta mensalidade...",
            help="Observa√ß√µes gerais sobre a mensalidade"
        )
        
        # Hist√≥rico de altera√ß√µes
        motivo_alteracao = st.text_input(
            "üìã Motivo da Altera√ß√£o:",
            placeholder="Descreva o motivo desta altera√ß√£o...",
            help="Este motivo ser√° registrado no hist√≥rico"
        )
        
        # Bot√µes do formul√°rio
        st.markdown("---")
        col_btn1, col_btn2, col_btn3 = st.columns([1, 1, 2])
        
        with col_btn1:
            submit_edicao = st.form_submit_button("üíæ Salvar Altera√ß√µes", type="primary")
        
        with col_btn2:
            cancelar_edicao = st.form_submit_button("üîÑ Cancelar", type="secondary")
        
        with col_btn3:
            st.write("")  # Espa√ßo
        
        # Processar submiss√£o do formul√°rio
        if submit_edicao:
            # Valida√ß√µes
            if not motivo_alteracao.strip():
                st.error("‚ùå Por favor, informe o motivo da altera√ß√£o")
            elif nova_data_vencimento > date.today() + timedelta(days=365):
                st.error("‚ùå Data de vencimento n√£o pode ser superior a 1 ano")
            else:
                # Preparar dados para atualiza√ß√£o
                dados_alterados = {
                    "valor": novo_valor,
                    "data_vencimento": nova_data_vencimento.isoformat(),
                    "status": novo_status,
                    "observacoes": novas_observacoes,
                    "updated_at": obter_timestamp()
                }
                
                # Adicionar desconto/acr√©scimo se houver
                if desconto_acrescimo != 0:
                    valor_final = novo_valor + desconto_acrescimo
                    dados_alterados["valor"] = valor_final
                    if desconto_acrescimo > 0:
                        dados_alterados["observacoes"] += f"\n[ACR√âSCIMO: R$ {desconto_acrescimo:.2f}]"
                    else:
                        dados_alterados["observacoes"] += f"\n[DESCONTO: R$ {abs(desconto_acrescimo):.2f}]"
                
                # Dados de pagamento
                if nova_data_pagamento:
                    dados_alterados["data_pagamento"] = nova_data_pagamento.isoformat()
                    if novo_status == "Pago parcial" and 'valor_pago' in locals():
                        dados_alterados["valor_pago"] = valor_pago
                    if 'forma_pagamento' in locals():
                        dados_alterados["forma_pagamento"] = forma_pagamento
                elif novo_status not in ["Pago", "Pago parcial"]:
                    dados_alterados["data_pagamento"] = None
                    dados_alterados["valor_pago"] = None
                    dados_alterados["forma_pagamento"] = None
                
                # Tentar salvar
                try:
                    response = supabase.table("mensalidades").update(dados_alterados).eq(
                        "id_mensalidade", mensalidade["id_mensalidade"]
                    ).execute()
                    
                    if response.data:
                        # TODO: Registrar no hist√≥rico/auditoria
                        # registrar_historico_alteracao(mensalidade["id_mensalidade"], motivo_alteracao, dados_alterados)
                        
                        st.success("‚úÖ Mensalidade atualizada com sucesso!")
                        st.balloons()
                        
                        # Atualizar estado e voltar para aba de detalhes
                        st.session_state.modal_dados_atualizados = True
                        st.session_state.aba_ativa_modal = "Detalhes"
                        
                        # Recarregar dados
                        time.sleep(1)
                        st.rerun()
                    else:
                        st.error("‚ùå Erro ao salvar altera√ß√µes. Tente novamente.")
                        
                except Exception as e:
                    st.error(f"‚ùå Erro ao salvar: {str(e)}")
        
        elif cancelar_edicao:
            st.session_state.aba_ativa_modal = "Detalhes"
            st.rerun()

# ==========================================================
# ‚ö° ABA 3: A√á√ïES
# ==========================================================

def renderizar_aba_acoes(dados: Dict):
    """Renderiza a aba de a√ß√µes com todas as opera√ß√µes dispon√≠veis"""
    mensalidade = dados["mensalidade"]
    aluno = mensalidade["alunos"]
    
    st.markdown("### ‚ö° A√ß√µes Dispon√≠veis")
    st.markdown("Selecione uma das a√ß√µes abaixo para executar opera√ß√µes na mensalidade:")
    
    # Status atual
    status_info = calcular_status_visual(mensalidade)
    st.markdown(f"""
    <div class="info-card">
        <strong>Status Atual:</strong> {status_info['emoji']} {status_info['texto']}
    </div>
    """, unsafe_allow_html=True)
    
    # Grid de a√ß√µes principais (2x2)
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üí∞ A√ß√µes Financeiras")
        
        # Marcar como Pago
        if mensalidade["status"] not in ["Pago", "Cancelado"]:
            if st.button("‚úÖ Marcar como Pago", use_container_width=True, type="primary", key="acao_marcar_pago"):
                st.session_state.show_form_marcar_pago = True
                st.rerun()
        
        # Marcar como Pago Parcial
        if mensalidade["status"] not in ["Pago", "Pago parcial", "Cancelado"]:
            if st.button("üî∂ Pagamento Parcial", use_container_width=True, key="acao_pago_parcial"):
                st.session_state.show_form_pago_parcial = True
                st.rerun()
        
        # Aplicar Desconto
        if mensalidade["status"] not in ["Pago", "Cancelado"]:
            if st.button("üí∏ Aplicar Desconto", use_container_width=True, key="acao_desconto"):
                st.session_state.show_form_desconto = True
                st.rerun()
        
        # Gerar Segunda Via
        if st.button("üßæ Gerar Recibo/Boleto", use_container_width=True, key="acao_recibo"):
            st.session_state.show_form_recibo = True
            st.rerun()
    
    with col2:
        st.markdown("#### üîß A√ß√µes Administrativas")
        
        # Cancelar Mensalidade
        if mensalidade["status"] != "Cancelado":
            if st.button("‚ùå Cancelar Mensalidade", use_container_width=True, type="secondary", key="acao_cancelar"):
                st.session_state.show_form_cancelar = True
                st.rerun()
        
        # Reenviar Cobran√ßa
        if st.button("üìß Enviar Cobran√ßa", use_container_width=True, key="acao_cobranca"):
            st.session_state.show_form_cobranca = True
            st.rerun()
        
        # Renegociar
        if mensalidade["status"] in ["Atrasado"]:
            if st.button("ü§ù Renegociar", use_container_width=True, key="acao_renegociar"):
                st.session_state.show_form_renegociar = True
                st.rerun()
        
        # Transferir/Trocar
        if st.button("üîÑ Transferir/Trocar", use_container_width=True, key="acao_transferir"):
            st.info("üîß Em desenvolvimento")
    
    # ==========================================================
    # FORMUL√ÅRIOS DAS A√á√ïES (MODAIS SECUND√ÅRIOS)
    # ==========================================================
    
    # Form: Marcar como Pago
    if st.session_state.get('show_form_marcar_pago', False):
        st.markdown("---")
        st.markdown("#### ‚úÖ Registrar Pagamento Completo")
        
        with st.form("form_marcar_pago_completo"):
            col_pag1, col_pag2 = st.columns(2)
            
            with col_pag1:
                data_pagamento = st.date_input(
                    "üìÖ Data do Pagamento:",
                    value=date.today(),
                    help="Data em que o pagamento foi realizado"
                )
                
                forma_pagamento = st.selectbox(
                    "üí≥ Forma de Pagamento:",
                    options=["PIX", "Dinheiro", "Cart√£o de Cr√©dito", "Cart√£o de D√©bito", "Boleto", "Transfer√™ncia", "Outro"]
                )
            
            with col_pag2:
                valor_recebido = st.number_input(
                    "üí∞ Valor Recebido (R$):",
                    min_value=0.01,
                    value=float(mensalidade["valor"]),
                    step=0.01,
                    format="%.2f"
                )
                
                observacoes_pagamento = st.text_area(
                    "üìù Observa√ß√µes:",
                    placeholder="Observa√ß√µes sobre o pagamento..."
                )
            
            col_btn1, col_btn2 = st.columns(2)
            
            with col_btn1:
                if st.form_submit_button("‚úÖ Confirmar Pagamento", type="primary"):
                    try:
                        dados_pagamento = {
                            "status": "Pago",
                            "data_pagamento": data_pagamento.isoformat(),
                            "forma_pagamento": forma_pagamento,
                            "valor_pago": valor_recebido,
                            "observacoes": f"{mensalidade.get('observacoes', '')}\n[PAGO: {forma_pagamento} em {data_pagamento.strftime('%d/%m/%Y')}] {observacoes_pagamento}".strip(),
                            "updated_at": obter_timestamp()
                        }
                        
                        response = supabase.table("mensalidades").update(dados_pagamento).eq(
                            "id_mensalidade", mensalidade["id_mensalidade"]
                        ).execute()
                        
                        if response.data:
                            st.success("‚úÖ Pagamento registrado com sucesso!")
                            st.session_state.show_form_marcar_pago = False
                            st.session_state.modal_dados_atualizados = True
                            st.balloons()
                            time.sleep(1)
                            st.rerun()
                        else:
                            st.error("‚ùå Erro ao registrar pagamento")
                            
                    except Exception as e:
                        st.error(f"‚ùå Erro: {str(e)}")
            
            with col_btn2:
                if st.form_submit_button("‚ùå Cancelar", type="secondary"):
                    st.session_state.show_form_marcar_pago = False
                    st.rerun()
    
    # Form: Cancelar Mensalidade
    if st.session_state.get('show_form_cancelar', False):
        st.markdown("---")
        st.markdown("#### ‚ùå Cancelar Mensalidade")
        
        st.markdown("""
        <div class="error-card">
            ‚ö†Ô∏è <strong>Aten√ß√£o:</strong> Esta a√ß√£o n√£o pode ser desfeita. 
            A mensalidade ser√° marcada como cancelada permanentemente.
        </div>
        """, unsafe_allow_html=True)
        
        with st.form("form_cancelar_mensalidade"):
            motivo_cancelamento = st.text_area(
                "üìã Motivo do Cancelamento:",
                placeholder="Descreva o motivo do cancelamento...",
                help="Este motivo ser√° registrado permanentemente"
            )
            
            # Checkbox de confirma√ß√£o
            confirmo_cancelamento = st.checkbox(
                "üî¥ Confirmo que desejo cancelar esta mensalidade permanentemente",
                help="Marque esta op√ß√£o para habilitar o cancelamento"
            )
            
            col_btn1, col_btn2 = st.columns(2)
            
            with col_btn1:
                if st.form_submit_button("‚ùå CANCELAR MENSALIDADE", type="primary", disabled=not confirmo_cancelamento):
                    if not motivo_cancelamento.strip():
                        st.error("‚ùå Por favor, informe o motivo do cancelamento")
                    else:
                        try:
                            dados_cancelamento = {
                                "status": "Cancelado",
                                "observacoes": f"{mensalidade.get('observacoes', '')}\n[CANCELADO em {date.today().strftime('%d/%m/%Y')}] Motivo: {motivo_cancelamento}".strip(),
                                "updated_at": obter_timestamp()
                            }
                            
                            response = supabase.table("mensalidades").update(dados_cancelamento).eq(
                                "id_mensalidade", mensalidade["id_mensalidade"]
                            ).execute()
                            
                            if response.data:
                                st.success("‚úÖ Mensalidade cancelada com sucesso!")
                                st.session_state.show_form_cancelar = False
                                st.session_state.modal_dados_atualizados = True
                                time.sleep(1)
                                st.rerun()
                            else:
                                st.error("‚ùå Erro ao cancelar mensalidade")
                                
                        except Exception as e:
                            st.error(f"‚ùå Erro: {str(e)}")
            
            with col_btn2:
                if st.form_submit_button("üîÑ Voltar", type="secondary"):
                    st.session_state.show_form_cancelar = False
                    st.rerun()

# ==========================================================
# üìö ABA 4: HIST√ìRICO
# ==========================================================

def renderizar_aba_historico(dados: Dict):
    """Renderiza a aba de hist√≥rico com log de altera√ß√µes"""
    mensalidade = dados["mensalidade"]
    historico = dados.get("historico", [])
    
    st.markdown("### üìö Hist√≥rico de Altera√ß√µes")
    st.markdown("Timeline completo de todas as altera√ß√µes realizadas nesta mensalidade:")
    
    if historico:
        # Timeline visual
        for i, evento in enumerate(historico):
            try:
                data_evento = datetime.fromisoformat(evento["data"].replace('Z', '+00:00'))
                data_formatada = data_evento.strftime("%d/%m/%Y √†s %H:%M")
            except:
                data_formatada = evento.get("data", "Data n√£o dispon√≠vel")
            
            acao = evento.get("acao", "A√ß√£o n√£o especificada")
            usuario = evento.get("usuario", "Sistema")
            detalhes = evento.get("detalhes", "Nenhum detalhe dispon√≠vel")
            
            # √çcone baseado na a√ß√£o
            if "cria√ß√£o" in acao.lower() or "criado" in acao.lower():
                icone = "üåü"
                card_class = "success-card"
            elif "atualiza√ß√£o" in acao.lower() or "altera√ß√£o" in acao.lower():
                icone = "‚úèÔ∏è"
                card_class = "info-card"
            elif "pagamento" in acao.lower() or "pago" in acao.lower():
                icone = "üí∞"
                card_class = "success-card"
            elif "cancelamento" in acao.lower() or "cancelado" in acao.lower():
                icone = "‚ùå"
                card_class = "error-card"
            else:
                icone = "üìù"
                card_class = "info-card"
            
            # Card do evento
            st.markdown(f"""
            <div class="{card_class}">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                    <strong>{icone} {acao}</strong>
                    <span style="font-size: 0.9rem; opacity: 0.8;">üìÖ {data_formatada}</span>
                </div>
                <div style="margin-bottom: 0.5rem;">
                    <strong>üë§ Usu√°rio:</strong> {usuario}
                </div>
                <div>
                    <strong>üìã Detalhes:</strong> {detalhes}
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            # Linha conectora (exceto no √∫ltimo item)
            if i < len(historico) - 1:
                st.markdown('<div style="text-align: center; color: #ccc; font-size: 1.5rem;">‚¨áÔ∏è</div>', unsafe_allow_html=True)
    
    else:
        st.markdown("""
        <div class="warning-card">
            üìù <strong>Nenhum hist√≥rico dispon√≠vel</strong><br>
            O sistema de auditoria pode n√£o estar ativo ou esta mensalidade n√£o possui altera√ß√µes registradas.
        </div>
        """, unsafe_allow_html=True)
    
    # Se√ß√£o de auditoria expandida
    with st.expander("üîç Informa√ß√µes T√©cnicas de Auditoria"):
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**üìä Metadados:**")
            created_at = mensalidade.get("inserted_at", "N/A")
            updated_at = mensalidade.get("updated_at", "N/A")
            
            try:
                if created_at != "N/A":
                    created_dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                    created_formatted = created_dt.strftime("%d/%m/%Y √†s %H:%M:%S")
                else:
                    created_formatted = "N/A"
                    
                if updated_at != "N/A":
                    updated_dt = datetime.fromisoformat(updated_at.replace('Z', '+00:00'))
                    updated_formatted = updated_dt.strftime("%d/%m/%Y √†s %H:%M:%S")
                else:
                    updated_formatted = "N/A"
            except:
                created_formatted = created_at
                updated_formatted = updated_at
            
            st.text(f"üåü Criado em: {created_formatted}")
            st.text(f"‚úèÔ∏è Modificado em: {updated_formatted}")
            st.text(f"üÜî ID: {mensalidade['id_mensalidade']}")
        
        with col2:
            st.markdown("**üìã Status da Auditoria:**")
            st.text("üîç Sistema de Log: B√°sico")
            st.text("üìä Hist√≥rico Completo: Em desenvolvimento")
            st.text("üîê Backup de Dados: Ativo")
    
    # A√ß√µes do hist√≥rico
    st.markdown("---")
    col_hist1, col_hist2, col_hist3 = st.columns(3)
    
    with col_hist1:
        if st.button("üìä Exportar Hist√≥rico", use_container_width=True):
            # TODO: Implementar exporta√ß√£o do hist√≥rico
            st.info("üîß Funcionalidade em desenvolvimento")
    
    with col_hist2:
        if st.button("üîÑ Atualizar Hist√≥rico", use_container_width=True):
            st.session_state.modal_dados_atualizados = True
            st.rerun()
    
    with col_hist3:
        if st.button("üìß Relat√≥rio por Email", use_container_width=True):
            st.info("üîß Funcionalidade em desenvolvimento")

# ==========================================================
# üìä ABA 5: RELAT√ìRIOS
# ==========================================================

def renderizar_aba_relatorios(dados: Dict):
    """Renderiza a aba de relat√≥rios com gera√ß√£o de documentos"""
    mensalidade = dados["mensalidade"]
    aluno = mensalidade["alunos"]
    responsaveis = dados["responsaveis"]
    
    st.markdown("### üìä Relat√≥rios e Documentos")
    st.markdown("Gere relat√≥rios e documentos espec√≠ficos para esta mensalidade:")
    
    # Se√ß√£o de relat√≥rios b√°sicos
    st.markdown("#### üìÑ Documentos B√°sicos")
    
    col_rel1, col_rel2 = st.columns(2)
    
    with col_rel1:
        # Recibo de Pagamento
        if mensalidade["status"] in ["Pago", "Pago parcial"]:
            if st.button("üßæ Recibo de Pagamento", use_container_width=True, type="primary"):
                try:
                    # TODO: Integrar com sistema de gera√ß√£o de PDF
                    st.success("‚úÖ Recibo gerado! (Funcionalidade em desenvolvimento)")
                    # Aqui integraria com funcoes_relatorios ou similar
                except Exception as e:
                    st.error(f"‚ùå Erro ao gerar recibo: {str(e)}")
        else:
            st.button("üßæ Recibo de Pagamento", use_container_width=True, disabled=True, help="Dispon√≠vel apenas para mensalidades pagas")
        
        # Boleto/Cobran√ßa
        if mensalidade["status"] not in ["Pago", "Cancelado"]:
            if st.button("üìÑ Boleto/Cobran√ßa", use_container_width=True):
                try:
                    st.success("‚úÖ Boleto gerado! (Funcionalidade em desenvolvimento)")
                except Exception as e:
                    st.error(f"‚ùå Erro ao gerar boleto: {str(e)}")
        else:
            st.button("üìÑ Boleto/Cobran√ßa", use_container_width=True, disabled=True, help="N√£o dispon√≠vel para mensalidades pagas ou canceladas")
    
    with col_rel2:
        # Declara√ß√£o de D√©bito
        if mensalidade["status"] in ["Atrasado", "A vencer"]:
            if st.button("‚ö†Ô∏è Declara√ß√£o de D√©bito", use_container_width=True):
                st.success("‚úÖ Declara√ß√£o gerada! (Em desenvolvimento)")
        
        # Hist√≥rico Completo
        if st.button("üìö Relat√≥rio Completo", use_container_width=True):
            st.success("‚úÖ Relat√≥rio gerado! (Em desenvolvimento)")
    
    # Se√ß√£o de relat√≥rios avan√ßados
    st.markdown("---")
    st.markdown("#### üìà Relat√≥rios Avan√ßados")
    
    with st.expander("‚öôÔ∏è Configurar Relat√≥rio Personalizado", expanded=False):
        with st.form("form_relatorio_personalizado"):
            st.markdown("**üìã Configura√ß√µes do Relat√≥rio:**")
            
            col_config1, col_config2 = st.columns(2)
            
            with col_config1:
                incluir_dados_aluno = st.checkbox("üë®‚Äçüéì Dados do Aluno", value=True)
                incluir_dados_responsavel = st.checkbox("üë• Dados do Respons√°vel", value=True)
                incluir_historico_pagamentos = st.checkbox("üí∞ Hist√≥rico de Pagamentos", value=True)
                incluir_observacoes = st.checkbox("üìù Observa√ß√µes", value=True)
            
            with col_config2:
                formato_relatorio = st.selectbox(
                    "üìÑ Formato:",
                    options=["PDF", "Word (DOCX)", "Excel (XLSX)"],
                    index=0
                )
                
                incluir_graficos = st.checkbox("üìä Incluir Gr√°ficos", value=False)
                incluir_timeline = st.checkbox("üìÖ Timeline de Eventos", value=False)
                logomark_empresa = st.checkbox("üè¢ Logo da Empresa", value=True)
            
            observacoes_relatorio = st.text_area(
                "üìù Observa√ß√µes para o Relat√≥rio:",
                placeholder="Adicione observa√ß√µes espec√≠ficas para este relat√≥rio..."
            )
            
            if st.form_submit_button("üìä Gerar Relat√≥rio Personalizado", type="primary"):
                # TODO: Implementar gera√ß√£o personalizada
                configuracao = {
                    "incluir_dados_aluno": incluir_dados_aluno,
                    "incluir_dados_responsavel": incluir_dados_responsavel,
                    "incluir_historico_pagamentos": incluir_historico_pagamentos,
                    "incluir_observacoes": incluir_observacoes,
                    "formato": formato_relatorio,
                    "incluir_graficos": incluir_graficos,
                    "incluir_timeline": incluir_timeline,
                    "logomark_empresa": logomark_empresa,
                    "observacoes": observacoes_relatorio
                }
                
                st.success(f"‚úÖ Relat√≥rio {formato_relatorio} configurado! (Em desenvolvimento)")
                st.json(configuracao)  # Preview da configura√ß√£o
    
    # Se√ß√£o de envio e compartilhamento
    st.markdown("---")
    st.markdown("#### üìß Envio e Compartilhamento")
    
    col_envio1, col_envio2, col_envio3 = st.columns(3)
    
    with col_envio1:
        if st.button("üìß Enviar por Email", use_container_width=True):
            # Buscar emails dos respons√°veis
            emails_responsaveis = [r["responsaveis"]["email"] for r in responsaveis if r["responsaveis"].get("email")]
            
            if emails_responsaveis:
                st.success(f"‚úÖ Email enviado para: {', '.join(emails_responsaveis)}")
                st.info("üîß Funcionalidade em desenvolvimento")
            else:
                st.error("‚ùå Nenhum email encontrado nos respons√°veis")
    
    with col_envio2:
        if st.button("üì± Compartilhar WhatsApp", use_container_width=True):
            # Buscar telefones dos respons√°veis
            telefones_responsaveis = [r["responsaveis"]["telefone"] for r in responsaveis if r["responsaveis"].get("telefone")]
            
            if telefones_responsaveis:
                st.success(f"‚úÖ Link gerado para: {', '.join(telefones_responsaveis)}")
                st.info("üîß Funcionalidade em desenvolvimento")
            else:
                st.error("‚ùå Nenhum telefone encontrado nos respons√°veis")
    
    with col_envio3:
        if st.button("üíæ Download Direto", use_container_width=True):
            st.success("‚úÖ Download iniciado!")
            st.info("üîß Funcionalidade em desenvolvimento")
    
    # Preview de dados para relat√≥rio
    with st.expander("üëÅÔ∏è Preview dos Dados do Relat√≥rio"):
        st.markdown("**üìä Dados que ser√£o inclu√≠dos no relat√≥rio:**")
        
        # Resumo da mensalidade
        col_preview1, col_preview2 = st.columns(2)
        
        with col_preview1:
            st.markdown("**üí∞ Mensalidade:**")
            st.text(f"M√™s: {mensalidade['mes_referencia']}")
            st.text(f"Valor: {formatar_valor_br(mensalidade['valor'])}")
            st.text(f"Vencimento: {formatar_data_br(mensalidade['data_vencimento'])}")
            st.text(f"Status: {mensalidade['status']}")
        
        with col_preview2:
            st.markdown("**üë®‚Äçüéì Aluno:**")
            st.text(f"Nome: {aluno['nome']}")
            st.text(f"Turma: {aluno['turmas']['nome_turma']}")
            st.text(f"Turno: {aluno.get('turno', 'N/A')}")
        
        if responsaveis:
            st.markdown("**üë• Respons√°veis:**")
            for resp in responsaveis:
                resp_data = resp["responsaveis"]
                st.text(f"‚Ä¢ {resp_data['nome']} ({resp.get('parentesco', 'N/A')})")

# ==========================================================
# ü§ñ ABA 6: PROCESSAMENTO AUTOM√ÅTICO
# ==========================================================

def renderizar_aba_processamento_automatico(dados: Dict):
    """Renderiza a aba de processamento automatizado simplificado"""
    
    st.markdown("### ü§ñ Processamento Automatizado Simplificado")
    st.markdown("""
    **Turmas-alvo:** Ber√ß√°rio, Infantil I, Infantil II, Infantil III
    
    Esta funcionalidade gera mensalidades automaticamente para alunos eleg√≠veis e correlaciona
    com pagamentos PIX do extrato de forma inteligente e segura.
    """)
    
    # Inicializar estado da sess√£o de processamento
    if 'sessao_processamento_simples' not in st.session_state:
        st.session_state.sessao_processamento_simples = None
    if 'etapa_processamento_simples' not in st.session_state:
        st.session_state.etapa_processamento_simples = 1
    
    # Verificar se h√° uma sess√£o em andamento
    sessao = st.session_state.sessao_processamento_simples
    
    if sessao is None:
        # ==========================================================
        # TELA INICIAL: CONFIGURA√á√ÉO SIMPLIFICADA
        # ==========================================================
        renderizar_configuracao_inicial_simplificada()
    else:
        # ==========================================================
        # TELAS DE PROCESSAMENTO BASEADAS NA ETAPA
        # ==========================================================
        if sessao.etapa_atual == 1:
            renderizar_etapa_1_simplificada(sessao)
        elif sessao.etapa_atual == 2:
            renderizar_etapa_2_simplificada(sessao)
        else:
            renderizar_resultado_final_simplificado(sessao)

def renderizar_configuracao_inicial_simplificada():
    """Renderiza a tela inicial de configura√ß√£o simplificada"""
    
    st.markdown("#### ‚öôÔ∏è Configura√ß√£o do Processamento")
    
    # Informa√ß√µes sobre as turmas-alvo
    st.info("""
    **üéØ Turmas processadas automaticamente:**
    - Ber√ß√°rio
    - Infantil I  
    - Infantil II
    - Infantil III
    
    **üìã Crit√©rios de elegibilidade:**
    - Aluno n√£o possui mensalidades geradas
    - Possui data de matr√≠cula definida
    - Possui dia de vencimento definido
    - Possui valor de mensalidade > 0
    """)
    
    # Interface de configura√ß√£o simplificada
    with st.form("form_configuracao_processamento_simples"):
        col_config1, col_config2 = st.columns(2)
        
        with col_config1:
            st.markdown("**üìù Identifica√ß√£o da Sess√£o:**")
            
            nome_sessao = st.text_input(
                "Nome da Sess√£o:",
                value=f"Processamento {datetime.now().strftime('%d/%m/%Y %H:%M')}",
                help="Nome para identificar esta sess√£o de processamento"
            )
            
            modo_teste = st.checkbox(
                "üß™ Modo de Teste (Recomendado)",
                value=True,
                help="Se marcado, adiciona identifica√ß√£o especial aos dados para teste"
            )
        
        with col_config2:
            st.markdown("**üìä Informa√ß√µes do Sistema:**")
            
            # Mostrar preview r√°pido dos dados
            with st.spinner("üîÑ Verificando dados..."):
                turmas_alvo = ["ber√ß√°rio", "infantil i", "infantil ii", "infantil iii"]
                alunos_elegiveis = identificar_alunos_elegiveis(turmas_alvo)
                
                st.write(f"üë• **Alunos eleg√≠veis:** {len(alunos_elegiveis)}")
                st.write(f"üéì **Turmas processadas:** 4 turmas")
                st.write(f"üß™ **Modo:** {'Teste (seguro)' if modo_teste else '‚ö†Ô∏è PRODU√á√ÉO'}")
        
        # Bot√µes de a√ß√£o
        st.markdown("---")
        col_btn1, col_btn2, col_btn3 = st.columns([1, 1, 1])
        
        with col_btn1:
            iniciar_processamento = st.form_submit_button(
                "üöÄ Iniciar Processamento",
                type="primary"
            )
        
        with col_btn2:
            if st.form_submit_button("üìä Preview", type="secondary"):
                st.info("üìã Preview dos alunos eleg√≠veis mostrado acima")
        
        with col_btn3:
            if st.form_submit_button("üîÑ Atualizar", type="secondary"):
                st.rerun()
        
        # Processar in√≠cio se solicitado
        if iniciar_processamento:
            with st.spinner("ü§ñ Iniciando processamento automatizado..."):
                try:
                    turmas_alvo = ["ber√ß√°rio", "infantil i", "infantil ii", "infantil iii"]
                    
                    sessao = iniciar_processamento_simplificado(
                        turmas_nomes=turmas_alvo,
                        nome_sessao=nome_sessao,
                        modo_teste=modo_teste
                    )
                    
                    # Salvar na sess√£o
                    st.session_state.sessao_processamento_simples = sessao
                    st.session_state.etapa_processamento_simples = 1
                    
                    if sessao.id != "ERRO":
                        st.success(f"‚úÖ Processamento iniciado! Identificados {len(sessao.alunos_elegiveis)} alunos.")
                        st.rerun()
                    else:
                        st.error("‚ùå Erro ao iniciar processamento")
                    
                except Exception as e:
                    st.error(f"‚ùå Erro ao iniciar processamento: {str(e)}")

def renderizar_etapa_1_simplificada(sessao: SessaoProcessamentoSimplificada):
    """Renderiza a primeira etapa: valida√ß√£o das mensalidades geradas"""
    
    st.markdown("#### üìã Etapa 1: Valida√ß√£o das Mensalidades Geradas")
    st.markdown(f"**Sess√£o:** {sessao.nome} | **Modo:** {'üß™ Teste' if sessao.modo_teste else '‚ö†Ô∏è PRODU√á√ÉO'}")
    
    if not sessao.alunos_elegiveis:
        st.warning("‚ö†Ô∏è Nenhum aluno eleg√≠vel foi encontrado")
        if st.button("üîÑ Tentar Novamente", type="primary"):
            st.session_state.sessao_processamento_simples = None
            st.rerun()
        return
    
    # Estat√≠sticas gerais
    col_stat1, col_stat2, col_stat3, col_stat4 = st.columns(4)
    
    with col_stat1:
        st.metric("üë• Alunos Eleg√≠veis", len(sessao.alunos_elegiveis))
    
    with col_stat2:
        total_mensalidades = sum(len(a.mensalidades_a_gerar) for a in sessao.alunos_elegiveis)
        st.metric("üìã Mensalidades Geradas", total_mensalidades)
    
    with col_stat3:
        valor_total = sum(sum(float(m["valor"]) for m in a.mensalidades_a_gerar) for a in sessao.alunos_elegiveis)
        st.metric("üí∞ Valor Total", f"R$ {valor_total:,.2f}")
    
    with col_stat4:
        alunos_com_pagamentos = len([a for a in sessao.alunos_elegiveis if a.pagamentos_correlacionados])
        st.metric("üîó Com Correla√ß√µes", alunos_com_pagamentos)
    
    # Lista de mensalidades geradas
    st.markdown("---")
    st.markdown("### üìã Mensalidades Geradas por Aluno")
    
    st.info("""
    **üìù Instru√ß√µes:**
    - Revise as mensalidades geradas automaticamente
    - Voc√™ pode editar valores e datas antes de prosseguir
    - Marque/desmarque alunos que deseja incluir no processamento
    """)
    
    # Lista de alunos com mensalidades
    for i, aluno in enumerate(sessao.alunos_elegiveis):
        # Inicializar status se n√£o existir
        if not hasattr(aluno, 'incluir_processamento'):
            aluno.incluir_processamento = True
        
        # Checkbox para incluir/excluir aluno
        incluir = st.checkbox(
            f"Incluir {aluno.nome} - {aluno.turma_nome} no processamento",
            value=aluno.incluir_processamento,
            key=f"incluir_aluno_{i}"
        )
        aluno.incluir_processamento = incluir
        
        if incluir and aluno.mensalidades_a_gerar:
            with st.expander(f"üìã {aluno.nome} - {len(aluno.mensalidades_a_gerar)} mensalidades", expanded=False):
                
                col_info1, col_info2 = st.columns([1, 1])
                
                with col_info1:
                    st.markdown("**üë®‚Äçüéì Dados do Aluno:**")
                    st.write(f"‚Ä¢ Nome: {aluno.nome}")
                    st.write(f"‚Ä¢ Turma: {aluno.turma_nome}")
                    st.write(f"‚Ä¢ Valor Mensalidade: R$ {aluno.valor_mensalidade:.2f}")
                    st.write(f"‚Ä¢ Dia Vencimento: {aluno.dia_vencimento}")
                
                with col_info2:
                    st.markdown("**üìä Resumo das Mensalidades:**")
                    st.write(f"‚Ä¢ Quantidade: {len(aluno.mensalidades_a_gerar)}")
                    valor_total = sum(float(m['valor']) for m in aluno.mensalidades_a_gerar)
                    st.write(f"‚Ä¢ Valor Total: R$ {valor_total:.2f}")
                    
                    if aluno.mensalidades_a_gerar:
                        primeiro_mes = aluno.mensalidades_a_gerar[0]['mes_referencia']
                        ultimo_mes = aluno.mensalidades_a_gerar[-1]['mes_referencia']
                        st.write(f"‚Ä¢ Per√≠odo: {primeiro_mes} a {ultimo_mes}")
                
                # Tabela das mensalidades
                st.markdown("**üìã Mensalidades a serem criadas:**")
                
                # Preparar dados para exibi√ß√£o
                dados_mensalidades = []
                for j, mens in enumerate(aluno.mensalidades_a_gerar):
                    dados_mensalidades.append({
                        "M√™s": mens['mes_referencia'],
                        "Vencimento": mens['data_vencimento'],
                        "Valor": f"R$ {float(mens['valor']):.2f}",
                        "Status": "A vencer"
                    })
                
                if dados_mensalidades:
                    df_mensalidades = pd.DataFrame(dados_mensalidades)
                    st.dataframe(df_mensalidades, hide_index=True, use_container_width=True)
                
                # Op√ß√£o para editar valores
                if st.button(f"‚úèÔ∏è Editar Mensalidades de {aluno.nome}", key=f"editar_{i}"):
                    st.session_state[f'editando_aluno_{i}'] = True
                    st.rerun()
                
                # Formul√°rio de edi√ß√£o (se ativo)
                if st.session_state.get(f'editando_aluno_{i}', False):
                    st.markdown("##### ‚úèÔ∏è Editar Mensalidades")
                    
                    with st.form(f"form_edicao_{i}"):
                        novo_valor = st.number_input(
                            "Novo valor para todas as mensalidades:",
                            min_value=0.01,
                            value=aluno.valor_mensalidade,
                            step=0.01,
                            format="%.2f"
                        )
                        
                        col_btn1, col_btn2 = st.columns(2)
                        
                        with col_btn1:
                            if st.form_submit_button("üíæ Aplicar Mudan√ßas"):
                                # Atualizar valores
                                for mens in aluno.mensalidades_a_gerar:
                                    mens['valor'] = novo_valor
                                
                                st.session_state[f'editando_aluno_{i}'] = False
                                st.success("‚úÖ Valores atualizados!")
                                st.rerun()
                        
                        with col_btn2:
                            if st.form_submit_button("‚ùå Cancelar"):
                                st.session_state[f'editando_aluno_{i}'] = False
                                st.rerun()
        
        elif not aluno.mensalidades_a_gerar:
            st.warning(f"‚ö†Ô∏è {aluno.nome}: Nenhuma mensalidade foi gerada")
        
        elif not incluir:
            st.info(f"‚ÑπÔ∏è {aluno.nome}: Exclu√≠do do processamento")
    
    # Bot√µes de navega√ß√£o
    st.markdown("---")
    col_nav1, col_nav2, col_nav3 = st.columns([1, 1, 1])
    
    with col_nav1:
        if st.button("‚óÄÔ∏è Cancelar Processamento", type="secondary"):
            st.session_state.sessao_processamento_simples = None
            st.rerun()
    
    with col_nav3:
        alunos_selecionados = [a for a in sessao.alunos_elegiveis if getattr(a, 'incluir_processamento', True)]
        total_mensalidades = sum(len(a.mensalidades_a_gerar) for a in alunos_selecionados)
        
        if st.button(
            f"‚ñ∂Ô∏è Pr√≥xima Etapa ({len(alunos_selecionados)} alunos, {total_mensalidades} mensalidades)",
            type="primary",
            disabled=len(alunos_selecionados) == 0
        ):
            sessao.etapa_atual = 2
            st.rerun()

def renderizar_etapa_2_simplificada(sessao: SessaoProcessamentoSimplificada):
    """Renderiza a segunda etapa: correla√ß√£o com pagamentos PIX"""
    
    st.markdown("#### üîó Etapa 2: Correla√ß√£o com Pagamentos PIX")
    st.markdown(f"**Sess√£o:** {sessao.nome}")
    
    alunos_selecionados = [a for a in sessao.alunos_elegiveis if getattr(a, 'incluir_processamento', True)]
    
    if not alunos_selecionados:
        st.error("‚ùå Nenhum aluno selecionado para prosseguir")
        if st.button("‚óÄÔ∏è Voltar", type="secondary"):
            sessao.etapa_atual = 1
            st.rerun()
        return
    
    # Estat√≠sticas da etapa
    col_stat1, col_stat2, col_stat3 = st.columns(3)
    
    with col_stat1:
        st.metric("üë• Alunos Selecionados", len(alunos_selecionados))
    
    with col_stat2:
        total_mensalidades = sum(len(a.mensalidades_a_gerar) for a in alunos_selecionados)
        st.metric("üìã Mensalidades a Criar", total_mensalidades)
    
    with col_stat3:
        total_correlacoes = sum(len(a.pagamentos_correlacionados) for a in alunos_selecionados)
        st.metric("üîó Correla√ß√µes PIX", total_correlacoes)
    
    # Lista de correla√ß√µes
    st.markdown("---")
    st.markdown("### üîó Correla√ß√µes com Pagamentos PIX")
    
    st.info("""
    **üìã Resumo da Etapa 2:**
    - Mensalidades foram geradas automaticamente baseadas na data de matr√≠cula
    - Sistema identificou pagamentos PIX que podem estar relacionados aos alunos
    - Revise as correla√ß√µes abaixo antes de executar as a√ß√µes
    """)
    
    for i, aluno in enumerate(alunos_selecionados):
        with st.expander(f"üîó {aluno.nome} - {aluno.turma_nome}", expanded=False):
            
            col_resumo1, col_resumo2 = st.columns(2)
            
            with col_resumo1:
                st.markdown("**üìä Mensalidades a Criar:**")
                st.write(f"‚Ä¢ Quantidade: {len(aluno.mensalidades_a_gerar)}")
                if aluno.mensalidades_a_gerar:
                    valor_total = sum(float(m['valor']) for m in aluno.mensalidades_a_gerar)
                    st.write(f"‚Ä¢ Valor Total: R$ {valor_total:.2f}")
                    st.write(f"‚Ä¢ Primeira: {aluno.mensalidades_a_gerar[0]['mes_referencia']}")
                    st.write(f"‚Ä¢ √öltima: {aluno.mensalidades_a_gerar[-1]['mes_referencia']}")
            
            with col_resumo2:
                st.markdown("**üí∞ Pagamentos PIX Correlacionados:**")
                if aluno.pagamentos_correlacionados:
                    st.write(f"‚Ä¢ Encontrados: {len(aluno.pagamentos_correlacionados)}")
                    for j, pag in enumerate(aluno.pagamentos_correlacionados[:3], 1):  # Mostrar apenas os 3 primeiros
                        st.write(f"‚Ä¢ PIX {j}: R$ {pag['valor']:.2f} - {pag['nome_remetente'][:30]}...")
                    
                    if len(aluno.pagamentos_correlacionados) > 3:
                        st.write(f"‚Ä¢ ... e mais {len(aluno.pagamentos_correlacionados) - 3}")
                else:
                    st.write("‚Ä¢ Nenhum pagamento correlacionado automaticamente")
                    st.write("‚Ä¢ Mensalidades ser√£o criadas sem vincula√ß√£o inicial")
            
            # Detalhamento completo (opcional)
            if st.button(f"üìã Ver Detalhes Completos de {aluno.nome}", key=f"detalhes_{i}"):
                st.session_state[f'mostrar_detalhes_{i}'] = not st.session_state.get(f'mostrar_detalhes_{i}', False)
                st.rerun()
            
            if st.session_state.get(f'mostrar_detalhes_{i}', False):
                st.markdown("##### üìã Mensalidades Detalhadas:")
                dados_mens = []
                for mens in aluno.mensalidades_a_gerar:
                    dados_mens.append({
                        "M√™s": mens['mes_referencia'],
                        "Vencimento": mens['data_vencimento'],
                        "Valor": f"R$ {float(mens['valor']):.2f}"
                    })
                
                if dados_mens:
                    df_mens = pd.DataFrame(dados_mens)
                    st.dataframe(df_mens, hide_index=True, use_container_width=True)
                
                if aluno.pagamentos_correlacionados:
                    st.markdown("##### üí∞ Pagamentos PIX Detalhados:")
                    dados_pix = []
                    for pix in aluno.pagamentos_correlacionados:
                        dados_pix.append({
                            "Data": pix['data_pagamento'],
                            "Valor": f"R$ {pix['valor']:.2f}",
                            "Remetente": pix['nome_remetente'],
                            "ID": pix['id']
                        })
                    
                    df_pix = pd.DataFrame(dados_pix)
                    st.dataframe(df_pix, hide_index=True, use_container_width=True)
    
    # Bot√µes de navega√ß√£o
    st.markdown("---")
    col_nav1, col_nav2, col_nav3 = st.columns([1, 1, 1])
    
    with col_nav1:
        if st.button("‚óÄÔ∏è Voltar", type="secondary"):
            sessao.etapa_atual = 1
            st.rerun()
    
    with col_nav2:
        st.markdown("**‚ö†Ô∏è Aten√ß√£o:** As a√ß√µes ser√£o executadas com identifica√ß√£o de teste")
    
    with col_nav3:
        if st.button("üöÄ EXECUTAR A√á√ïES", type="primary"):
            # Executar processamento
            with st.spinner("üíæ Executando a√ß√µes..."):
                resultado = executar_acoes_modo_teste(sessao)
                
                if resultado.get("success"):
                    st.success(f"""
                    ‚úÖ **A√ß√µes executadas com sucesso!**
                    
                    - Mensalidades criadas: {resultado.get('mensalidades_criadas', 0)}
                    - Correla√ß√µes registradas: {resultado.get('correlacoes_registradas', 0)}
                    """)
                    
                    sessao.etapa_atual = 3  # Ir para resultado final
                    st.rerun()
                else:
                    st.error(f"‚ùå Erro na execu√ß√£o: {resultado.get('error')}")



def renderizar_resultado_final_simplificado(sessao: SessaoProcessamentoSimplificada):
    """Renderiza o resultado final do processamento simplificado"""
    
    st.markdown("#### üéâ Processamento Conclu√≠do com Sucesso!")
    st.markdown(f"**Sess√£o:** {sessao.nome}")
    
    st.success("‚úÖ **Processamento automatizado executado com sucesso!**")
    
    # Estat√≠sticas finais
    alunos_processados = [a for a in sessao.alunos_elegiveis if getattr(a, 'incluir_processamento', True)]
    
    col_final1, col_final2, col_final3 = st.columns(3)
    
    with col_final1:
        st.metric("üë• Alunos Processados", len(alunos_processados))
    
    with col_final2:
        total_mensalidades = sum(len(a.mensalidades_a_gerar) for a in alunos_processados)
        st.metric("üìã Mensalidades Criadas", total_mensalidades)
    
    with col_final3:
        total_correlacoes = sum(len(a.pagamentos_correlacionados) for a in alunos_processados)
        st.metric("üîó Correla√ß√µes Registradas", total_correlacoes)
    
    # Pr√≥ximos passos
    st.markdown("---")
    st.markdown("### üéØ Pr√≥ximos Passos")
    
    if sessao.modo_teste:
        st.info("""
        üß™ **Dados com Identifica√ß√£o de Teste**
        
        As mensalidades foram criadas com identifica√ß√£o "[TESTE]":
        - Verifique os resultados na lista principal de mensalidades
        - Busque por mensalidades com observa√ß√£o contendo "[TESTE]"
        - As correla√ß√µes PIX foram registradas para auditoria
        """)
    else:
        st.warning("""
        ‚ö†Ô∏è **Dados Inseridos em Produ√ß√£o**
        
        As mensalidades foram criadas no banco de produ√ß√£o:
        - Verifique os resultados na interface principal
        - As mensalidades aparecem na lista normal
        - As correla√ß√µes PIX foram registradas
        """)
    
    # Resumo dos alunos processados
    st.markdown("### üìã Resumo dos Alunos Processados")
    
    for aluno in alunos_processados:
        if aluno.mensalidades_a_gerar:
            valor_total = sum(float(m['valor']) for m in aluno.mensalidades_a_gerar)
            st.markdown(f"""
            **{aluno.nome}** - {aluno.turma_nome}
            - üìã {len(aluno.mensalidades_a_gerar)} mensalidades criadas
            - üí∞ Valor total: R$ {valor_total:.2f}
            - üîó {len(aluno.pagamentos_correlacionados)} correla√ß√µes PIX
            """)
    
    # A√ß√µes finais
    st.markdown("---")
    col_acao1, col_acao2, col_acao3 = st.columns(3)
    
    with col_acao1:
        if st.button("üîÑ Novo Processamento", type="primary", use_container_width=True):
            st.session_state.sessao_processamento_simples = None
            st.session_state.etapa_processamento_simples = 1
            st.rerun()
    
    with col_acao2:
        if st.button("üìä Ver Mensalidades", use_container_width=True):
            st.info("üí° Volte para a interface principal para ver as mensalidades criadas")
    
    with col_acao3:
        if st.button("‚ùå Fechar Modal", use_container_width=True):
            st.session_state.modal_aberto = False
            st.session_state.id_mensalidade_modal = None
            st.rerun()

# ==========================================================
# üöÄ FUN√á√ÉO PRINCIPAL DO MODAL
# ==========================================================

def abrir_modal_mensalidade(id_mensalidade: str):
    """
    Fun√ß√£o principal para abrir o modal de mensalidade
    
    Args:
        id_mensalidade: ID da mensalidade para exibir
    """
    
    # Verificar se deve fechar o modal
    if st.session_state.get('fechar_modal', False):
        st.session_state.modal_aberto = False
        st.session_state.id_mensalidade_modal = None
        st.session_state.fechar_modal = False
        st.rerun()
    
    # Buscar dados completos
    with st.spinner("üîÑ Carregando dados da mensalidade..."):
        resultado = buscar_dados_completos_mensalidade(id_mensalidade)
    
    if not resultado.get("success"):
        st.error(f"‚ùå Erro ao carregar mensalidade: {resultado.get('error')}")
        return
    
    dados = resultado["dados"]
    
    # Inicializar estado das abas se necess√°rio
    if 'aba_ativa_modal' not in st.session_state:
        st.session_state.aba_ativa_modal = "Detalhes"
    
    # Renderizar header
    renderizar_header_modal(dados)
    
    # Tabs principais do modal
    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
        "üìã Detalhes",
        "‚úèÔ∏è Edi√ß√£o", 
        "‚ö° A√ß√µes",
        "üìö Hist√≥rico",
        "üìä Relat√≥rios",
        "ü§ñ Processamento"
    ])
    
    # Renderizar conte√∫do das abas
    with tab1:
        renderizar_aba_detalhes(dados)
    
    with tab2:
        renderizar_aba_edicao(dados)
    
    with tab3:
        renderizar_aba_acoes(dados)
    
    with tab4:
        renderizar_aba_historico(dados)
    
    with tab5:
        renderizar_aba_relatorios(dados)
    
    with tab6:
        renderizar_aba_processamento_automatico(dados)
    
    # Renderizar footer
    renderizar_footer_modal(dados)

# ==========================================================
# üéØ FUN√á√ÉO DE COMPATIBILIDADE
# ==========================================================

def open_modal(id_mensalidade: str):
    """Fun√ß√£o de compatibilidade com o sistema existente"""
    return abrir_modal_mensalidade(id_mensalidade) 