#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üß™ TESTE ESPEC√çFICO - CAMPO MENSALIDADES GERADAS
===============================================

Teste dedicado para validar a implementa√ß√£o do novo campo
"Mensalidades geradas?" no sistema de relat√≥rios pedag√≥gicos.
"""

import os
import sys
from datetime import datetime

# Adicionar o diret√≥rio atual ao path para importa√ß√µes
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def teste_campo_mensalidades_geradas():
    """Testa especificamente o campo mensalidades_geradas"""
    
    print("üß™ TESTE DO CAMPO 'MENSALIDADES GERADAS?'")
    print("=" * 60)
    
    try:
        from funcoes_relatorios import gerar_relatorio_interface, obter_campos_disponiveis
        
        # 1. Verificar se o campo est√° dispon√≠vel
        print("\nüîç ETAPA 1: Verificando disponibilidade do campo...")
        campos = obter_campos_disponiveis()
        
        if 'mensalidades_geradas' in campos['aluno']:
            print("‚úÖ Campo 'mensalidades_geradas' encontrado!")
            print(f"üìù Descri√ß√£o: {campos['aluno']['mensalidades_geradas']}")
        else:
            print("‚ùå Campo 'mensalidades_geradas' N√ÉO encontrado!")
            return False
        
        # 2. Testar gera√ß√£o de relat√≥rio com o campo
        print("\nüöÄ ETAPA 2: Testando gera√ß√£o de relat√≥rio...")
        
        configuracao = {
            'turmas_selecionadas': ['Ber√ß√°rio'],
            'campos_selecionados': ['nome', 'mensalidades_geradas'],
            'situacoes_filtradas': ['matriculado', 'trancado']
        }
        
        print(f"üìã Configura√ß√£o do teste:")
        print(f"   - Turmas: {configuracao['turmas_selecionadas']}")
        print(f"   - Campos: {configuracao['campos_selecionados']}")
        print(f"   - Situa√ß√µes: {configuracao['situacoes_filtradas']}")
        
        resultado = gerar_relatorio_interface('pedagogico', configuracao)
        
        if resultado.get('success'):
            print("‚úÖ Relat√≥rio gerado com sucesso!")
            print(f"üìä Total de alunos: {resultado.get('total_alunos', 0)}")
            print(f"üìù Campos selecionados: {resultado.get('campos_selecionados', [])}")
            print(f"üìÑ Arquivo: {resultado.get('nome_arquivo', 'N/A')}")
            
            # Verificar se o campo est√° presente nos campos selecionados
            if 'mensalidades_geradas' in resultado.get('campos_selecionados', []):
                print("‚úÖ Campo 'mensalidades_geradas' inclu√≠do no relat√≥rio!")
            else:
                print("‚ùå Campo 'mensalidades_geradas' N√ÉO inclu√≠do no relat√≥rio!")
                return False
            
            # 3. Verificar arquivo gerado
            print("\nüìÅ ETAPA 3: Verificando arquivo gerado...")
            
            if resultado.get('arquivo') and os.path.exists(resultado['arquivo']):
                print("‚úÖ Arquivo .docx criado com sucesso!")
                print(f"üìÇ Localiza√ß√£o: {resultado['arquivo']}")
                
                # Tentar ler o conte√∫do do arquivo
                try:
                    from docx import Document
                    doc = Document(resultado['arquivo'])
                    conteudo = ""
                    for paragraph in doc.paragraphs:
                        conteudo += paragraph.text + " "
                    
                    # Verificar se o campo aparece no conte√∫do
                    if "Mensalidades geradas" in conteudo or "mensalidades" in conteudo.lower():
                        print("‚úÖ Campo encontrado no conte√∫do do relat√≥rio!")
                        
                        # Verificar formata√ß√£o de valores booleanos
                        if "Sim" in conteudo or "N√£o" in conteudo:
                            print("‚úÖ Valores booleanos formatados corretamente (Sim/N√£o)!")
                        else:
                            print("‚ö†Ô∏è Formata√ß√£o de valores booleanos pode n√£o estar correta")
                        
                        return True
                    else:
                        print("‚ùå Campo n√£o encontrado no conte√∫do do relat√≥rio!")
                        return False
                
                except ImportError:
                    print("‚ö†Ô∏è python-docx n√£o dispon√≠vel para verificar conte√∫do")
                    print("‚úÖ Mas o arquivo foi gerado com sucesso!")
                    return True
                
                except Exception as e:
                    print(f"‚ö†Ô∏è Erro ao ler arquivo: {e}")
                    print("‚úÖ Mas o arquivo foi gerado com sucesso!")
                    return True
            else:
                print("‚ùå Arquivo n√£o foi gerado!")
                return False
        
        else:
            print(f"‚ùå Erro na gera√ß√£o do relat√≥rio: {resultado.get('error')}")
            return False
    
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        return False
    
    except Exception as e:
        print(f"‚ùå Erro durante teste: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Fun√ß√£o principal"""
    print("üéØ INICIANDO TESTE DO CAMPO MENSALIDADES GERADAS")
    print(f"üìÖ Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print("=" * 60)
    
    sucesso = teste_campo_mensalidades_geradas()
    
    print("\n" + "=" * 60)
    if sucesso:
        print("üéâ TESTE CONCLU√çDO COM SUCESSO!")
        print("‚úÖ Campo 'Mensalidades geradas?' implementado corretamente!")
        print("üí° O campo est√° pronto para uso nos relat√≥rios pedag√≥gicos")
    else:
        print("‚ùå TESTE FALHOU!")
        print("‚ö†Ô∏è H√° problemas na implementa√ß√£o do campo")
    
    print("=" * 60)

if __name__ == "__main__":
    main() 