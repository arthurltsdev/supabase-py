#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üß™ TESTE DAS MELHORIAS NO SISTEMA DE RELAT√ìRIOS PEDAG√ìGICOS
===========================================================

Teste para validar as melhorias implementadas:
1. Filtro de situa√ß√£o funcionando corretamente
2. Campos selecionados sendo respeitados
3. Formata√ß√£o especial para campos vazios
4. Campos de sa√≠da para alunos trancados
5. Controle do campo OBSERVA√á√ïES
"""

import os
import sys
from datetime import datetime

# Adicionar o diret√≥rio atual ao path para importa√ß√µes
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def teste_melhorias_relatorios():
    """Executa testes das melhorias implementadas"""
    
    print("üß™ INICIANDO TESTES DAS MELHORIAS DE RELAT√ìRIOS")
    print("=" * 60)
    
    try:
        # Importar fun√ß√µes necess√°rias
        from funcoes_relatorios import gerar_relatorio_interface, obter_campos_disponiveis
        from models.pedagogico import listar_turmas_disponiveis
        
        print("‚úÖ Importa√ß√µes realizadas com sucesso")
        
        # 1. TESTE DE FILTRO DE SITUA√á√ÉO
        print("\nüîç TESTE 1: Filtro de Situa√ß√£o")
        print("-" * 40)
        
        # Obter turmas dispon√≠veis
        turmas_resultado = listar_turmas_disponiveis()
        if not turmas_resultado.get("success"):
            print("‚ùå Erro ao obter turmas:", turmas_resultado.get("error"))
            return
        
        turmas_disponiveis = turmas_resultado["turmas"]
        print(f"üìã Turmas dispon√≠veis: {turmas_disponiveis}")
        
        # Usar a primeira turma dispon√≠vel para teste
        if not turmas_disponiveis:
            print("‚ùå Nenhuma turma dispon√≠vel para teste")
            return
            
        turma_teste = turmas_disponiveis[0]
        print(f"üéì Usando turma para teste: {turma_teste}")
        
        # 2. TESTE COM CAMPOS ESPEC√çFICOS
        print("\nüìã TESTE 2: Campos Selecionados Espec√≠ficos")
        print("-" * 40)
        
        # Configura√ß√£o do teste: apenas nome do aluno + situa√ß√£o + nome do respons√°vel
        configuracao_teste = {
            "turmas_selecionadas": [turma_teste],
            "campos_selecionados": ["nome", "situacao", "nome"],  # nome do aluno + situa√ß√£o + nome do respons√°vel
            "situacoes_filtradas": ["matriculado"]  # Apenas alunos matriculados
        }
        
        print(f"üîß Configura√ß√£o do teste:")
        print(f"   - Turmas: {configuracao_teste['turmas_selecionadas']}")
        print(f"   - Campos: {configuracao_teste['campos_selecionados']}")
        print(f"   - Situa√ß√µes: {configuracao_teste['situacoes_filtradas']}")
        
        # 3. EXECUTAR GERA√á√ÉO DO RELAT√ìRIO
        print("\nüöÄ TESTE 3: Gera√ß√£o do Relat√≥rio")
        print("-" * 40)
        
        resultado = gerar_relatorio_interface("pedagogico", configuracao_teste)
        
        if resultado.get("success"):
            print("‚úÖ Relat√≥rio gerado com sucesso!")
            print(f"üìÑ Arquivo: {resultado['nome_arquivo']}")
            print(f"üë®‚Äçüéì Total de alunos: {resultado['total_alunos']}")
            print(f"üéì Turmas: {resultado['turmas_incluidas']}")
            print(f"üìã Campos: {resultado['campos_selecionados']}")
            print(f"‚öôÔ∏è Situa√ß√µes filtradas: {resultado.get('situacoes_filtradas', 'N/A')}")
            
            # Verificar se o arquivo foi criado
            if os.path.exists(resultado["arquivo"]):
                print(f"üìÅ Arquivo criado em: {resultado['arquivo']}")
                
                # Verificar tamanho do arquivo
                tamanho = os.path.getsize(resultado["arquivo"])
                print(f"üìä Tamanho do arquivo: {tamanho} bytes")
                
                if tamanho > 1000:  # Arquivo deve ter pelo menos 1KB
                    print("‚úÖ Arquivo tem tamanho adequado")
                else:
                    print("‚ö†Ô∏è Arquivo muito pequeno, pode haver problema")
            else:
                print("‚ùå Arquivo n√£o encontrado no caminho especificado")
                
        else:
            print("‚ùå Erro na gera√ß√£o do relat√≥rio:")
            print(f"   Erro: {resultado.get('error')}")
            return
        
        # 4. TESTE COM FILTRO DE SITUA√á√ÉO "TRANCADO"
        print("\nüîí TESTE 4: Filtro para Alunos Trancados")
        print("-" * 40)
        
        configuracao_trancados = {
            "turmas_selecionadas": [turma_teste],
            "campos_selecionados": ["nome", "situacao", "data_saida", "motivo_saida", "nome"],  # Incluir campos de sa√≠da
            "situacoes_filtradas": ["trancado"]  # Apenas alunos trancados
        }
        
        resultado_trancados = gerar_relatorio_interface("pedagogico", configuracao_trancados)
        
        if resultado_trancados.get("success"):
            print("‚úÖ Relat√≥rio de trancados gerado com sucesso!")
            print(f"üë®‚Äçüéì Total de alunos trancados: {resultado_trancados['total_alunos']}")
            
            if resultado_trancados['total_alunos'] == 0:
                print("‚ÑπÔ∏è Nenhum aluno trancado encontrado (isso √© normal)")
            else:
                print(f"üìÑ Arquivo de trancados: {resultado_trancados['nome_arquivo']}")
        else:
            print("‚ùå Erro na gera√ß√£o do relat√≥rio de trancados:")
            print(f"   Erro: {resultado_trancados.get('error')}")
        
        # 5. TESTE COM TODOS OS CAMPOS
        print("\nüìã TESTE 5: Todos os Campos Dispon√≠veis")
        print("-" * 40)
        
        campos_disponiveis = obter_campos_disponiveis()
        todos_campos_aluno = list(campos_disponiveis["aluno"].keys())
        todos_campos_responsavel = list(campos_disponiveis["responsavel"].keys())
        todos_campos = todos_campos_aluno + todos_campos_responsavel
        
        print(f"üîß Testando com todos os campos ({len(todos_campos)} campos):")
        print(f"   - Aluno: {todos_campos_aluno}")
        print(f"   - Respons√°vel: {todos_campos_responsavel}")
        
        configuracao_completa = {
            "turmas_selecionadas": [turma_teste],
            "campos_selecionados": todos_campos,
            "situacoes_filtradas": ["matriculado", "trancado", "problema"]  # Todas as situa√ß√µes
        }
        
        resultado_completo = gerar_relatorio_interface("pedagogico", configuracao_completa)
        
        if resultado_completo.get("success"):
            print("‚úÖ Relat√≥rio completo gerado com sucesso!")
            print(f"üë®‚Äçüéì Total de alunos (todas situa√ß√µes): {resultado_completo['total_alunos']}")
            print(f"üìÑ Arquivo completo: {resultado_completo['nome_arquivo']}")
        else:
            print("‚ùå Erro na gera√ß√£o do relat√≥rio completo:")
            print(f"   Erro: {resultado_completo.get('error')}")
        
        print("\n" + "="*60)
        print("üß™ TESTE 5: CAMPO MENSALIDADES GERADAS")
        print("="*60)
        
        print("\nüîç Testando campo 'Mensalidades geradas?' nos relat√≥rios...")
        
        # Configura√ß√£o do teste 
        turmas_teste = ["Ber√ß√°rio"]
        campos_teste = ["nome", "mensalidades_geradas"]  # Incluir o novo campo
        situacoes_teste = ["matriculado"]
        
        try:
            # Gerar relat√≥rio pedag√≥gico com o novo campo
            resultado = gerar_relatorio_interface("pedagogico", {"turmas_selecionadas": turmas_teste, "campos_selecionados": campos_teste, "situacoes_filtradas": situacoes_teste})
            
            if resultado.get("success"):
                print("‚úÖ Relat√≥rio gerado com sucesso!")
                print(f"üìã Turmas: {', '.join(resultado.get('turmas_incluidas', []))}")
                print(f"üìä Total de alunos: {resultado.get('total_alunos', 0)}")
                print(f"üìù Campos selecionados: {', '.join(resultado.get('campos_selecionados', []))}")
                
                # Verificar se o campo mensalidades_geradas est√° presente
                if "mensalidades_geradas" in resultado.get('campos_selecionados', []):
                    print("‚úÖ Campo 'Mensalidades geradas?' inclu√≠do corretamente!")
                else:
                    print("‚ùå Campo 'Mensalidades geradas?' n√£o encontrado nos campos selecionados!")
                
                # Verificar arquivo gerado
                if resultado.get("arquivo") and os.path.exists(resultado["arquivo"]):
                    print(f"üìÅ Arquivo gerado: {resultado.get('nome_arquivo')}")
                    print("‚úÖ Arquivo .docx criado com sucesso!")
                    
                    # Tentar ler conte√∫do para verificar se o campo aparece
                    print("\nüìñ Verificando conte√∫do do relat√≥rio...")
                    try:
                        from docx import Document
                        doc = Document(resultado["arquivo"])
                        conteudo_doc = ""
                        for paragraph in doc.paragraphs:
                            conteudo_doc += paragraph.text + "\n"
                        
                        # Verificar se o campo aparece no conte√∫do
                        if "Mensalidades geradas" in conteudo_doc or "mensalidades" in conteudo_doc.lower():
                            print("‚úÖ Campo 'Mensalidades geradas?' encontrado no conte√∫do do relat√≥rio!")
                            
                            # Buscar por valores Sim/N√£o
                            if "Sim" in conteudo_doc or "N√£o" in conteudo_doc:
                                print("‚úÖ Valores booleanos formatados corretamente (Sim/N√£o)!")
                            else:
                                print("‚ö†Ô∏è Valores booleanos podem n√£o estar formatados como esperado")
                        else:
                            print("‚ùå Campo 'Mensalidades geradas?' n√£o encontrado no conte√∫do!")
                    
                    except Exception as e:
                        print(f"‚ö†Ô∏è N√£o foi poss√≠vel verificar o conte√∫do do documento: {e}")
                else:
                    print("‚ùå Arquivo n√£o foi gerado ou n√£o existe!")
            else:
                print(f"‚ùå Erro na gera√ß√£o do relat√≥rio: {resultado.get('error')}")
        
        except Exception as e:
            print(f"‚ùå Erro no teste: {e}")
        
        print("\n" + "="*60)
        print("üìä RESUMO DOS TESTES CONCLU√çDO")
        print("="*60)
        print("‚úÖ Todos os testes executados!")
        print("üí° Verifique os arquivos gerados na pasta temp_reports/")
        print("üîß Melhorias implementadas com sucesso!")
    
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        print("üí° Certifique-se de que todos os m√≥dulos est√£o dispon√≠veis")
    except Exception as e:
        print(f"‚ùå Erro durante teste: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    teste_melhorias_relatorios() 