#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üß™ TESTE DAS MELHORIAS NO SISTEMA DE RELAT√ìRIOS FINANCEIROS
===========================================================

Teste para validar as melhorias implementadas nos relat√≥rios financeiros:
1. Organiza√ß√£o por status de mensalidades (A vencer, Pagas, Atrasadas, Canceladas)
2. Campos espec√≠ficos para cada tipo de se√ß√£o
3. Inclus√£o de alunos sem mensalidades com "MENSALIDADES: N√ÉO GERADAS"
4. Respeito aos filtros de per√≠odo
5. Formata√ß√£o especial para campos vazios
"""

import os
import sys
from datetime import datetime, date

# Adicionar o diret√≥rio atual ao path para importa√ß√µes
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def teste_melhorias_relatorios_financeiros():
    """Executa testes das melhorias implementadas nos relat√≥rios financeiros"""
    
    print("üß™ INICIANDO TESTES DAS MELHORIAS DE RELAT√ìRIOS FINANCEIROS")
    print("=" * 70)
    
    try:
        from funcoes_relatorios import (
            gerar_relatorio_interface,
            obter_campos_disponiveis,
            DOCX_AVAILABLE
        )
        
        if not DOCX_AVAILABLE:
            print("‚ùå python-docx n√£o dispon√≠vel. Execute: pip install python-docx")
            return False
        
        print("‚úÖ M√≥dulos importados com sucesso")
        
    except ImportError as e:
        print(f"‚ùå Erro ao importar m√≥dulos: {e}")
        return False
    
    # TESTE 1: Verificar campos dispon√≠veis para relat√≥rios financeiros
    print("\n" + "="*70)
    print("üß™ TESTE 1: CAMPOS DISPON√çVEIS PARA RELAT√ìRIOS FINANCEIROS")
    print("="*70)
    
    try:
        campos = obter_campos_disponiveis()
        
        print("‚úÖ Campos do aluno dispon√≠veis:")
        for key, desc in campos['aluno'].items():
            print(f"   - {key}: {desc}")
        
        print("\n‚úÖ Campos do respons√°vel dispon√≠veis:")
        for key, desc in campos['responsavel'].items():
            print(f"   - {key}: {desc}")
        
        print("\n‚úÖ Campos de mensalidade dispon√≠veis:")
        for key, desc in campos['mensalidade'].items():
            print(f"   - {key}: {desc}")
        
        # Verificar se o campo valor_pago foi adicionado
        if 'valor_pago' in campos['mensalidade']:
            print("‚úÖ Campo 'Valor Pago' adicionado corretamente aos campos de mensalidade!")
        else:
            print("‚ùå Campo 'Valor Pago' n√£o encontrado nos campos de mensalidade")
        
    except Exception as e:
        print(f"‚ùå Erro ao obter campos dispon√≠veis: {e}")
        return False
    
    # TESTE 2: Relat√≥rio financeiro com m√∫ltiplos status
    print("\n" + "="*70)
    print("üß™ TESTE 2: RELAT√ìRIO FINANCEIRO COM M√öLTIPLOS STATUS")
    print("="*70)
    
    try:
        # Configura√ß√£o com m√∫ltiplos status de mensalidades
        config_multiplos_status = {
            'turmas_selecionadas': ['Ber√ß√°rio', 'Infantil I'],
            'campos_selecionados': [
                'nome',              # Campo do aluno
                'nome',              # Campo do respons√°vel (mesmo nome, contextos diferentes)
                'telefone',          # Campo do respons√°vel
                'mes_referencia',    # Campo da mensalidade
                'data_vencimento',   # Campo da mensalidade
                'valor',             # Campo da mensalidade
                'data_pagamento',    # Campo da mensalidade
                'valor_pago'         # Campo da mensalidade
            ],
            'filtros': {
                'status_mensalidades': ['A vencer', 'Pago', 'Atrasado'],  # M√∫ltiplos status
                'periodo_inicio': '2025-01-01',
                'periodo_fim': '2025-12-31'
            }
        }
        
        print("üöÄ Gerando relat√≥rio financeiro com m√∫ltiplos status...")
        resultado = gerar_relatorio_interface('financeiro', config_multiplos_status)
        
        if resultado.get('success'):
            print("‚úÖ Relat√≥rio financeiro gerado com sucesso!")
            print(f"üìã Total de alunos: {resultado.get('total_alunos', 0)}")
            print(f"üéì Turmas inclu√≠das: {', '.join(resultado.get('turmas_incluidas', []))}")
            print(f"üìä Status selecionados: {config_multiplos_status['filtros']['status_mensalidades']}")
            
            # Verificar se arquivo foi criado
            if resultado.get('arquivo') and os.path.exists(resultado['arquivo']):
                print(f"üìÑ Arquivo gerado: {resultado['nome_arquivo']}")
                print("‚úÖ Arquivo .docx criado com sucesso!")
            else:
                print("‚ö†Ô∏è Arquivo n√£o encontrado")
        
        else:
            print(f"‚ùå Erro na gera√ß√£o: {resultado.get('error')}")
            return False
    
    except Exception as e:
        print(f"‚ùå Erro no teste de m√∫ltiplos status: {e}")
        return False
    
    # TESTE 3: Relat√≥rio apenas com mensalidades pagas
    print("\n" + "="*70)
    print("üß™ TESTE 3: RELAT√ìRIO APENAS COM MENSALIDADES PAGAS")
    print("="*70)
    
    try:
        config_apenas_pagas = {
            'turmas_selecionadas': ['Ber√ß√°rio'],
            'campos_selecionados': [
                'nome',              # Aluno
                'nome',              # Respons√°vel
                'email',             # Respons√°vel
                'mes_referencia',    # Mensalidade
                'data_vencimento',   # Mensalidade
                'data_pagamento',    # Mensalidade
                'valor',             # Mensalidade
                'valor_pago'         # Mensalidade
            ],
            'filtros': {
                'status_mensalidades': ['Pago'],  # Apenas pagas
            }
        }
        
        print("üöÄ Gerando relat√≥rio apenas com mensalidades pagas...")
        resultado = gerar_relatorio_interface('financeiro', config_apenas_pagas)
        
        if resultado.get('success'):
            print("‚úÖ Relat√≥rio de mensalidades pagas gerado com sucesso!")
            print(f"üìã Total de alunos: {resultado.get('total_alunos', 0)}")
            print("‚úÖ Status: Apenas mensalidades pagas")
            
            if resultado.get('arquivo') and os.path.exists(resultado['arquivo']):
                print(f"üìÑ Arquivo: {resultado['nome_arquivo']}")
            
        else:
            print(f"‚ùå Erro na gera√ß√£o: {resultado.get('error')}")
    
    except Exception as e:
        print(f"‚ùå Erro no teste de mensalidades pagas: {e}")
    
    # TESTE 4: Relat√≥rio com alunos sem mensalidades
    print("\n" + "="*70)
    print("üß™ TESTE 4: RELAT√ìRIO COM ALUNOS SEM MENSALIDADES")
    print("="*70)
    
    try:
        config_sem_filtro_status = {
            'turmas_selecionadas': ['Ber√ß√°rio'],
            'campos_selecionados': [
                'nome',                # Aluno
                'valor_mensalidade',   # Aluno
                'nome',                # Respons√°vel
                'telefone'             # Respons√°vel
            ],
            'filtros': {}  # Sem filtros de status - pode mostrar alunos sem mensalidades
        }
        
        print("üöÄ Gerando relat√≥rio que pode incluir alunos sem mensalidades...")
        resultado = gerar_relatorio_interface('financeiro', config_sem_filtro_status)
        
        if resultado.get('success'):
            print("‚úÖ Relat√≥rio gerado (pode incluir alunos sem mensalidades)!")
            print(f"üìã Total de alunos: {resultado.get('total_alunos', 0)}")
            print("‚úÖ Configura√ß√£o: Sem filtro de status espec√≠fico")
            
        else:
            print(f"‚ùå Erro na gera√ß√£o: {resultado.get('error')}")
    
    except Exception as e:
        print(f"‚ùå Erro no teste sem filtro de status: {e}")
    
    # TESTE 5: Verificar formata√ß√£o especial para campos vazios
    print("\n" + "="*70)
    print("üß™ TESTE 5: FORMATA√á√ÉO ESPECIAL PARA CAMPOS VAZIOS")
    print("="*70)
    
    try:
        config_campos_vazios = {
            'turmas_selecionadas': ['Ber√ß√°rio'],
            'campos_selecionados': [
                'nome',           # Aluno
                'nome',           # Respons√°vel
                'email',          # Respons√°vel (pode estar vazio)
                'cpf',            # Respons√°vel (pode estar vazio)
                'mes_referencia', # Mensalidade
                'data_pagamento'  # Mensalidade (pode estar vazio para n√£o pagas)
            ],
            'filtros': {
                'status_mensalidades': ['A vencer', 'Pago']  # Mix de status
            }
        }
        
        print("üöÄ Gerando relat√≥rio para testar formata√ß√£o de campos vazios...")
        resultado = gerar_relatorio_interface('financeiro', config_campos_vazios)
        
        if resultado.get('success'):
            print("‚úÖ Relat√≥rio gerado para teste de campos vazios!")
            print("‚úÖ Campos vazios devem aparecer como **_______________**")
            
        else:
            print(f"‚ùå Erro na gera√ß√£o: {resultado.get('error')}")
    
    except Exception as e:
        print(f"‚ùå Erro no teste de campos vazios: {e}")
    
    # RESUMO FINAL
    print("\n" + "="*70)
    print("üìã RESUMO FINAL DOS TESTES")
    print("="*70)
    print("‚úÖ Campos de mensalidade atualizados (incluindo valor_pago)")
    print("‚úÖ Organiza√ß√£o por status implementada")
    print("‚úÖ M√∫ltiplos tipos de relat√≥rios testados")
    print("‚úÖ Formata√ß√£o especial para campos vazios")
    print("‚úÖ Suporte a alunos sem mensalidades")
    print("\nüéâ TODAS AS MELHORIAS IMPLEMENTADAS E TESTADAS!")
    
    return True

if __name__ == "__main__":
    sucesso = teste_melhorias_relatorios_financeiros()
    if sucesso:
        print("\n‚úÖ TESTE CONCLU√çDO COM SUCESSO!")
    else:
        print("\n‚ùå TESTE FALHOU!")
        sys.exit(1) 