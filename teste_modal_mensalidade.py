#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üß™ TESTE R√ÅPIDO DO MODAL DE MENSALIDADE
======================================

Script para testar rapidamente as funcionalidades do modal de mensalidade.
Execute para verificar se tudo est√° funcionando corretamente.
"""

import streamlit as st
from datetime import datetime, date
import json

st.set_page_config(
    page_title="üß™ Teste Modal Mensalidade",
    page_icon="üí∞",
    layout="wide"
)

st.title("üß™ Teste do Modal de Mensalidade")
st.markdown("### Verifica√ß√£o r√°pida das funcionalidades implementadas")

# ==========================================================
# TESTE 1: IMPORTA√á√ÉO DOS M√ìDULOS
# ==========================================================

st.markdown("## 1Ô∏è‚É£ Teste de Importa√ß√£o")

try:
    from modal_mensalidade_completo import (
        abrir_modal_mensalidade,
        buscar_dados_completos_mensalidade,
        calcular_status_visual,
        aplicar_css_modal
    )
    st.success("‚úÖ Modal principal importado com sucesso!")
except ImportError as e:
    st.error(f"‚ùå Erro ao importar modal principal: {e}")

try:
    from models.base import supabase, formatar_data_br, formatar_valor_br
    st.success("‚úÖ Depend√™ncias do sistema importadas!")
except ImportError as e:
    st.warning(f"‚ö†Ô∏è Depend√™ncias opcionais n√£o encontradas: {e}")

# ==========================================================
# TESTE 2: FUN√á√ïES AUXILIARES
# ==========================================================

st.markdown("## 2Ô∏è‚É£ Teste de Fun√ß√µes Auxiliares")

# Teste da fun√ß√£o calcular_status_visual
mensalidade_teste = {
    "status": "A vencer",
    "data_vencimento": "2024-12-31",
    "data_pagamento": None
}

try:
    status_resultado = calcular_status_visual(mensalidade_teste)
    st.success("‚úÖ Fun√ß√£o calcular_status_visual funcionando!")
    st.json(status_resultado)
except Exception as e:
    st.error(f"‚ùå Erro na fun√ß√£o calcular_status_visual: {e}")

# ==========================================================
# TESTE 3: CSS PERSONALIZADO
# ==========================================================

st.markdown("## 3Ô∏è‚É£ Teste de CSS")

try:
    aplicar_css_modal()
    st.success("‚úÖ CSS personalizado aplicado!")
    
    # Testar os estilos
    st.markdown("""
    <div class="info-card">
        <strong>üìã Card de teste:</strong> Este √© um exemplo de card com CSS personalizado
    </div>
    
    <div class="success-card">
        <strong>‚úÖ Card de sucesso:</strong> CSS para feedback positivo
    </div>
    
    <div class="warning-card">
        <strong>‚ö†Ô∏è Card de aviso:</strong> CSS para alertas
    </div>
    
    <div class="error-card">
        <strong>‚ùå Card de erro:</strong> CSS para erros
    </div>
    """, unsafe_allow_html=True)
    
except Exception as e:
    st.error(f"‚ùå Erro ao aplicar CSS: {e}")

# ==========================================================
# TESTE 4: SIMULA√á√ÉO DO MODAL
# ==========================================================

st.markdown("## 4Ô∏è‚É£ Simula√ß√£o do Modal")

# Estado da sess√£o para teste
if 'modal_teste_aberto' not in st.session_state:
    st.session_state.modal_teste_aberto = False

col1, col2, col3 = st.columns(3)

with col1:
    if st.button("üöÄ Testar Modal (Dados Reais)", type="primary"):
        # Tentar buscar uma mensalidade real
        try:
            response = supabase.table("mensalidades").select("id_mensalidade").limit(1).execute()
            if response.data:
                st.session_state.modal_teste_aberto = True
                st.session_state.id_mensalidade_teste = response.data[0]["id_mensalidade"]
                st.success(f"‚úÖ Mensalidade encontrada: {response.data[0]['id_mensalidade']}")
            else:
                st.warning("‚ö†Ô∏è Nenhuma mensalidade encontrada no banco")
        except Exception as e:
            st.error(f"‚ùå Erro ao buscar mensalidade: {e}")

with col2:
    if st.button("üé≠ Modo Demonstra√ß√£o", type="secondary"):
        st.info("üé≠ Modo demonstra√ß√£o ativado!")
        st.session_state.modal_teste_aberto = True
        st.session_state.id_mensalidade_teste = "demo_123"

with col3:
    if st.button("‚ùå Fechar Teste"):
        st.session_state.modal_teste_aberto = False
        st.session_state.id_mensalidade_teste = None

# Renderizar modal de teste se ativo
if st.session_state.get('modal_teste_aberto', False):
    st.markdown("---")
    st.markdown("### üîç MODAL EM EXECU√á√ÉO")
    
    id_teste = st.session_state.get('id_mensalidade_teste', 'demo_123')
    
    try:
        # Se for modo demo, criar dados fict√≠cios
        if id_teste == "demo_123":
            st.info("üé≠ **Modo Demonstra√ß√£o Ativo** - Dados fict√≠cios sendo utilizados")
            
            # Simular estrutura de dados
            dados_demo = {
                "mensalidade": {
                    "id_mensalidade": "demo_123",
                    "mes_referencia": "Janeiro/2024",
                    "valor": 250.00,
                    "data_vencimento": "2024-01-10",
                    "data_pagamento": None,
                    "status": "A vencer",
                    "observacoes": "Mensalidade de demonstra√ß√£o",
                    "inserted_at": "2024-01-01T00:00:00Z",
                    "updated_at": "2024-01-01T00:00:00Z",
                    "alunos": {
                        "id": "aluno_demo",
                        "nome": "Jo√£o Silva Demo",
                        "turno": "Manh√£",
                        "valor_mensalidade": 250.00,
                        "data_nascimento": "2010-05-15",
                        "data_matricula": "2024-01-01",
                        "dia_vencimento": 10,
                        "turmas": {
                            "nome_turma": "1¬∫ Ano A",
                            "turno": "Manh√£"
                        }
                    }
                },
                "responsaveis": [
                    {
                        "responsavel_financeiro": True,
                        "parentesco": "Pai",
                        "responsaveis": {
                            "id": "resp_demo",
                            "nome": "Carlos Silva Demo",
                            "telefone": "(11) 99999-9999",
                            "email": "carlos.demo@email.com",
                            "cpf": "123.456.789-00",
                            "endereco": "Rua Demo, 123"
                        }
                    }
                ],
                "pagamentos": [],
                "historico": [
                    {
                        "data": "2024-01-01T00:00:00Z",
                        "acao": "Cria√ß√£o",
                        "usuario": "Sistema Demo",
                        "detalhes": "Mensalidade de demonstra√ß√£o criada"
                    }
                ]
            }
            
            # Renderizar componentes do modal manualmente para demonstra√ß√£o
            from modal_mensalidade_completo import (
                renderizar_header_modal,
                renderizar_aba_detalhes,
                renderizar_footer_modal
            )
            
            # Header
            renderizar_header_modal(dados_demo)
            
            # Tabs de demonstra√ß√£o
            tab1, tab2, tab3, tab4, tab5 = st.tabs([
                "üìã Detalhes",
                "‚úèÔ∏è Edi√ß√£o", 
                "‚ö° A√ß√µes",
                "üìö Hist√≥rico",
                "üìä Relat√≥rios"
            ])
            
            with tab1:
                renderizar_aba_detalhes(dados_demo)
            
            with tab2:
                st.info("üîß Aba de edi√ß√£o em modo demonstra√ß√£o")
                st.markdown("Esta aba permitiria editar todos os campos da mensalidade")
            
            with tab3:
                st.info("üîß Aba de a√ß√µes em modo demonstra√ß√£o")
                st.markdown("Esta aba permitiria executar a√ß√µes como marcar como pago, cancelar, etc.")
            
            with tab4:
                st.info("üîß Aba de hist√≥rico em modo demonstra√ß√£o")
                st.markdown("Esta aba mostraria o timeline completo de altera√ß√µes")
            
            with tab5:
                st.info("üîß Aba de relat√≥rios em modo demonstra√ß√£o")
                st.markdown("Esta aba permitiria gerar e enviar relat√≥rios")
            
            # Footer
            renderizar_footer_modal(dados_demo)
            
        else:
            # Tentar modal real
            abrir_modal_mensalidade(id_teste)
            
    except Exception as e:
        st.error(f"‚ùå Erro ao renderizar modal: {e}")
        st.code(str(e))

# ==========================================================
# TESTE 5: VERIFICA√á√ÉO DE ESTRUTURA
# ==========================================================

st.markdown("## 5Ô∏è‚É£ Verifica√ß√£o de Estrutura")

# Verificar arquivos necess√°rios
import os

arquivos_necessarios = [
    "modal_mensalidade_completo.py",
    "exemplo_uso_modal_mensalidade.py",
    "README_MODAL_MENSALIDADE.md"
]

st.markdown("### üìÅ Arquivos do Sistema")
for arquivo in arquivos_necessarios:
    if os.path.exists(arquivo):
        st.success(f"‚úÖ {arquivo}")
    else:
        st.error(f"‚ùå {arquivo} - N√£o encontrado")

# ==========================================================
# TESTE 6: INFORMA√á√ïES DO SISTEMA
# ==========================================================

st.markdown("## 6Ô∏è‚É£ Informa√ß√µes do Sistema")

col1, col2 = st.columns(2)

with col1:
    st.markdown("### üìä Estado da Sess√£o")
    
    # Filtrar apenas keys relacionados ao modal
    modal_keys = {k: v for k, v in st.session_state.items() if 'modal' in k.lower()}
    
    if modal_keys:
        st.json(modal_keys)
    else:
        st.info("Nenhum estado de modal ativo")

with col2:
    st.markdown("### üîß Configura√ß√µes")
    
    config_info = {
        "Streamlit Version": st.__version__,
        "Python Version": f"{__import__('sys').version_info.major}.{__import__('sys').version_info.minor}",
        "Timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "Page Config": "Wide Layout"
    }
    
    st.json(config_info)

# ==========================================================
# RESULTADO FINAL
# ==========================================================

st.markdown("---")
st.markdown("## üéØ Resultado Final")

try:
    # Tentar importar tudo
    from modal_mensalidade_completo import *
    
    st.success("üéâ **SUCESSO!** Modal de mensalidade implementado e funcionando!")
    
    st.markdown("""
    ### ‚úÖ Funcionalidades Testadas:
    - ‚úÖ Importa√ß√£o de m√≥dulos
    - ‚úÖ Fun√ß√µes auxiliares
    - ‚úÖ CSS personalizado
    - ‚úÖ Estrutura de arquivos
    - ‚úÖ Simula√ß√£o do modal
    
    ### üöÄ Pr√≥ximos Passos:
    1. **Execute o exemplo completo:** `streamlit run exemplo_uso_modal_mensalidade.py`
    2. **Integre ao seu sistema** usando as instru√ß√µes do README
    3. **Personalize** o CSS e funcionalidades conforme necess√°rio
    4. **Teste com dados reais** do seu banco Supabase
    
    ### üìö Documenta√ß√£o:
    - Leia o `README_MODAL_MENSALIDADE.md` para instru√ß√µes detalhadas
    - Veja o `exemplo_uso_modal_mensalidade.py` para implementa√ß√£o pr√°tica
    - Use este teste para verificar funcionamento
    """)
    
except Exception as e:
    st.error(f"‚ùå **ERRO:** {e}")
    st.markdown("Verifique os arquivos e depend√™ncias necess√°rias")

# Footer
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #666; padding: 1rem;">
    üß™ <strong>Teste do Modal de Mensalidade</strong> | 
    üí∞ Sistema de Gest√£o Escolar | 
    üîß Vers√£o de Teste
</div>
""", unsafe_allow_html=True) 